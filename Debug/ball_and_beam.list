
ball_and_beam.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000059f8  08000200  08000200  00001200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000058  08005bf8  08005bf8  00006bf8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005c50  08005c50  0000705c  2**0
                  CONTENTS
  4 .ARM          00000008  08005c50  08005c50  00006c50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005c58  08005c58  0000705c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005c58  08005c58  00006c58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005c5c  08005c5c  00006c5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  08005c60  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002f4  2000005c  08005cbc  0000705c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000350  08005cbc  00007350  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0000705c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011477  00000000  00000000  0000708a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002777  00000000  00000000  00018501  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e40  00000000  00000000  0001ac78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000b09  00000000  00000000  0001bab8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00028bbf  00000000  00000000  0001c5c1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013331  00000000  00000000  00045180  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000fbfec  00000000  00000000  000584b1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0015449d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003f28  00000000  00000000  001544e0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000068  00000000  00000000  00158408  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	@ (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	@ (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	@ (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	2000005c 	.word	0x2000005c
 800021c:	00000000 	.word	0x00000000
 8000220:	08005be0 	.word	0x08005be0

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	@ (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	@ (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	@ (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000060 	.word	0x20000060
 800023c:	08005be0 	.word	0x08005be0

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <__aeabi_uldivmod>:
 80002e0:	b953      	cbnz	r3, 80002f8 <__aeabi_uldivmod+0x18>
 80002e2:	b94a      	cbnz	r2, 80002f8 <__aeabi_uldivmod+0x18>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bf08      	it	eq
 80002e8:	2800      	cmpeq	r0, #0
 80002ea:	bf1c      	itt	ne
 80002ec:	f04f 31ff 	movne.w	r1, #4294967295
 80002f0:	f04f 30ff 	movne.w	r0, #4294967295
 80002f4:	f000 b96a 	b.w	80005cc <__aeabi_idiv0>
 80002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000300:	f000 f806 	bl	8000310 <__udivmoddi4>
 8000304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	9d08      	ldr	r5, [sp, #32]
 8000316:	460c      	mov	r4, r1
 8000318:	2b00      	cmp	r3, #0
 800031a:	d14e      	bne.n	80003ba <__udivmoddi4+0xaa>
 800031c:	4694      	mov	ip, r2
 800031e:	458c      	cmp	ip, r1
 8000320:	4686      	mov	lr, r0
 8000322:	fab2 f282 	clz	r2, r2
 8000326:	d962      	bls.n	80003ee <__udivmoddi4+0xde>
 8000328:	b14a      	cbz	r2, 800033e <__udivmoddi4+0x2e>
 800032a:	f1c2 0320 	rsb	r3, r2, #32
 800032e:	4091      	lsls	r1, r2
 8000330:	fa20 f303 	lsr.w	r3, r0, r3
 8000334:	fa0c fc02 	lsl.w	ip, ip, r2
 8000338:	4319      	orrs	r1, r3
 800033a:	fa00 fe02 	lsl.w	lr, r0, r2
 800033e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000342:	fa1f f68c 	uxth.w	r6, ip
 8000346:	fbb1 f4f7 	udiv	r4, r1, r7
 800034a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800034e:	fb07 1114 	mls	r1, r7, r4, r1
 8000352:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000356:	fb04 f106 	mul.w	r1, r4, r6
 800035a:	4299      	cmp	r1, r3
 800035c:	d90a      	bls.n	8000374 <__udivmoddi4+0x64>
 800035e:	eb1c 0303 	adds.w	r3, ip, r3
 8000362:	f104 30ff 	add.w	r0, r4, #4294967295
 8000366:	f080 8112 	bcs.w	800058e <__udivmoddi4+0x27e>
 800036a:	4299      	cmp	r1, r3
 800036c:	f240 810f 	bls.w	800058e <__udivmoddi4+0x27e>
 8000370:	3c02      	subs	r4, #2
 8000372:	4463      	add	r3, ip
 8000374:	1a59      	subs	r1, r3, r1
 8000376:	fa1f f38e 	uxth.w	r3, lr
 800037a:	fbb1 f0f7 	udiv	r0, r1, r7
 800037e:	fb07 1110 	mls	r1, r7, r0, r1
 8000382:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000386:	fb00 f606 	mul.w	r6, r0, r6
 800038a:	429e      	cmp	r6, r3
 800038c:	d90a      	bls.n	80003a4 <__udivmoddi4+0x94>
 800038e:	eb1c 0303 	adds.w	r3, ip, r3
 8000392:	f100 31ff 	add.w	r1, r0, #4294967295
 8000396:	f080 80fc 	bcs.w	8000592 <__udivmoddi4+0x282>
 800039a:	429e      	cmp	r6, r3
 800039c:	f240 80f9 	bls.w	8000592 <__udivmoddi4+0x282>
 80003a0:	4463      	add	r3, ip
 80003a2:	3802      	subs	r0, #2
 80003a4:	1b9b      	subs	r3, r3, r6
 80003a6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80003aa:	2100      	movs	r1, #0
 80003ac:	b11d      	cbz	r5, 80003b6 <__udivmoddi4+0xa6>
 80003ae:	40d3      	lsrs	r3, r2
 80003b0:	2200      	movs	r2, #0
 80003b2:	e9c5 3200 	strd	r3, r2, [r5]
 80003b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ba:	428b      	cmp	r3, r1
 80003bc:	d905      	bls.n	80003ca <__udivmoddi4+0xba>
 80003be:	b10d      	cbz	r5, 80003c4 <__udivmoddi4+0xb4>
 80003c0:	e9c5 0100 	strd	r0, r1, [r5]
 80003c4:	2100      	movs	r1, #0
 80003c6:	4608      	mov	r0, r1
 80003c8:	e7f5      	b.n	80003b6 <__udivmoddi4+0xa6>
 80003ca:	fab3 f183 	clz	r1, r3
 80003ce:	2900      	cmp	r1, #0
 80003d0:	d146      	bne.n	8000460 <__udivmoddi4+0x150>
 80003d2:	42a3      	cmp	r3, r4
 80003d4:	d302      	bcc.n	80003dc <__udivmoddi4+0xcc>
 80003d6:	4290      	cmp	r0, r2
 80003d8:	f0c0 80f0 	bcc.w	80005bc <__udivmoddi4+0x2ac>
 80003dc:	1a86      	subs	r6, r0, r2
 80003de:	eb64 0303 	sbc.w	r3, r4, r3
 80003e2:	2001      	movs	r0, #1
 80003e4:	2d00      	cmp	r5, #0
 80003e6:	d0e6      	beq.n	80003b6 <__udivmoddi4+0xa6>
 80003e8:	e9c5 6300 	strd	r6, r3, [r5]
 80003ec:	e7e3      	b.n	80003b6 <__udivmoddi4+0xa6>
 80003ee:	2a00      	cmp	r2, #0
 80003f0:	f040 8090 	bne.w	8000514 <__udivmoddi4+0x204>
 80003f4:	eba1 040c 	sub.w	r4, r1, ip
 80003f8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003fc:	fa1f f78c 	uxth.w	r7, ip
 8000400:	2101      	movs	r1, #1
 8000402:	fbb4 f6f8 	udiv	r6, r4, r8
 8000406:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800040a:	fb08 4416 	mls	r4, r8, r6, r4
 800040e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000412:	fb07 f006 	mul.w	r0, r7, r6
 8000416:	4298      	cmp	r0, r3
 8000418:	d908      	bls.n	800042c <__udivmoddi4+0x11c>
 800041a:	eb1c 0303 	adds.w	r3, ip, r3
 800041e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000422:	d202      	bcs.n	800042a <__udivmoddi4+0x11a>
 8000424:	4298      	cmp	r0, r3
 8000426:	f200 80cd 	bhi.w	80005c4 <__udivmoddi4+0x2b4>
 800042a:	4626      	mov	r6, r4
 800042c:	1a1c      	subs	r4, r3, r0
 800042e:	fa1f f38e 	uxth.w	r3, lr
 8000432:	fbb4 f0f8 	udiv	r0, r4, r8
 8000436:	fb08 4410 	mls	r4, r8, r0, r4
 800043a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800043e:	fb00 f707 	mul.w	r7, r0, r7
 8000442:	429f      	cmp	r7, r3
 8000444:	d908      	bls.n	8000458 <__udivmoddi4+0x148>
 8000446:	eb1c 0303 	adds.w	r3, ip, r3
 800044a:	f100 34ff 	add.w	r4, r0, #4294967295
 800044e:	d202      	bcs.n	8000456 <__udivmoddi4+0x146>
 8000450:	429f      	cmp	r7, r3
 8000452:	f200 80b0 	bhi.w	80005b6 <__udivmoddi4+0x2a6>
 8000456:	4620      	mov	r0, r4
 8000458:	1bdb      	subs	r3, r3, r7
 800045a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800045e:	e7a5      	b.n	80003ac <__udivmoddi4+0x9c>
 8000460:	f1c1 0620 	rsb	r6, r1, #32
 8000464:	408b      	lsls	r3, r1
 8000466:	fa22 f706 	lsr.w	r7, r2, r6
 800046a:	431f      	orrs	r7, r3
 800046c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000470:	fa04 f301 	lsl.w	r3, r4, r1
 8000474:	ea43 030c 	orr.w	r3, r3, ip
 8000478:	40f4      	lsrs	r4, r6
 800047a:	fa00 f801 	lsl.w	r8, r0, r1
 800047e:	0c38      	lsrs	r0, r7, #16
 8000480:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000484:	fbb4 fef0 	udiv	lr, r4, r0
 8000488:	fa1f fc87 	uxth.w	ip, r7
 800048c:	fb00 441e 	mls	r4, r0, lr, r4
 8000490:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000494:	fb0e f90c 	mul.w	r9, lr, ip
 8000498:	45a1      	cmp	r9, r4
 800049a:	fa02 f201 	lsl.w	r2, r2, r1
 800049e:	d90a      	bls.n	80004b6 <__udivmoddi4+0x1a6>
 80004a0:	193c      	adds	r4, r7, r4
 80004a2:	f10e 3aff 	add.w	sl, lr, #4294967295
 80004a6:	f080 8084 	bcs.w	80005b2 <__udivmoddi4+0x2a2>
 80004aa:	45a1      	cmp	r9, r4
 80004ac:	f240 8081 	bls.w	80005b2 <__udivmoddi4+0x2a2>
 80004b0:	f1ae 0e02 	sub.w	lr, lr, #2
 80004b4:	443c      	add	r4, r7
 80004b6:	eba4 0409 	sub.w	r4, r4, r9
 80004ba:	fa1f f983 	uxth.w	r9, r3
 80004be:	fbb4 f3f0 	udiv	r3, r4, r0
 80004c2:	fb00 4413 	mls	r4, r0, r3, r4
 80004c6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004ca:	fb03 fc0c 	mul.w	ip, r3, ip
 80004ce:	45a4      	cmp	ip, r4
 80004d0:	d907      	bls.n	80004e2 <__udivmoddi4+0x1d2>
 80004d2:	193c      	adds	r4, r7, r4
 80004d4:	f103 30ff 	add.w	r0, r3, #4294967295
 80004d8:	d267      	bcs.n	80005aa <__udivmoddi4+0x29a>
 80004da:	45a4      	cmp	ip, r4
 80004dc:	d965      	bls.n	80005aa <__udivmoddi4+0x29a>
 80004de:	3b02      	subs	r3, #2
 80004e0:	443c      	add	r4, r7
 80004e2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004e6:	fba0 9302 	umull	r9, r3, r0, r2
 80004ea:	eba4 040c 	sub.w	r4, r4, ip
 80004ee:	429c      	cmp	r4, r3
 80004f0:	46ce      	mov	lr, r9
 80004f2:	469c      	mov	ip, r3
 80004f4:	d351      	bcc.n	800059a <__udivmoddi4+0x28a>
 80004f6:	d04e      	beq.n	8000596 <__udivmoddi4+0x286>
 80004f8:	b155      	cbz	r5, 8000510 <__udivmoddi4+0x200>
 80004fa:	ebb8 030e 	subs.w	r3, r8, lr
 80004fe:	eb64 040c 	sbc.w	r4, r4, ip
 8000502:	fa04 f606 	lsl.w	r6, r4, r6
 8000506:	40cb      	lsrs	r3, r1
 8000508:	431e      	orrs	r6, r3
 800050a:	40cc      	lsrs	r4, r1
 800050c:	e9c5 6400 	strd	r6, r4, [r5]
 8000510:	2100      	movs	r1, #0
 8000512:	e750      	b.n	80003b6 <__udivmoddi4+0xa6>
 8000514:	f1c2 0320 	rsb	r3, r2, #32
 8000518:	fa20 f103 	lsr.w	r1, r0, r3
 800051c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000520:	fa24 f303 	lsr.w	r3, r4, r3
 8000524:	4094      	lsls	r4, r2
 8000526:	430c      	orrs	r4, r1
 8000528:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800052c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000530:	fa1f f78c 	uxth.w	r7, ip
 8000534:	fbb3 f0f8 	udiv	r0, r3, r8
 8000538:	fb08 3110 	mls	r1, r8, r0, r3
 800053c:	0c23      	lsrs	r3, r4, #16
 800053e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000542:	fb00 f107 	mul.w	r1, r0, r7
 8000546:	4299      	cmp	r1, r3
 8000548:	d908      	bls.n	800055c <__udivmoddi4+0x24c>
 800054a:	eb1c 0303 	adds.w	r3, ip, r3
 800054e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000552:	d22c      	bcs.n	80005ae <__udivmoddi4+0x29e>
 8000554:	4299      	cmp	r1, r3
 8000556:	d92a      	bls.n	80005ae <__udivmoddi4+0x29e>
 8000558:	3802      	subs	r0, #2
 800055a:	4463      	add	r3, ip
 800055c:	1a5b      	subs	r3, r3, r1
 800055e:	b2a4      	uxth	r4, r4
 8000560:	fbb3 f1f8 	udiv	r1, r3, r8
 8000564:	fb08 3311 	mls	r3, r8, r1, r3
 8000568:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800056c:	fb01 f307 	mul.w	r3, r1, r7
 8000570:	42a3      	cmp	r3, r4
 8000572:	d908      	bls.n	8000586 <__udivmoddi4+0x276>
 8000574:	eb1c 0404 	adds.w	r4, ip, r4
 8000578:	f101 36ff 	add.w	r6, r1, #4294967295
 800057c:	d213      	bcs.n	80005a6 <__udivmoddi4+0x296>
 800057e:	42a3      	cmp	r3, r4
 8000580:	d911      	bls.n	80005a6 <__udivmoddi4+0x296>
 8000582:	3902      	subs	r1, #2
 8000584:	4464      	add	r4, ip
 8000586:	1ae4      	subs	r4, r4, r3
 8000588:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800058c:	e739      	b.n	8000402 <__udivmoddi4+0xf2>
 800058e:	4604      	mov	r4, r0
 8000590:	e6f0      	b.n	8000374 <__udivmoddi4+0x64>
 8000592:	4608      	mov	r0, r1
 8000594:	e706      	b.n	80003a4 <__udivmoddi4+0x94>
 8000596:	45c8      	cmp	r8, r9
 8000598:	d2ae      	bcs.n	80004f8 <__udivmoddi4+0x1e8>
 800059a:	ebb9 0e02 	subs.w	lr, r9, r2
 800059e:	eb63 0c07 	sbc.w	ip, r3, r7
 80005a2:	3801      	subs	r0, #1
 80005a4:	e7a8      	b.n	80004f8 <__udivmoddi4+0x1e8>
 80005a6:	4631      	mov	r1, r6
 80005a8:	e7ed      	b.n	8000586 <__udivmoddi4+0x276>
 80005aa:	4603      	mov	r3, r0
 80005ac:	e799      	b.n	80004e2 <__udivmoddi4+0x1d2>
 80005ae:	4630      	mov	r0, r6
 80005b0:	e7d4      	b.n	800055c <__udivmoddi4+0x24c>
 80005b2:	46d6      	mov	lr, sl
 80005b4:	e77f      	b.n	80004b6 <__udivmoddi4+0x1a6>
 80005b6:	4463      	add	r3, ip
 80005b8:	3802      	subs	r0, #2
 80005ba:	e74d      	b.n	8000458 <__udivmoddi4+0x148>
 80005bc:	4606      	mov	r6, r0
 80005be:	4623      	mov	r3, r4
 80005c0:	4608      	mov	r0, r1
 80005c2:	e70f      	b.n	80003e4 <__udivmoddi4+0xd4>
 80005c4:	3e02      	subs	r6, #2
 80005c6:	4463      	add	r3, ip
 80005c8:	e730      	b.n	800042c <__udivmoddi4+0x11c>
 80005ca:	bf00      	nop

080005cc <__aeabi_idiv0>:
 80005cc:	4770      	bx	lr
 80005ce:	bf00      	nop

080005d0 <MX_GPIO_Init>:
     PA12   ------> USB_OTG_FS_DP
     PG11   ------> ETH_TX_EN
     PG13   ------> ETH_TXD0
*/
void MX_GPIO_Init(void)
{
 80005d0:	b580      	push	{r7, lr}
 80005d2:	b08c      	sub	sp, #48	@ 0x30
 80005d4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005d6:	f107 031c 	add.w	r3, r7, #28
 80005da:	2200      	movs	r2, #0
 80005dc:	601a      	str	r2, [r3, #0]
 80005de:	605a      	str	r2, [r3, #4]
 80005e0:	609a      	str	r2, [r3, #8]
 80005e2:	60da      	str	r2, [r3, #12]
 80005e4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80005e6:	4b7d      	ldr	r3, [pc, #500]	@ (80007dc <MX_GPIO_Init+0x20c>)
 80005e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005ea:	4a7c      	ldr	r2, [pc, #496]	@ (80007dc <MX_GPIO_Init+0x20c>)
 80005ec:	f043 0304 	orr.w	r3, r3, #4
 80005f0:	6313      	str	r3, [r2, #48]	@ 0x30
 80005f2:	4b7a      	ldr	r3, [pc, #488]	@ (80007dc <MX_GPIO_Init+0x20c>)
 80005f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005f6:	f003 0304 	and.w	r3, r3, #4
 80005fa:	61bb      	str	r3, [r7, #24]
 80005fc:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80005fe:	4b77      	ldr	r3, [pc, #476]	@ (80007dc <MX_GPIO_Init+0x20c>)
 8000600:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000602:	4a76      	ldr	r2, [pc, #472]	@ (80007dc <MX_GPIO_Init+0x20c>)
 8000604:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000608:	6313      	str	r3, [r2, #48]	@ 0x30
 800060a:	4b74      	ldr	r3, [pc, #464]	@ (80007dc <MX_GPIO_Init+0x20c>)
 800060c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800060e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000612:	617b      	str	r3, [r7, #20]
 8000614:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000616:	4b71      	ldr	r3, [pc, #452]	@ (80007dc <MX_GPIO_Init+0x20c>)
 8000618:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800061a:	4a70      	ldr	r2, [pc, #448]	@ (80007dc <MX_GPIO_Init+0x20c>)
 800061c:	f043 0301 	orr.w	r3, r3, #1
 8000620:	6313      	str	r3, [r2, #48]	@ 0x30
 8000622:	4b6e      	ldr	r3, [pc, #440]	@ (80007dc <MX_GPIO_Init+0x20c>)
 8000624:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000626:	f003 0301 	and.w	r3, r3, #1
 800062a:	613b      	str	r3, [r7, #16]
 800062c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800062e:	4b6b      	ldr	r3, [pc, #428]	@ (80007dc <MX_GPIO_Init+0x20c>)
 8000630:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000632:	4a6a      	ldr	r2, [pc, #424]	@ (80007dc <MX_GPIO_Init+0x20c>)
 8000634:	f043 0302 	orr.w	r3, r3, #2
 8000638:	6313      	str	r3, [r2, #48]	@ 0x30
 800063a:	4b68      	ldr	r3, [pc, #416]	@ (80007dc <MX_GPIO_Init+0x20c>)
 800063c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800063e:	f003 0302 	and.w	r3, r3, #2
 8000642:	60fb      	str	r3, [r7, #12]
 8000644:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000646:	4b65      	ldr	r3, [pc, #404]	@ (80007dc <MX_GPIO_Init+0x20c>)
 8000648:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800064a:	4a64      	ldr	r2, [pc, #400]	@ (80007dc <MX_GPIO_Init+0x20c>)
 800064c:	f043 0310 	orr.w	r3, r3, #16
 8000650:	6313      	str	r3, [r2, #48]	@ 0x30
 8000652:	4b62      	ldr	r3, [pc, #392]	@ (80007dc <MX_GPIO_Init+0x20c>)
 8000654:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000656:	f003 0310 	and.w	r3, r3, #16
 800065a:	60bb      	str	r3, [r7, #8]
 800065c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800065e:	4b5f      	ldr	r3, [pc, #380]	@ (80007dc <MX_GPIO_Init+0x20c>)
 8000660:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000662:	4a5e      	ldr	r2, [pc, #376]	@ (80007dc <MX_GPIO_Init+0x20c>)
 8000664:	f043 0308 	orr.w	r3, r3, #8
 8000668:	6313      	str	r3, [r2, #48]	@ 0x30
 800066a:	4b5c      	ldr	r3, [pc, #368]	@ (80007dc <MX_GPIO_Init+0x20c>)
 800066c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800066e:	f003 0308 	and.w	r3, r3, #8
 8000672:	607b      	str	r3, [r7, #4]
 8000674:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000676:	4b59      	ldr	r3, [pc, #356]	@ (80007dc <MX_GPIO_Init+0x20c>)
 8000678:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800067a:	4a58      	ldr	r2, [pc, #352]	@ (80007dc <MX_GPIO_Init+0x20c>)
 800067c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000680:	6313      	str	r3, [r2, #48]	@ 0x30
 8000682:	4b56      	ldr	r3, [pc, #344]	@ (80007dc <MX_GPIO_Init+0x20c>)
 8000684:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000686:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800068a:	603b      	str	r3, [r7, #0]
 800068c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 800068e:	2200      	movs	r2, #0
 8000690:	f244 0181 	movw	r1, #16513	@ 0x4081
 8000694:	4852      	ldr	r0, [pc, #328]	@ (80007e0 <MX_GPIO_Init+0x210>)
 8000696:	f001 f977 	bl	8001988 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 800069a:	2200      	movs	r2, #0
 800069c:	2140      	movs	r1, #64	@ 0x40
 800069e:	4851      	ldr	r0, [pc, #324]	@ (80007e4 <MX_GPIO_Init+0x214>)
 80006a0:	f001 f972 	bl	8001988 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 80006a4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80006a8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80006aa:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80006ae:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006b0:	2300      	movs	r3, #0
 80006b2:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 80006b4:	f107 031c 	add.w	r3, r7, #28
 80006b8:	4619      	mov	r1, r3
 80006ba:	484b      	ldr	r0, [pc, #300]	@ (80007e8 <MX_GPIO_Init+0x218>)
 80006bc:	f000 ffb8 	bl	8001630 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 80006c0:	2332      	movs	r3, #50	@ 0x32
 80006c2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006c4:	2302      	movs	r3, #2
 80006c6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006c8:	2300      	movs	r3, #0
 80006ca:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80006cc:	2303      	movs	r3, #3
 80006ce:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80006d0:	230b      	movs	r3, #11
 80006d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80006d4:	f107 031c 	add.w	r3, r7, #28
 80006d8:	4619      	mov	r1, r3
 80006da:	4843      	ldr	r0, [pc, #268]	@ (80007e8 <MX_GPIO_Init+0x218>)
 80006dc:	f000 ffa8 	bl	8001630 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 80006e0:	2386      	movs	r3, #134	@ 0x86
 80006e2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006e4:	2302      	movs	r3, #2
 80006e6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006e8:	2300      	movs	r3, #0
 80006ea:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80006ec:	2303      	movs	r3, #3
 80006ee:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80006f0:	230b      	movs	r3, #11
 80006f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006f4:	f107 031c 	add.w	r3, r7, #28
 80006f8:	4619      	mov	r1, r3
 80006fa:	483c      	ldr	r0, [pc, #240]	@ (80007ec <MX_GPIO_Init+0x21c>)
 80006fc:	f000 ff98 	bl	8001630 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000700:	f244 0381 	movw	r3, #16513	@ 0x4081
 8000704:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000706:	2301      	movs	r3, #1
 8000708:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800070a:	2300      	movs	r3, #0
 800070c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800070e:	2300      	movs	r3, #0
 8000710:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000712:	f107 031c 	add.w	r3, r7, #28
 8000716:	4619      	mov	r1, r3
 8000718:	4831      	ldr	r0, [pc, #196]	@ (80007e0 <MX_GPIO_Init+0x210>)
 800071a:	f000 ff89 	bl	8001630 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 800071e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000722:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000724:	2302      	movs	r3, #2
 8000726:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000728:	2300      	movs	r3, #0
 800072a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800072c:	2303      	movs	r3, #3
 800072e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000730:	230b      	movs	r3, #11
 8000732:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000734:	f107 031c 	add.w	r3, r7, #28
 8000738:	4619      	mov	r1, r3
 800073a:	4829      	ldr	r0, [pc, #164]	@ (80007e0 <MX_GPIO_Init+0x210>)
 800073c:	f000 ff78 	bl	8001630 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000740:	2340      	movs	r3, #64	@ 0x40
 8000742:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000744:	2301      	movs	r3, #1
 8000746:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000748:	2300      	movs	r3, #0
 800074a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800074c:	2300      	movs	r3, #0
 800074e:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000750:	f107 031c 	add.w	r3, r7, #28
 8000754:	4619      	mov	r1, r3
 8000756:	4823      	ldr	r0, [pc, #140]	@ (80007e4 <MX_GPIO_Init+0x214>)
 8000758:	f000 ff6a 	bl	8001630 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 800075c:	2380      	movs	r3, #128	@ 0x80
 800075e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000760:	2300      	movs	r3, #0
 8000762:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000764:	2300      	movs	r3, #0
 8000766:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000768:	f107 031c 	add.w	r3, r7, #28
 800076c:	4619      	mov	r1, r3
 800076e:	481d      	ldr	r0, [pc, #116]	@ (80007e4 <MX_GPIO_Init+0x214>)
 8000770:	f000 ff5e 	bl	8001630 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000774:	f44f 53e8 	mov.w	r3, #7424	@ 0x1d00
 8000778:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800077a:	2302      	movs	r3, #2
 800077c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800077e:	2300      	movs	r3, #0
 8000780:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000782:	2303      	movs	r3, #3
 8000784:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000786:	230a      	movs	r3, #10
 8000788:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800078a:	f107 031c 	add.w	r3, r7, #28
 800078e:	4619      	mov	r1, r3
 8000790:	4816      	ldr	r0, [pc, #88]	@ (80007ec <MX_GPIO_Init+0x21c>)
 8000792:	f000 ff4d 	bl	8001630 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000796:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800079a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800079c:	2300      	movs	r3, #0
 800079e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007a0:	2300      	movs	r3, #0
 80007a2:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 80007a4:	f107 031c 	add.w	r3, r7, #28
 80007a8:	4619      	mov	r1, r3
 80007aa:	4810      	ldr	r0, [pc, #64]	@ (80007ec <MX_GPIO_Init+0x21c>)
 80007ac:	f000 ff40 	bl	8001630 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 80007b0:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 80007b4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007b6:	2302      	movs	r3, #2
 80007b8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ba:	2300      	movs	r3, #0
 80007bc:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007be:	2303      	movs	r3, #3
 80007c0:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80007c2:	230b      	movs	r3, #11
 80007c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80007c6:	f107 031c 	add.w	r3, r7, #28
 80007ca:	4619      	mov	r1, r3
 80007cc:	4805      	ldr	r0, [pc, #20]	@ (80007e4 <MX_GPIO_Init+0x214>)
 80007ce:	f000 ff2f 	bl	8001630 <HAL_GPIO_Init>

}
 80007d2:	bf00      	nop
 80007d4:	3730      	adds	r7, #48	@ 0x30
 80007d6:	46bd      	mov	sp, r7
 80007d8:	bd80      	pop	{r7, pc}
 80007da:	bf00      	nop
 80007dc:	40023800 	.word	0x40023800
 80007e0:	40020400 	.word	0x40020400
 80007e4:	40021800 	.word	0x40021800
 80007e8:	40020800 	.word	0x40020800
 80007ec:	40020000 	.word	0x40020000

080007f0 <hc_sr04_init>:
#include "main.h"

#define HC_SR04_US_TO_CM_CONVERTER 0.017f

void hc_sr04_init(struct us_sensor_str *us_sensor, TIM_HandleTypeDef *htim_echo, TIM_HandleTypeDef *htim_trig, uint32_t trig_channel)
{
 80007f0:	b580      	push	{r7, lr}
 80007f2:	b084      	sub	sp, #16
 80007f4:	af00      	add	r7, sp, #0
 80007f6:	60f8      	str	r0, [r7, #12]
 80007f8:	60b9      	str	r1, [r7, #8]
 80007fa:	607a      	str	r2, [r7, #4]
 80007fc:	603b      	str	r3, [r7, #0]
	us_sensor->htim_echo = htim_echo;
 80007fe:	68fb      	ldr	r3, [r7, #12]
 8000800:	68ba      	ldr	r2, [r7, #8]
 8000802:	601a      	str	r2, [r3, #0]
		us_sensor->htim_trig = htim_trig;
 8000804:	68fb      	ldr	r3, [r7, #12]
 8000806:	687a      	ldr	r2, [r7, #4]
 8000808:	605a      	str	r2, [r3, #4]
		us_sensor->trig_channel = trig_channel;
 800080a:	68fb      	ldr	r3, [r7, #12]
 800080c:	683a      	ldr	r2, [r7, #0]
 800080e:	609a      	str	r2, [r3, #8]

		HAL_TIM_IC_Start_IT(us_sensor->htim_echo, TIM_CHANNEL_1 | TIM_CHANNEL_2);
 8000810:	68fb      	ldr	r3, [r7, #12]
 8000812:	681b      	ldr	r3, [r3, #0]
 8000814:	2104      	movs	r1, #4
 8000816:	4618      	mov	r0, r3
 8000818:	f002 fc36 	bl	8003088 <HAL_TIM_IC_Start_IT>
		HAL_TIM_PWM_Start(us_sensor->htim_trig, us_sensor->trig_channel);
 800081c:	68fb      	ldr	r3, [r7, #12]
 800081e:	685a      	ldr	r2, [r3, #4]
 8000820:	68fb      	ldr	r3, [r7, #12]
 8000822:	689b      	ldr	r3, [r3, #8]
 8000824:	4619      	mov	r1, r3
 8000826:	4610      	mov	r0, r2
 8000828:	f002 fad2 	bl	8002dd0 <HAL_TIM_PWM_Start>
}
 800082c:	bf00      	nop
 800082e:	3710      	adds	r7, #16
 8000830:	46bd      	mov	sp, r7
 8000832:	bd80      	pop	{r7, pc}

08000834 <hc_sr04_convert_us_to_cm>:

float hc_sr04_convert_us_to_cm(uint32_t distance_us)
{
 8000834:	b480      	push	{r7}
 8000836:	b083      	sub	sp, #12
 8000838:	af00      	add	r7, sp, #0
 800083a:	6078      	str	r0, [r7, #4]
    return ((float)distance_us * HC_SR04_US_TO_CM_CONVERTER);
 800083c:	687b      	ldr	r3, [r7, #4]
 800083e:	ee07 3a90 	vmov	s15, r3
 8000842:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000846:	ed9f 7a05 	vldr	s14, [pc, #20]	@ 800085c <hc_sr04_convert_us_to_cm+0x28>
 800084a:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 800084e:	eeb0 0a67 	vmov.f32	s0, s15
 8000852:	370c      	adds	r7, #12
 8000854:	46bd      	mov	sp, r7
 8000856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800085a:	4770      	bx	lr
 800085c:	3c8b4396 	.word	0x3c8b4396

08000860 <HAL_TIM_IC_CaptureCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8000860:	b590      	push	{r4, r7, lr}
 8000862:	b08d      	sub	sp, #52	@ 0x34
 8000864:	af00      	add	r7, sp, #0
 8000866:	6078      	str	r0, [r7, #4]
	if(TIM1 == htim->Instance)
 8000868:	687b      	ldr	r3, [r7, #4]
 800086a:	681b      	ldr	r3, [r3, #0]
 800086c:	4a22      	ldr	r2, [pc, #136]	@ (80008f8 <HAL_TIM_IC_CaptureCallback+0x98>)
 800086e:	4293      	cmp	r3, r2
 8000870:	d13e      	bne.n	80008f0 <HAL_TIM_IC_CaptureCallback+0x90>
	{
		uint32_t echo_us;

		echo_us = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_2);
 8000872:	2104      	movs	r1, #4
 8000874:	6878      	ldr	r0, [r7, #4]
 8000876:	f003 f91b 	bl	8003ab0 <HAL_TIM_ReadCapturedValue>
 800087a:	62f8      	str	r0, [r7, #44]	@ 0x2c
		distance_sensor.distance_cm = hc_sr04_convert_us_to_cm(echo_us);
 800087c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800087e:	f7ff ffd9 	bl	8000834 <hc_sr04_convert_us_to_cm>
 8000882:	eef0 7a40 	vmov.f32	s15, s0
 8000886:	4b1d      	ldr	r3, [pc, #116]	@ (80008fc <HAL_TIM_IC_CaptureCallback+0x9c>)
 8000888:	edc3 7a03 	vstr	s15, [r3, #12]
		d = distance_sensor.distance_cm * 10;
 800088c:	4b1b      	ldr	r3, [pc, #108]	@ (80008fc <HAL_TIM_IC_CaptureCallback+0x9c>)
 800088e:	edd3 7a03 	vldr	s15, [r3, #12]
 8000892:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8000896:	ee67 7a87 	vmul.f32	s15, s15, s14
 800089a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800089e:	ee17 2a90 	vmov	r2, s15
 80008a2:	4b17      	ldr	r3, [pc, #92]	@ (8000900 <HAL_TIM_IC_CaptureCallback+0xa0>)
 80008a4:	601a      	str	r2, [r3, #0]


		uint8_t tx_buffer[32];
		int tx_msg_len = sprintf((char*)tx_buffer, "%03u.%01u\r", d / 10, d % 10);
 80008a6:	4b16      	ldr	r3, [pc, #88]	@ (8000900 <HAL_TIM_IC_CaptureCallback+0xa0>)
 80008a8:	681b      	ldr	r3, [r3, #0]
 80008aa:	4a16      	ldr	r2, [pc, #88]	@ (8000904 <HAL_TIM_IC_CaptureCallback+0xa4>)
 80008ac:	fb82 1203 	smull	r1, r2, r2, r3
 80008b0:	1092      	asrs	r2, r2, #2
 80008b2:	17db      	asrs	r3, r3, #31
 80008b4:	1ad4      	subs	r4, r2, r3
 80008b6:	4b12      	ldr	r3, [pc, #72]	@ (8000900 <HAL_TIM_IC_CaptureCallback+0xa0>)
 80008b8:	681a      	ldr	r2, [r3, #0]
 80008ba:	4b12      	ldr	r3, [pc, #72]	@ (8000904 <HAL_TIM_IC_CaptureCallback+0xa4>)
 80008bc:	fb83 1302 	smull	r1, r3, r3, r2
 80008c0:	1099      	asrs	r1, r3, #2
 80008c2:	17d3      	asrs	r3, r2, #31
 80008c4:	1ac9      	subs	r1, r1, r3
 80008c6:	460b      	mov	r3, r1
 80008c8:	009b      	lsls	r3, r3, #2
 80008ca:	440b      	add	r3, r1
 80008cc:	005b      	lsls	r3, r3, #1
 80008ce:	1ad1      	subs	r1, r2, r3
 80008d0:	f107 0008 	add.w	r0, r7, #8
 80008d4:	460b      	mov	r3, r1
 80008d6:	4622      	mov	r2, r4
 80008d8:	490b      	ldr	r1, [pc, #44]	@ (8000908 <HAL_TIM_IC_CaptureCallback+0xa8>)
 80008da:	f004 fce1 	bl	80052a0 <siprintf>
 80008de:	62b8      	str	r0, [r7, #40]	@ 0x28
		HAL_UART_Transmit(&huart3, tx_buffer, tx_msg_len, 100);
 80008e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80008e2:	b29a      	uxth	r2, r3
 80008e4:	f107 0108 	add.w	r1, r7, #8
 80008e8:	2364      	movs	r3, #100	@ 0x64
 80008ea:	4808      	ldr	r0, [pc, #32]	@ (800090c <HAL_TIM_IC_CaptureCallback+0xac>)
 80008ec:	f003 ffce 	bl	800488c <HAL_UART_Transmit>
	}
}
 80008f0:	bf00      	nop
 80008f2:	3734      	adds	r7, #52	@ 0x34
 80008f4:	46bd      	mov	sp, r7
 80008f6:	bd90      	pop	{r4, r7, pc}
 80008f8:	40010000 	.word	0x40010000
 80008fc:	20000078 	.word	0x20000078
 8000900:	20000088 	.word	0x20000088
 8000904:	66666667 	.word	0x66666667
 8000908:	08005bf8 	.word	0x08005bf8
 800090c:	2000017c 	.word	0x2000017c

08000910 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000910:	b580      	push	{r7, lr}
 8000912:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000914:	f000 fcf9 	bl	800130a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000918:	f000 f82e 	bl	8000978 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800091c:	f7ff fe58 	bl	80005d0 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8000920:	f000 fc3a 	bl	8001198 <MX_USART3_UART_Init>
  MX_TIM1_Init();
 8000924:	f000 fa02 	bl	8000d2c <MX_TIM1_Init>
  MX_TIM2_Init();
 8000928:	f000 faa4 	bl	8000e74 <MX_TIM2_Init>
  MX_TIM3_Init();
 800092c:	f000 fafc 	bl	8000f28 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  hc_sr04_init(&distance_sensor, &htim1, &htim2, TIM_CHANNEL_3);
 8000930:	2308      	movs	r3, #8
 8000932:	4a0d      	ldr	r2, [pc, #52]	@ (8000968 <main+0x58>)
 8000934:	490d      	ldr	r1, [pc, #52]	@ (800096c <main+0x5c>)
 8000936:	480e      	ldr	r0, [pc, #56]	@ (8000970 <main+0x60>)
 8000938:	f7ff ff5a 	bl	80007f0 <hc_sr04_init>
  servo_init(&htim3, TIM_CHANNEL_3);
 800093c:	2108      	movs	r1, #8
 800093e:	480d      	ldr	r0, [pc, #52]	@ (8000974 <main+0x64>)
 8000940:	f000 f892 	bl	8000a68 <servo_init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  servo_set_angle(90);
 8000944:	205a      	movs	r0, #90	@ 0x5a
 8000946:	f000 f8e7 	bl	8000b18 <servo_set_angle>
	  HAL_Delay(2000);
 800094a:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 800094e:	f000 fd39 	bl	80013c4 <HAL_Delay>
	  servo_set_angle(-90);
 8000952:	f06f 0059 	mvn.w	r0, #89	@ 0x59
 8000956:	f000 f8df 	bl	8000b18 <servo_set_angle>
	  	  HAL_Delay(2000);
 800095a:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 800095e:	f000 fd31 	bl	80013c4 <HAL_Delay>
	  servo_set_angle(90);
 8000962:	bf00      	nop
 8000964:	e7ee      	b.n	8000944 <main+0x34>
 8000966:	bf00      	nop
 8000968:	200000e4 	.word	0x200000e4
 800096c:	20000098 	.word	0x20000098
 8000970:	20000078 	.word	0x20000078
 8000974:	20000130 	.word	0x20000130

08000978 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000978:	b580      	push	{r7, lr}
 800097a:	b094      	sub	sp, #80	@ 0x50
 800097c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800097e:	f107 031c 	add.w	r3, r7, #28
 8000982:	2234      	movs	r2, #52	@ 0x34
 8000984:	2100      	movs	r1, #0
 8000986:	4618      	mov	r0, r3
 8000988:	f004 fcaa 	bl	80052e0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800098c:	f107 0308 	add.w	r3, r7, #8
 8000990:	2200      	movs	r2, #0
 8000992:	601a      	str	r2, [r3, #0]
 8000994:	605a      	str	r2, [r3, #4]
 8000996:	609a      	str	r2, [r3, #8]
 8000998:	60da      	str	r2, [r3, #12]
 800099a:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 800099c:	f001 f80e 	bl	80019bc <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80009a0:	4b2c      	ldr	r3, [pc, #176]	@ (8000a54 <SystemClock_Config+0xdc>)
 80009a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009a4:	4a2b      	ldr	r2, [pc, #172]	@ (8000a54 <SystemClock_Config+0xdc>)
 80009a6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80009aa:	6413      	str	r3, [r2, #64]	@ 0x40
 80009ac:	4b29      	ldr	r3, [pc, #164]	@ (8000a54 <SystemClock_Config+0xdc>)
 80009ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009b0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80009b4:	607b      	str	r3, [r7, #4]
 80009b6:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80009b8:	4b27      	ldr	r3, [pc, #156]	@ (8000a58 <SystemClock_Config+0xe0>)
 80009ba:	681b      	ldr	r3, [r3, #0]
 80009bc:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80009c0:	4a25      	ldr	r2, [pc, #148]	@ (8000a58 <SystemClock_Config+0xe0>)
 80009c2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80009c6:	6013      	str	r3, [r2, #0]
 80009c8:	4b23      	ldr	r3, [pc, #140]	@ (8000a58 <SystemClock_Config+0xe0>)
 80009ca:	681b      	ldr	r3, [r3, #0]
 80009cc:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80009d0:	603b      	str	r3, [r7, #0]
 80009d2:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80009d4:	2301      	movs	r3, #1
 80009d6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80009d8:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 80009dc:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80009de:	2302      	movs	r3, #2
 80009e0:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80009e2:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80009e6:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 80009e8:	2304      	movs	r3, #4
 80009ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 96;
 80009ec:	2360      	movs	r3, #96	@ 0x60
 80009ee:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80009f0:	2302      	movs	r3, #2
 80009f2:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80009f4:	2304      	movs	r3, #4
 80009f6:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80009f8:	2302      	movs	r3, #2
 80009fa:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009fc:	f107 031c 	add.w	r3, r7, #28
 8000a00:	4618      	mov	r0, r3
 8000a02:	f001 f83b 	bl	8001a7c <HAL_RCC_OscConfig>
 8000a06:	4603      	mov	r3, r0
 8000a08:	2b00      	cmp	r3, #0
 8000a0a:	d001      	beq.n	8000a10 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000a0c:	f000 f826 	bl	8000a5c <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000a10:	f000 ffe4 	bl	80019dc <HAL_PWREx_EnableOverDrive>
 8000a14:	4603      	mov	r3, r0
 8000a16:	2b00      	cmp	r3, #0
 8000a18:	d001      	beq.n	8000a1e <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8000a1a:	f000 f81f 	bl	8000a5c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a1e:	230f      	movs	r3, #15
 8000a20:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a22:	2302      	movs	r3, #2
 8000a24:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a26:	2300      	movs	r3, #0
 8000a28:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000a2a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000a2e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000a30:	2300      	movs	r3, #0
 8000a32:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000a34:	f107 0308 	add.w	r3, r7, #8
 8000a38:	2103      	movs	r1, #3
 8000a3a:	4618      	mov	r0, r3
 8000a3c:	f001 facc 	bl	8001fd8 <HAL_RCC_ClockConfig>
 8000a40:	4603      	mov	r3, r0
 8000a42:	2b00      	cmp	r3, #0
 8000a44:	d001      	beq.n	8000a4a <SystemClock_Config+0xd2>
  {
    Error_Handler();
 8000a46:	f000 f809 	bl	8000a5c <Error_Handler>
  }
}
 8000a4a:	bf00      	nop
 8000a4c:	3750      	adds	r7, #80	@ 0x50
 8000a4e:	46bd      	mov	sp, r7
 8000a50:	bd80      	pop	{r7, pc}
 8000a52:	bf00      	nop
 8000a54:	40023800 	.word	0x40023800
 8000a58:	40007000 	.word	0x40007000

08000a5c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a5c:	b480      	push	{r7}
 8000a5e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a60:	b672      	cpsid	i
}
 8000a62:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a64:	bf00      	nop
 8000a66:	e7fd      	b.n	8000a64 <Error_Handler+0x8>

08000a68 <servo_init>:

TIM_HandleTypeDef *pwm_tim;
uint32_t pwm_channel;

void servo_init(TIM_HandleTypeDef *tim, uint32_t channel)
{
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	b082      	sub	sp, #8
 8000a6c:	af00      	add	r7, sp, #0
 8000a6e:	6078      	str	r0, [r7, #4]
 8000a70:	6039      	str	r1, [r7, #0]
	pwm_tim = tim;
 8000a72:	4a27      	ldr	r2, [pc, #156]	@ (8000b10 <servo_init+0xa8>)
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	6013      	str	r3, [r2, #0]
	pwm_channel = channel;
 8000a78:	4a26      	ldr	r2, [pc, #152]	@ (8000b14 <servo_init+0xac>)
 8000a7a:	683b      	ldr	r3, [r7, #0]
 8000a7c:	6013      	str	r3, [r2, #0]
	HAL_TIM_PWM_Start(pwm_tim, pwm_channel);
 8000a7e:	4b24      	ldr	r3, [pc, #144]	@ (8000b10 <servo_init+0xa8>)
 8000a80:	681b      	ldr	r3, [r3, #0]
 8000a82:	4a24      	ldr	r2, [pc, #144]	@ (8000b14 <servo_init+0xac>)
 8000a84:	6812      	ldr	r2, [r2, #0]
 8000a86:	4611      	mov	r1, r2
 8000a88:	4618      	mov	r0, r3
 8000a8a:	f002 f9a1 	bl	8002dd0 <HAL_TIM_PWM_Start>
	__HAL_TIM_SET_COMPARE(pwm_tim, pwm_channel, SERVO_MIN_US);
 8000a8e:	4b21      	ldr	r3, [pc, #132]	@ (8000b14 <servo_init+0xac>)
 8000a90:	681b      	ldr	r3, [r3, #0]
 8000a92:	2b00      	cmp	r3, #0
 8000a94:	d106      	bne.n	8000aa4 <servo_init+0x3c>
 8000a96:	4b1e      	ldr	r3, [pc, #120]	@ (8000b10 <servo_init+0xa8>)
 8000a98:	681b      	ldr	r3, [r3, #0]
 8000a9a:	681b      	ldr	r3, [r3, #0]
 8000a9c:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8000aa0:	635a      	str	r2, [r3, #52]	@ 0x34

}
 8000aa2:	e031      	b.n	8000b08 <servo_init+0xa0>
	__HAL_TIM_SET_COMPARE(pwm_tim, pwm_channel, SERVO_MIN_US);
 8000aa4:	4b1b      	ldr	r3, [pc, #108]	@ (8000b14 <servo_init+0xac>)
 8000aa6:	681b      	ldr	r3, [r3, #0]
 8000aa8:	2b04      	cmp	r3, #4
 8000aaa:	d106      	bne.n	8000aba <servo_init+0x52>
 8000aac:	4b18      	ldr	r3, [pc, #96]	@ (8000b10 <servo_init+0xa8>)
 8000aae:	681b      	ldr	r3, [r3, #0]
 8000ab0:	681a      	ldr	r2, [r3, #0]
 8000ab2:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8000ab6:	6393      	str	r3, [r2, #56]	@ 0x38
}
 8000ab8:	e026      	b.n	8000b08 <servo_init+0xa0>
	__HAL_TIM_SET_COMPARE(pwm_tim, pwm_channel, SERVO_MIN_US);
 8000aba:	4b16      	ldr	r3, [pc, #88]	@ (8000b14 <servo_init+0xac>)
 8000abc:	681b      	ldr	r3, [r3, #0]
 8000abe:	2b08      	cmp	r3, #8
 8000ac0:	d106      	bne.n	8000ad0 <servo_init+0x68>
 8000ac2:	4b13      	ldr	r3, [pc, #76]	@ (8000b10 <servo_init+0xa8>)
 8000ac4:	681b      	ldr	r3, [r3, #0]
 8000ac6:	681a      	ldr	r2, [r3, #0]
 8000ac8:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8000acc:	63d3      	str	r3, [r2, #60]	@ 0x3c
}
 8000ace:	e01b      	b.n	8000b08 <servo_init+0xa0>
	__HAL_TIM_SET_COMPARE(pwm_tim, pwm_channel, SERVO_MIN_US);
 8000ad0:	4b10      	ldr	r3, [pc, #64]	@ (8000b14 <servo_init+0xac>)
 8000ad2:	681b      	ldr	r3, [r3, #0]
 8000ad4:	2b0c      	cmp	r3, #12
 8000ad6:	d106      	bne.n	8000ae6 <servo_init+0x7e>
 8000ad8:	4b0d      	ldr	r3, [pc, #52]	@ (8000b10 <servo_init+0xa8>)
 8000ada:	681b      	ldr	r3, [r3, #0]
 8000adc:	681a      	ldr	r2, [r3, #0]
 8000ade:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8000ae2:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8000ae4:	e010      	b.n	8000b08 <servo_init+0xa0>
	__HAL_TIM_SET_COMPARE(pwm_tim, pwm_channel, SERVO_MIN_US);
 8000ae6:	4b0b      	ldr	r3, [pc, #44]	@ (8000b14 <servo_init+0xac>)
 8000ae8:	681b      	ldr	r3, [r3, #0]
 8000aea:	2b10      	cmp	r3, #16
 8000aec:	d106      	bne.n	8000afc <servo_init+0x94>
 8000aee:	4b08      	ldr	r3, [pc, #32]	@ (8000b10 <servo_init+0xa8>)
 8000af0:	681b      	ldr	r3, [r3, #0]
 8000af2:	681a      	ldr	r2, [r3, #0]
 8000af4:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8000af8:	6593      	str	r3, [r2, #88]	@ 0x58
}
 8000afa:	e005      	b.n	8000b08 <servo_init+0xa0>
	__HAL_TIM_SET_COMPARE(pwm_tim, pwm_channel, SERVO_MIN_US);
 8000afc:	4b04      	ldr	r3, [pc, #16]	@ (8000b10 <servo_init+0xa8>)
 8000afe:	681b      	ldr	r3, [r3, #0]
 8000b00:	681a      	ldr	r2, [r3, #0]
 8000b02:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8000b06:	65d3      	str	r3, [r2, #92]	@ 0x5c
}
 8000b08:	bf00      	nop
 8000b0a:	3708      	adds	r7, #8
 8000b0c:	46bd      	mov	sp, r7
 8000b0e:	bd80      	pop	{r7, pc}
 8000b10:	2000008c 	.word	0x2000008c
 8000b14:	20000090 	.word	0x20000090

08000b18 <servo_set_angle>:


void servo_set_angle(int angle)
{
 8000b18:	b480      	push	{r7}
 8000b1a:	b085      	sub	sp, #20
 8000b1c:	af00      	add	r7, sp, #0
 8000b1e:	6078      	str	r0, [r7, #4]
    if(angle < SERVO_MIN_ANGLE)
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	f113 0f5a 	cmn.w	r3, #90	@ 0x5a
 8000b26:	da03      	bge.n	8000b30 <servo_set_angle+0x18>
        angle = SERVO_MIN_ANGLE;
 8000b28:	f06f 0359 	mvn.w	r3, #89	@ 0x59
 8000b2c:	607b      	str	r3, [r7, #4]
 8000b2e:	e004      	b.n	8000b3a <servo_set_angle+0x22>
    else if(angle > SERVO_MAX_ANGLE)
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	2b5a      	cmp	r3, #90	@ 0x5a
 8000b34:	dd01      	ble.n	8000b3a <servo_set_angle+0x22>
        angle = SERVO_MAX_ANGLE;
 8000b36:	235a      	movs	r3, #90	@ 0x5a
 8000b38:	607b      	str	r3, [r7, #4]

    uint32_t pwm_duty_us;

    pwm_duty_us = SERVO_MIN_US +
                  ((angle - SERVO_MIN_ANGLE) * (SERVO_MAX_US - SERVO_MIN_US)) /
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	335a      	adds	r3, #90	@ 0x5a
 8000b3e:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8000b42:	fb02 f303 	mul.w	r3, r2, r3
 8000b46:	4a23      	ldr	r2, [pc, #140]	@ (8000bd4 <servo_set_angle+0xbc>)
 8000b48:	fb82 1203 	smull	r1, r2, r2, r3
 8000b4c:	441a      	add	r2, r3
 8000b4e:	11d2      	asrs	r2, r2, #7
 8000b50:	17db      	asrs	r3, r3, #31
 8000b52:	1ad3      	subs	r3, r2, r3
    pwm_duty_us = SERVO_MIN_US +
 8000b54:	f503 73fa 	add.w	r3, r3, #500	@ 0x1f4
 8000b58:	60fb      	str	r3, [r7, #12]
                  (SERVO_MAX_ANGLE - SERVO_MIN_ANGLE);

    __HAL_TIM_SET_COMPARE(pwm_tim, pwm_channel, pwm_duty_us);
 8000b5a:	4b1f      	ldr	r3, [pc, #124]	@ (8000bd8 <servo_set_angle+0xc0>)
 8000b5c:	681b      	ldr	r3, [r3, #0]
 8000b5e:	2b00      	cmp	r3, #0
 8000b60:	d105      	bne.n	8000b6e <servo_set_angle+0x56>
 8000b62:	4b1e      	ldr	r3, [pc, #120]	@ (8000bdc <servo_set_angle+0xc4>)
 8000b64:	681b      	ldr	r3, [r3, #0]
 8000b66:	681b      	ldr	r3, [r3, #0]
 8000b68:	68fa      	ldr	r2, [r7, #12]
 8000b6a:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8000b6c:	e02c      	b.n	8000bc8 <servo_set_angle+0xb0>
    __HAL_TIM_SET_COMPARE(pwm_tim, pwm_channel, pwm_duty_us);
 8000b6e:	4b1a      	ldr	r3, [pc, #104]	@ (8000bd8 <servo_set_angle+0xc0>)
 8000b70:	681b      	ldr	r3, [r3, #0]
 8000b72:	2b04      	cmp	r3, #4
 8000b74:	d105      	bne.n	8000b82 <servo_set_angle+0x6a>
 8000b76:	4b19      	ldr	r3, [pc, #100]	@ (8000bdc <servo_set_angle+0xc4>)
 8000b78:	681b      	ldr	r3, [r3, #0]
 8000b7a:	681a      	ldr	r2, [r3, #0]
 8000b7c:	68fb      	ldr	r3, [r7, #12]
 8000b7e:	6393      	str	r3, [r2, #56]	@ 0x38
}
 8000b80:	e022      	b.n	8000bc8 <servo_set_angle+0xb0>
    __HAL_TIM_SET_COMPARE(pwm_tim, pwm_channel, pwm_duty_us);
 8000b82:	4b15      	ldr	r3, [pc, #84]	@ (8000bd8 <servo_set_angle+0xc0>)
 8000b84:	681b      	ldr	r3, [r3, #0]
 8000b86:	2b08      	cmp	r3, #8
 8000b88:	d105      	bne.n	8000b96 <servo_set_angle+0x7e>
 8000b8a:	4b14      	ldr	r3, [pc, #80]	@ (8000bdc <servo_set_angle+0xc4>)
 8000b8c:	681b      	ldr	r3, [r3, #0]
 8000b8e:	681a      	ldr	r2, [r3, #0]
 8000b90:	68fb      	ldr	r3, [r7, #12]
 8000b92:	63d3      	str	r3, [r2, #60]	@ 0x3c
}
 8000b94:	e018      	b.n	8000bc8 <servo_set_angle+0xb0>
    __HAL_TIM_SET_COMPARE(pwm_tim, pwm_channel, pwm_duty_us);
 8000b96:	4b10      	ldr	r3, [pc, #64]	@ (8000bd8 <servo_set_angle+0xc0>)
 8000b98:	681b      	ldr	r3, [r3, #0]
 8000b9a:	2b0c      	cmp	r3, #12
 8000b9c:	d105      	bne.n	8000baa <servo_set_angle+0x92>
 8000b9e:	4b0f      	ldr	r3, [pc, #60]	@ (8000bdc <servo_set_angle+0xc4>)
 8000ba0:	681b      	ldr	r3, [r3, #0]
 8000ba2:	681a      	ldr	r2, [r3, #0]
 8000ba4:	68fb      	ldr	r3, [r7, #12]
 8000ba6:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8000ba8:	e00e      	b.n	8000bc8 <servo_set_angle+0xb0>
    __HAL_TIM_SET_COMPARE(pwm_tim, pwm_channel, pwm_duty_us);
 8000baa:	4b0b      	ldr	r3, [pc, #44]	@ (8000bd8 <servo_set_angle+0xc0>)
 8000bac:	681b      	ldr	r3, [r3, #0]
 8000bae:	2b10      	cmp	r3, #16
 8000bb0:	d105      	bne.n	8000bbe <servo_set_angle+0xa6>
 8000bb2:	4b0a      	ldr	r3, [pc, #40]	@ (8000bdc <servo_set_angle+0xc4>)
 8000bb4:	681b      	ldr	r3, [r3, #0]
 8000bb6:	681a      	ldr	r2, [r3, #0]
 8000bb8:	68fb      	ldr	r3, [r7, #12]
 8000bba:	6593      	str	r3, [r2, #88]	@ 0x58
}
 8000bbc:	e004      	b.n	8000bc8 <servo_set_angle+0xb0>
    __HAL_TIM_SET_COMPARE(pwm_tim, pwm_channel, pwm_duty_us);
 8000bbe:	4b07      	ldr	r3, [pc, #28]	@ (8000bdc <servo_set_angle+0xc4>)
 8000bc0:	681b      	ldr	r3, [r3, #0]
 8000bc2:	681a      	ldr	r2, [r3, #0]
 8000bc4:	68fb      	ldr	r3, [r7, #12]
 8000bc6:	65d3      	str	r3, [r2, #92]	@ 0x5c
}
 8000bc8:	bf00      	nop
 8000bca:	3714      	adds	r7, #20
 8000bcc:	46bd      	mov	sp, r7
 8000bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd2:	4770      	bx	lr
 8000bd4:	b60b60b7 	.word	0xb60b60b7
 8000bd8:	20000090 	.word	0x20000090
 8000bdc:	2000008c 	.word	0x2000008c

08000be0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000be0:	b480      	push	{r7}
 8000be2:	b083      	sub	sp, #12
 8000be4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000be6:	4b0f      	ldr	r3, [pc, #60]	@ (8000c24 <HAL_MspInit+0x44>)
 8000be8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000bea:	4a0e      	ldr	r2, [pc, #56]	@ (8000c24 <HAL_MspInit+0x44>)
 8000bec:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000bf0:	6413      	str	r3, [r2, #64]	@ 0x40
 8000bf2:	4b0c      	ldr	r3, [pc, #48]	@ (8000c24 <HAL_MspInit+0x44>)
 8000bf4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000bf6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000bfa:	607b      	str	r3, [r7, #4]
 8000bfc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000bfe:	4b09      	ldr	r3, [pc, #36]	@ (8000c24 <HAL_MspInit+0x44>)
 8000c00:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c02:	4a08      	ldr	r2, [pc, #32]	@ (8000c24 <HAL_MspInit+0x44>)
 8000c04:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000c08:	6453      	str	r3, [r2, #68]	@ 0x44
 8000c0a:	4b06      	ldr	r3, [pc, #24]	@ (8000c24 <HAL_MspInit+0x44>)
 8000c0c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c0e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000c12:	603b      	str	r3, [r7, #0]
 8000c14:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c16:	bf00      	nop
 8000c18:	370c      	adds	r7, #12
 8000c1a:	46bd      	mov	sp, r7
 8000c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c20:	4770      	bx	lr
 8000c22:	bf00      	nop
 8000c24:	40023800 	.word	0x40023800

08000c28 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c28:	b480      	push	{r7}
 8000c2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000c2c:	bf00      	nop
 8000c2e:	e7fd      	b.n	8000c2c <NMI_Handler+0x4>

08000c30 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c30:	b480      	push	{r7}
 8000c32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c34:	bf00      	nop
 8000c36:	e7fd      	b.n	8000c34 <HardFault_Handler+0x4>

08000c38 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c38:	b480      	push	{r7}
 8000c3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c3c:	bf00      	nop
 8000c3e:	e7fd      	b.n	8000c3c <MemManage_Handler+0x4>

08000c40 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c40:	b480      	push	{r7}
 8000c42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c44:	bf00      	nop
 8000c46:	e7fd      	b.n	8000c44 <BusFault_Handler+0x4>

08000c48 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c48:	b480      	push	{r7}
 8000c4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c4c:	bf00      	nop
 8000c4e:	e7fd      	b.n	8000c4c <UsageFault_Handler+0x4>

08000c50 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c50:	b480      	push	{r7}
 8000c52:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c54:	bf00      	nop
 8000c56:	46bd      	mov	sp, r7
 8000c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c5c:	4770      	bx	lr

08000c5e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c5e:	b480      	push	{r7}
 8000c60:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c62:	bf00      	nop
 8000c64:	46bd      	mov	sp, r7
 8000c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c6a:	4770      	bx	lr

08000c6c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c6c:	b480      	push	{r7}
 8000c6e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c70:	bf00      	nop
 8000c72:	46bd      	mov	sp, r7
 8000c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c78:	4770      	bx	lr

08000c7a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c7a:	b580      	push	{r7, lr}
 8000c7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c7e:	f000 fb81 	bl	8001384 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c82:	bf00      	nop
 8000c84:	bd80      	pop	{r7, pc}
	...

08000c88 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000c8c:	4802      	ldr	r0, [pc, #8]	@ (8000c98 <TIM1_CC_IRQHandler+0x10>)
 8000c8e:	f002 fb4b 	bl	8003328 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8000c92:	bf00      	nop
 8000c94:	bd80      	pop	{r7, pc}
 8000c96:	bf00      	nop
 8000c98:	20000098 	.word	0x20000098

08000c9c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	b086      	sub	sp, #24
 8000ca0:	af00      	add	r7, sp, #0
 8000ca2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000ca4:	4a14      	ldr	r2, [pc, #80]	@ (8000cf8 <_sbrk+0x5c>)
 8000ca6:	4b15      	ldr	r3, [pc, #84]	@ (8000cfc <_sbrk+0x60>)
 8000ca8:	1ad3      	subs	r3, r2, r3
 8000caa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000cac:	697b      	ldr	r3, [r7, #20]
 8000cae:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000cb0:	4b13      	ldr	r3, [pc, #76]	@ (8000d00 <_sbrk+0x64>)
 8000cb2:	681b      	ldr	r3, [r3, #0]
 8000cb4:	2b00      	cmp	r3, #0
 8000cb6:	d102      	bne.n	8000cbe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000cb8:	4b11      	ldr	r3, [pc, #68]	@ (8000d00 <_sbrk+0x64>)
 8000cba:	4a12      	ldr	r2, [pc, #72]	@ (8000d04 <_sbrk+0x68>)
 8000cbc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000cbe:	4b10      	ldr	r3, [pc, #64]	@ (8000d00 <_sbrk+0x64>)
 8000cc0:	681a      	ldr	r2, [r3, #0]
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	4413      	add	r3, r2
 8000cc6:	693a      	ldr	r2, [r7, #16]
 8000cc8:	429a      	cmp	r2, r3
 8000cca:	d207      	bcs.n	8000cdc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000ccc:	f004 fb10 	bl	80052f0 <__errno>
 8000cd0:	4603      	mov	r3, r0
 8000cd2:	220c      	movs	r2, #12
 8000cd4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000cd6:	f04f 33ff 	mov.w	r3, #4294967295
 8000cda:	e009      	b.n	8000cf0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000cdc:	4b08      	ldr	r3, [pc, #32]	@ (8000d00 <_sbrk+0x64>)
 8000cde:	681b      	ldr	r3, [r3, #0]
 8000ce0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000ce2:	4b07      	ldr	r3, [pc, #28]	@ (8000d00 <_sbrk+0x64>)
 8000ce4:	681a      	ldr	r2, [r3, #0]
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	4413      	add	r3, r2
 8000cea:	4a05      	ldr	r2, [pc, #20]	@ (8000d00 <_sbrk+0x64>)
 8000cec:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000cee:	68fb      	ldr	r3, [r7, #12]
}
 8000cf0:	4618      	mov	r0, r3
 8000cf2:	3718      	adds	r7, #24
 8000cf4:	46bd      	mov	sp, r7
 8000cf6:	bd80      	pop	{r7, pc}
 8000cf8:	20080000 	.word	0x20080000
 8000cfc:	00000400 	.word	0x00000400
 8000d00:	20000094 	.word	0x20000094
 8000d04:	20000350 	.word	0x20000350

08000d08 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d08:	b480      	push	{r7}
 8000d0a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000d0c:	4b06      	ldr	r3, [pc, #24]	@ (8000d28 <SystemInit+0x20>)
 8000d0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000d12:	4a05      	ldr	r2, [pc, #20]	@ (8000d28 <SystemInit+0x20>)
 8000d14:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000d18:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d1c:	bf00      	nop
 8000d1e:	46bd      	mov	sp, r7
 8000d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d24:	4770      	bx	lr
 8000d26:	bf00      	nop
 8000d28:	e000ed00 	.word	0xe000ed00

08000d2c <MX_TIM1_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim3;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	b090      	sub	sp, #64	@ 0x40
 8000d30:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000d32:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000d36:	2200      	movs	r2, #0
 8000d38:	601a      	str	r2, [r3, #0]
 8000d3a:	605a      	str	r2, [r3, #4]
 8000d3c:	609a      	str	r2, [r3, #8]
 8000d3e:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8000d40:	f107 031c 	add.w	r3, r7, #28
 8000d44:	2200      	movs	r2, #0
 8000d46:	601a      	str	r2, [r3, #0]
 8000d48:	605a      	str	r2, [r3, #4]
 8000d4a:	609a      	str	r2, [r3, #8]
 8000d4c:	60da      	str	r2, [r3, #12]
 8000d4e:	611a      	str	r2, [r3, #16]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8000d50:	f107 030c 	add.w	r3, r7, #12
 8000d54:	2200      	movs	r2, #0
 8000d56:	601a      	str	r2, [r3, #0]
 8000d58:	605a      	str	r2, [r3, #4]
 8000d5a:	609a      	str	r2, [r3, #8]
 8000d5c:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d5e:	463b      	mov	r3, r7
 8000d60:	2200      	movs	r2, #0
 8000d62:	601a      	str	r2, [r3, #0]
 8000d64:	605a      	str	r2, [r3, #4]
 8000d66:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000d68:	4b40      	ldr	r3, [pc, #256]	@ (8000e6c <MX_TIM1_Init+0x140>)
 8000d6a:	4a41      	ldr	r2, [pc, #260]	@ (8000e70 <MX_TIM1_Init+0x144>)
 8000d6c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 95;
 8000d6e:	4b3f      	ldr	r3, [pc, #252]	@ (8000e6c <MX_TIM1_Init+0x140>)
 8000d70:	225f      	movs	r2, #95	@ 0x5f
 8000d72:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d74:	4b3d      	ldr	r3, [pc, #244]	@ (8000e6c <MX_TIM1_Init+0x140>)
 8000d76:	2200      	movs	r2, #0
 8000d78:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000d7a:	4b3c      	ldr	r3, [pc, #240]	@ (8000e6c <MX_TIM1_Init+0x140>)
 8000d7c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000d80:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d82:	4b3a      	ldr	r3, [pc, #232]	@ (8000e6c <MX_TIM1_Init+0x140>)
 8000d84:	2200      	movs	r2, #0
 8000d86:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000d88:	4b38      	ldr	r3, [pc, #224]	@ (8000e6c <MX_TIM1_Init+0x140>)
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d8e:	4b37      	ldr	r3, [pc, #220]	@ (8000e6c <MX_TIM1_Init+0x140>)
 8000d90:	2200      	movs	r2, #0
 8000d92:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000d94:	4835      	ldr	r0, [pc, #212]	@ (8000e6c <MX_TIM1_Init+0x140>)
 8000d96:	f001 ff6d 	bl	8002c74 <HAL_TIM_Base_Init>
 8000d9a:	4603      	mov	r3, r0
 8000d9c:	2b00      	cmp	r3, #0
 8000d9e:	d001      	beq.n	8000da4 <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 8000da0:	f7ff fe5c 	bl	8000a5c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000da4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000da8:	633b      	str	r3, [r7, #48]	@ 0x30
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000daa:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000dae:	4619      	mov	r1, r3
 8000db0:	482e      	ldr	r0, [pc, #184]	@ (8000e6c <MX_TIM1_Init+0x140>)
 8000db2:	f002 fd71 	bl	8003898 <HAL_TIM_ConfigClockSource>
 8000db6:	4603      	mov	r3, r0
 8000db8:	2b00      	cmp	r3, #0
 8000dba:	d001      	beq.n	8000dc0 <MX_TIM1_Init+0x94>
  {
    Error_Handler();
 8000dbc:	f7ff fe4e 	bl	8000a5c <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim1) != HAL_OK)
 8000dc0:	482a      	ldr	r0, [pc, #168]	@ (8000e6c <MX_TIM1_Init+0x140>)
 8000dc2:	f002 f8ff 	bl	8002fc4 <HAL_TIM_IC_Init>
 8000dc6:	4603      	mov	r3, r0
 8000dc8:	2b00      	cmp	r3, #0
 8000dca:	d001      	beq.n	8000dd0 <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 8000dcc:	f7ff fe46 	bl	8000a5c <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 8000dd0:	2304      	movs	r3, #4
 8000dd2:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 8000dd4:	2350      	movs	r3, #80	@ 0x50
 8000dd6:	623b      	str	r3, [r7, #32]
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000dd8:	2300      	movs	r3, #0
 8000dda:	627b      	str	r3, [r7, #36]	@ 0x24
  sSlaveConfig.TriggerPrescaler = TIM_ICPSC_DIV1;
 8000ddc:	2300      	movs	r3, #0
 8000dde:	62bb      	str	r3, [r7, #40]	@ 0x28
  sSlaveConfig.TriggerFilter = 0;
 8000de0:	2300      	movs	r3, #0
 8000de2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_SlaveConfigSynchro(&htim1, &sSlaveConfig) != HAL_OK)
 8000de4:	f107 031c 	add.w	r3, r7, #28
 8000de8:	4619      	mov	r1, r3
 8000dea:	4820      	ldr	r0, [pc, #128]	@ (8000e6c <MX_TIM1_Init+0x140>)
 8000dec:	f002 fe1e 	bl	8003a2c <HAL_TIM_SlaveConfigSynchro>
 8000df0:	4603      	mov	r3, r0
 8000df2:	2b00      	cmp	r3, #0
 8000df4:	d001      	beq.n	8000dfa <MX_TIM1_Init+0xce>
  {
    Error_Handler();
 8000df6:	f7ff fe31 	bl	8000a5c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000dfa:	2300      	movs	r3, #0
 8000dfc:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000dfe:	2301      	movs	r3, #1
 8000e00:	613b      	str	r3, [r7, #16]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8000e02:	2300      	movs	r3, #0
 8000e04:	617b      	str	r3, [r7, #20]
  sConfigIC.ICFilter = 0;
 8000e06:	2300      	movs	r3, #0
 8000e08:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8000e0a:	f107 030c 	add.w	r3, r7, #12
 8000e0e:	2200      	movs	r2, #0
 8000e10:	4619      	mov	r1, r3
 8000e12:	4816      	ldr	r0, [pc, #88]	@ (8000e6c <MX_TIM1_Init+0x140>)
 8000e14:	f002 fb8f 	bl	8003536 <HAL_TIM_IC_ConfigChannel>
 8000e18:	4603      	mov	r3, r0
 8000e1a:	2b00      	cmp	r3, #0
 8000e1c:	d001      	beq.n	8000e22 <MX_TIM1_Init+0xf6>
  {
    Error_Handler();
 8000e1e:	f7ff fe1d 	bl	8000a5c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8000e22:	2302      	movs	r3, #2
 8000e24:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 8000e26:	2302      	movs	r3, #2
 8000e28:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8000e2a:	f107 030c 	add.w	r3, r7, #12
 8000e2e:	2204      	movs	r2, #4
 8000e30:	4619      	mov	r1, r3
 8000e32:	480e      	ldr	r0, [pc, #56]	@ (8000e6c <MX_TIM1_Init+0x140>)
 8000e34:	f002 fb7f 	bl	8003536 <HAL_TIM_IC_ConfigChannel>
 8000e38:	4603      	mov	r3, r0
 8000e3a:	2b00      	cmp	r3, #0
 8000e3c:	d001      	beq.n	8000e42 <MX_TIM1_Init+0x116>
  {
    Error_Handler();
 8000e3e:	f7ff fe0d 	bl	8000a5c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e42:	2300      	movs	r3, #0
 8000e44:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000e46:	2300      	movs	r3, #0
 8000e48:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000e4e:	463b      	mov	r3, r7
 8000e50:	4619      	mov	r1, r3
 8000e52:	4806      	ldr	r0, [pc, #24]	@ (8000e6c <MX_TIM1_Init+0x140>)
 8000e54:	f003 fc20 	bl	8004698 <HAL_TIMEx_MasterConfigSynchronization>
 8000e58:	4603      	mov	r3, r0
 8000e5a:	2b00      	cmp	r3, #0
 8000e5c:	d001      	beq.n	8000e62 <MX_TIM1_Init+0x136>
  {
    Error_Handler();
 8000e5e:	f7ff fdfd 	bl	8000a5c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000e62:	bf00      	nop
 8000e64:	3740      	adds	r7, #64	@ 0x40
 8000e66:	46bd      	mov	sp, r7
 8000e68:	bd80      	pop	{r7, pc}
 8000e6a:	bf00      	nop
 8000e6c:	20000098 	.word	0x20000098
 8000e70:	40010000 	.word	0x40010000

08000e74 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8000e74:	b580      	push	{r7, lr}
 8000e76:	b08a      	sub	sp, #40	@ 0x28
 8000e78:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e7a:	f107 031c 	add.w	r3, r7, #28
 8000e7e:	2200      	movs	r2, #0
 8000e80:	601a      	str	r2, [r3, #0]
 8000e82:	605a      	str	r2, [r3, #4]
 8000e84:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000e86:	463b      	mov	r3, r7
 8000e88:	2200      	movs	r2, #0
 8000e8a:	601a      	str	r2, [r3, #0]
 8000e8c:	605a      	str	r2, [r3, #4]
 8000e8e:	609a      	str	r2, [r3, #8]
 8000e90:	60da      	str	r2, [r3, #12]
 8000e92:	611a      	str	r2, [r3, #16]
 8000e94:	615a      	str	r2, [r3, #20]
 8000e96:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000e98:	4b22      	ldr	r3, [pc, #136]	@ (8000f24 <MX_TIM2_Init+0xb0>)
 8000e9a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000e9e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 95;
 8000ea0:	4b20      	ldr	r3, [pc, #128]	@ (8000f24 <MX_TIM2_Init+0xb0>)
 8000ea2:	225f      	movs	r2, #95	@ 0x5f
 8000ea4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ea6:	4b1f      	ldr	r3, [pc, #124]	@ (8000f24 <MX_TIM2_Init+0xb0>)
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 62499;
 8000eac:	4b1d      	ldr	r3, [pc, #116]	@ (8000f24 <MX_TIM2_Init+0xb0>)
 8000eae:	f24f 4223 	movw	r2, #62499	@ 0xf423
 8000eb2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000eb4:	4b1b      	ldr	r3, [pc, #108]	@ (8000f24 <MX_TIM2_Init+0xb0>)
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000eba:	4b1a      	ldr	r3, [pc, #104]	@ (8000f24 <MX_TIM2_Init+0xb0>)
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000ec0:	4818      	ldr	r0, [pc, #96]	@ (8000f24 <MX_TIM2_Init+0xb0>)
 8000ec2:	f001 ff2e 	bl	8002d22 <HAL_TIM_PWM_Init>
 8000ec6:	4603      	mov	r3, r0
 8000ec8:	2b00      	cmp	r3, #0
 8000eca:	d001      	beq.n	8000ed0 <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 8000ecc:	f7ff fdc6 	bl	8000a5c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ed0:	2300      	movs	r3, #0
 8000ed2:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ed4:	2300      	movs	r3, #0
 8000ed6:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000ed8:	f107 031c 	add.w	r3, r7, #28
 8000edc:	4619      	mov	r1, r3
 8000ede:	4811      	ldr	r0, [pc, #68]	@ (8000f24 <MX_TIM2_Init+0xb0>)
 8000ee0:	f003 fbda 	bl	8004698 <HAL_TIMEx_MasterConfigSynchronization>
 8000ee4:	4603      	mov	r3, r0
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	d001      	beq.n	8000eee <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 8000eea:	f7ff fdb7 	bl	8000a5c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000eee:	2360      	movs	r3, #96	@ 0x60
 8000ef0:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 10;
 8000ef2:	230a      	movs	r3, #10
 8000ef4:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000efa:	2300      	movs	r3, #0
 8000efc:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000efe:	463b      	mov	r3, r7
 8000f00:	2208      	movs	r2, #8
 8000f02:	4619      	mov	r1, r3
 8000f04:	4807      	ldr	r0, [pc, #28]	@ (8000f24 <MX_TIM2_Init+0xb0>)
 8000f06:	f002 fbb3 	bl	8003670 <HAL_TIM_PWM_ConfigChannel>
 8000f0a:	4603      	mov	r3, r0
 8000f0c:	2b00      	cmp	r3, #0
 8000f0e:	d001      	beq.n	8000f14 <MX_TIM2_Init+0xa0>
  {
    Error_Handler();
 8000f10:	f7ff fda4 	bl	8000a5c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000f14:	4803      	ldr	r0, [pc, #12]	@ (8000f24 <MX_TIM2_Init+0xb0>)
 8000f16:	f000 f8e1 	bl	80010dc <HAL_TIM_MspPostInit>

}
 8000f1a:	bf00      	nop
 8000f1c:	3728      	adds	r7, #40	@ 0x28
 8000f1e:	46bd      	mov	sp, r7
 8000f20:	bd80      	pop	{r7, pc}
 8000f22:	bf00      	nop
 8000f24:	200000e4 	.word	0x200000e4

08000f28 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	b08a      	sub	sp, #40	@ 0x28
 8000f2c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f2e:	f107 031c 	add.w	r3, r7, #28
 8000f32:	2200      	movs	r2, #0
 8000f34:	601a      	str	r2, [r3, #0]
 8000f36:	605a      	str	r2, [r3, #4]
 8000f38:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000f3a:	463b      	mov	r3, r7
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	601a      	str	r2, [r3, #0]
 8000f40:	605a      	str	r2, [r3, #4]
 8000f42:	609a      	str	r2, [r3, #8]
 8000f44:	60da      	str	r2, [r3, #12]
 8000f46:	611a      	str	r2, [r3, #16]
 8000f48:	615a      	str	r2, [r3, #20]
 8000f4a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000f4c:	4b22      	ldr	r3, [pc, #136]	@ (8000fd8 <MX_TIM3_Init+0xb0>)
 8000f4e:	4a23      	ldr	r2, [pc, #140]	@ (8000fdc <MX_TIM3_Init+0xb4>)
 8000f50:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 95;
 8000f52:	4b21      	ldr	r3, [pc, #132]	@ (8000fd8 <MX_TIM3_Init+0xb0>)
 8000f54:	225f      	movs	r2, #95	@ 0x5f
 8000f56:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f58:	4b1f      	ldr	r3, [pc, #124]	@ (8000fd8 <MX_TIM3_Init+0xb0>)
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 19999;
 8000f5e:	4b1e      	ldr	r3, [pc, #120]	@ (8000fd8 <MX_TIM3_Init+0xb0>)
 8000f60:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 8000f64:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f66:	4b1c      	ldr	r3, [pc, #112]	@ (8000fd8 <MX_TIM3_Init+0xb0>)
 8000f68:	2200      	movs	r2, #0
 8000f6a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f6c:	4b1a      	ldr	r3, [pc, #104]	@ (8000fd8 <MX_TIM3_Init+0xb0>)
 8000f6e:	2200      	movs	r2, #0
 8000f70:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000f72:	4819      	ldr	r0, [pc, #100]	@ (8000fd8 <MX_TIM3_Init+0xb0>)
 8000f74:	f001 fed5 	bl	8002d22 <HAL_TIM_PWM_Init>
 8000f78:	4603      	mov	r3, r0
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	d001      	beq.n	8000f82 <MX_TIM3_Init+0x5a>
  {
    Error_Handler();
 8000f7e:	f7ff fd6d 	bl	8000a5c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f82:	2300      	movs	r3, #0
 8000f84:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f86:	2300      	movs	r3, #0
 8000f88:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000f8a:	f107 031c 	add.w	r3, r7, #28
 8000f8e:	4619      	mov	r1, r3
 8000f90:	4811      	ldr	r0, [pc, #68]	@ (8000fd8 <MX_TIM3_Init+0xb0>)
 8000f92:	f003 fb81 	bl	8004698 <HAL_TIMEx_MasterConfigSynchronization>
 8000f96:	4603      	mov	r3, r0
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	d001      	beq.n	8000fa0 <MX_TIM3_Init+0x78>
  {
    Error_Handler();
 8000f9c:	f7ff fd5e 	bl	8000a5c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000fa0:	2360      	movs	r3, #96	@ 0x60
 8000fa2:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 1500;
 8000fa4:	f240 53dc 	movw	r3, #1500	@ 0x5dc
 8000fa8:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000faa:	2300      	movs	r3, #0
 8000fac:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000fae:	2300      	movs	r3, #0
 8000fb0:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000fb2:	463b      	mov	r3, r7
 8000fb4:	2208      	movs	r2, #8
 8000fb6:	4619      	mov	r1, r3
 8000fb8:	4807      	ldr	r0, [pc, #28]	@ (8000fd8 <MX_TIM3_Init+0xb0>)
 8000fba:	f002 fb59 	bl	8003670 <HAL_TIM_PWM_ConfigChannel>
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	2b00      	cmp	r3, #0
 8000fc2:	d001      	beq.n	8000fc8 <MX_TIM3_Init+0xa0>
  {
    Error_Handler();
 8000fc4:	f7ff fd4a 	bl	8000a5c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000fc8:	4803      	ldr	r0, [pc, #12]	@ (8000fd8 <MX_TIM3_Init+0xb0>)
 8000fca:	f000 f887 	bl	80010dc <HAL_TIM_MspPostInit>

}
 8000fce:	bf00      	nop
 8000fd0:	3728      	adds	r7, #40	@ 0x28
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	bd80      	pop	{r7, pc}
 8000fd6:	bf00      	nop
 8000fd8:	20000130 	.word	0x20000130
 8000fdc:	40000400 	.word	0x40000400

08000fe0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	b08a      	sub	sp, #40	@ 0x28
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fe8:	f107 0314 	add.w	r3, r7, #20
 8000fec:	2200      	movs	r2, #0
 8000fee:	601a      	str	r2, [r3, #0]
 8000ff0:	605a      	str	r2, [r3, #4]
 8000ff2:	609a      	str	r2, [r3, #8]
 8000ff4:	60da      	str	r2, [r3, #12]
 8000ff6:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM1)
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	4a1b      	ldr	r2, [pc, #108]	@ (800106c <HAL_TIM_Base_MspInit+0x8c>)
 8000ffe:	4293      	cmp	r3, r2
 8001000:	d130      	bne.n	8001064 <HAL_TIM_Base_MspInit+0x84>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001002:	4b1b      	ldr	r3, [pc, #108]	@ (8001070 <HAL_TIM_Base_MspInit+0x90>)
 8001004:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001006:	4a1a      	ldr	r2, [pc, #104]	@ (8001070 <HAL_TIM_Base_MspInit+0x90>)
 8001008:	f043 0301 	orr.w	r3, r3, #1
 800100c:	6453      	str	r3, [r2, #68]	@ 0x44
 800100e:	4b18      	ldr	r3, [pc, #96]	@ (8001070 <HAL_TIM_Base_MspInit+0x90>)
 8001010:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001012:	f003 0301 	and.w	r3, r3, #1
 8001016:	613b      	str	r3, [r7, #16]
 8001018:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 800101a:	4b15      	ldr	r3, [pc, #84]	@ (8001070 <HAL_TIM_Base_MspInit+0x90>)
 800101c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800101e:	4a14      	ldr	r2, [pc, #80]	@ (8001070 <HAL_TIM_Base_MspInit+0x90>)
 8001020:	f043 0310 	orr.w	r3, r3, #16
 8001024:	6313      	str	r3, [r2, #48]	@ 0x30
 8001026:	4b12      	ldr	r3, [pc, #72]	@ (8001070 <HAL_TIM_Base_MspInit+0x90>)
 8001028:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800102a:	f003 0310 	and.w	r3, r3, #16
 800102e:	60fb      	str	r3, [r7, #12]
 8001030:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = echo_Pin;
 8001032:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001036:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001038:	2302      	movs	r3, #2
 800103a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800103c:	2300      	movs	r3, #0
 800103e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001040:	2300      	movs	r3, #0
 8001042:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001044:	2301      	movs	r3, #1
 8001046:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(echo_GPIO_Port, &GPIO_InitStruct);
 8001048:	f107 0314 	add.w	r3, r7, #20
 800104c:	4619      	mov	r1, r3
 800104e:	4809      	ldr	r0, [pc, #36]	@ (8001074 <HAL_TIM_Base_MspInit+0x94>)
 8001050:	f000 faee 	bl	8001630 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 8001054:	2200      	movs	r2, #0
 8001056:	2100      	movs	r1, #0
 8001058:	201b      	movs	r0, #27
 800105a:	f000 fab2 	bl	80015c2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 800105e:	201b      	movs	r0, #27
 8001060:	f000 facb 	bl	80015fa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8001064:	bf00      	nop
 8001066:	3728      	adds	r7, #40	@ 0x28
 8001068:	46bd      	mov	sp, r7
 800106a:	bd80      	pop	{r7, pc}
 800106c:	40010000 	.word	0x40010000
 8001070:	40023800 	.word	0x40023800
 8001074:	40021000 	.word	0x40021000

08001078 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8001078:	b480      	push	{r7}
 800107a:	b085      	sub	sp, #20
 800107c:	af00      	add	r7, sp, #0
 800107e:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM2)
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001088:	d10c      	bne.n	80010a4 <HAL_TIM_PWM_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800108a:	4b12      	ldr	r3, [pc, #72]	@ (80010d4 <HAL_TIM_PWM_MspInit+0x5c>)
 800108c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800108e:	4a11      	ldr	r2, [pc, #68]	@ (80010d4 <HAL_TIM_PWM_MspInit+0x5c>)
 8001090:	f043 0301 	orr.w	r3, r3, #1
 8001094:	6413      	str	r3, [r2, #64]	@ 0x40
 8001096:	4b0f      	ldr	r3, [pc, #60]	@ (80010d4 <HAL_TIM_PWM_MspInit+0x5c>)
 8001098:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800109a:	f003 0301 	and.w	r3, r3, #1
 800109e:	60fb      	str	r3, [r7, #12]
 80010a0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_TIM3_CLK_ENABLE();
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 80010a2:	e010      	b.n	80010c6 <HAL_TIM_PWM_MspInit+0x4e>
  else if(tim_pwmHandle->Instance==TIM3)
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	4a0b      	ldr	r2, [pc, #44]	@ (80010d8 <HAL_TIM_PWM_MspInit+0x60>)
 80010aa:	4293      	cmp	r3, r2
 80010ac:	d10b      	bne.n	80010c6 <HAL_TIM_PWM_MspInit+0x4e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80010ae:	4b09      	ldr	r3, [pc, #36]	@ (80010d4 <HAL_TIM_PWM_MspInit+0x5c>)
 80010b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010b2:	4a08      	ldr	r2, [pc, #32]	@ (80010d4 <HAL_TIM_PWM_MspInit+0x5c>)
 80010b4:	f043 0302 	orr.w	r3, r3, #2
 80010b8:	6413      	str	r3, [r2, #64]	@ 0x40
 80010ba:	4b06      	ldr	r3, [pc, #24]	@ (80010d4 <HAL_TIM_PWM_MspInit+0x5c>)
 80010bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010be:	f003 0302 	and.w	r3, r3, #2
 80010c2:	60bb      	str	r3, [r7, #8]
 80010c4:	68bb      	ldr	r3, [r7, #8]
}
 80010c6:	bf00      	nop
 80010c8:	3714      	adds	r7, #20
 80010ca:	46bd      	mov	sp, r7
 80010cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d0:	4770      	bx	lr
 80010d2:	bf00      	nop
 80010d4:	40023800 	.word	0x40023800
 80010d8:	40000400 	.word	0x40000400

080010dc <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	b08a      	sub	sp, #40	@ 0x28
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010e4:	f107 0314 	add.w	r3, r7, #20
 80010e8:	2200      	movs	r2, #0
 80010ea:	601a      	str	r2, [r3, #0]
 80010ec:	605a      	str	r2, [r3, #4]
 80010ee:	609a      	str	r2, [r3, #8]
 80010f0:	60da      	str	r2, [r3, #12]
 80010f2:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80010fc:	d11d      	bne.n	800113a <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80010fe:	4b22      	ldr	r3, [pc, #136]	@ (8001188 <HAL_TIM_MspPostInit+0xac>)
 8001100:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001102:	4a21      	ldr	r2, [pc, #132]	@ (8001188 <HAL_TIM_MspPostInit+0xac>)
 8001104:	f043 0302 	orr.w	r3, r3, #2
 8001108:	6313      	str	r3, [r2, #48]	@ 0x30
 800110a:	4b1f      	ldr	r3, [pc, #124]	@ (8001188 <HAL_TIM_MspPostInit+0xac>)
 800110c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800110e:	f003 0302 	and.w	r3, r3, #2
 8001112:	613b      	str	r3, [r7, #16]
 8001114:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PB10     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = trig_Pin;
 8001116:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800111a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800111c:	2302      	movs	r3, #2
 800111e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001120:	2300      	movs	r3, #0
 8001122:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001124:	2300      	movs	r3, #0
 8001126:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001128:	2301      	movs	r3, #1
 800112a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(trig_GPIO_Port, &GPIO_InitStruct);
 800112c:	f107 0314 	add.w	r3, r7, #20
 8001130:	4619      	mov	r1, r3
 8001132:	4816      	ldr	r0, [pc, #88]	@ (800118c <HAL_TIM_MspPostInit+0xb0>)
 8001134:	f000 fa7c 	bl	8001630 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001138:	e021      	b.n	800117e <HAL_TIM_MspPostInit+0xa2>
  else if(timHandle->Instance==TIM3)
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	4a14      	ldr	r2, [pc, #80]	@ (8001190 <HAL_TIM_MspPostInit+0xb4>)
 8001140:	4293      	cmp	r3, r2
 8001142:	d11c      	bne.n	800117e <HAL_TIM_MspPostInit+0xa2>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001144:	4b10      	ldr	r3, [pc, #64]	@ (8001188 <HAL_TIM_MspPostInit+0xac>)
 8001146:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001148:	4a0f      	ldr	r2, [pc, #60]	@ (8001188 <HAL_TIM_MspPostInit+0xac>)
 800114a:	f043 0304 	orr.w	r3, r3, #4
 800114e:	6313      	str	r3, [r2, #48]	@ 0x30
 8001150:	4b0d      	ldr	r3, [pc, #52]	@ (8001188 <HAL_TIM_MspPostInit+0xac>)
 8001152:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001154:	f003 0304 	and.w	r3, r3, #4
 8001158:	60fb      	str	r3, [r7, #12]
 800115a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = serwo_Pin;
 800115c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001160:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001162:	2302      	movs	r3, #2
 8001164:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001166:	2300      	movs	r3, #0
 8001168:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800116a:	2300      	movs	r3, #0
 800116c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800116e:	2302      	movs	r3, #2
 8001170:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(serwo_GPIO_Port, &GPIO_InitStruct);
 8001172:	f107 0314 	add.w	r3, r7, #20
 8001176:	4619      	mov	r1, r3
 8001178:	4806      	ldr	r0, [pc, #24]	@ (8001194 <HAL_TIM_MspPostInit+0xb8>)
 800117a:	f000 fa59 	bl	8001630 <HAL_GPIO_Init>
}
 800117e:	bf00      	nop
 8001180:	3728      	adds	r7, #40	@ 0x28
 8001182:	46bd      	mov	sp, r7
 8001184:	bd80      	pop	{r7, pc}
 8001186:	bf00      	nop
 8001188:	40023800 	.word	0x40023800
 800118c:	40020400 	.word	0x40020400
 8001190:	40000400 	.word	0x40000400
 8001194:	40020800 	.word	0x40020800

08001198 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8001198:	b580      	push	{r7, lr}
 800119a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800119c:	4b14      	ldr	r3, [pc, #80]	@ (80011f0 <MX_USART3_UART_Init+0x58>)
 800119e:	4a15      	ldr	r2, [pc, #84]	@ (80011f4 <MX_USART3_UART_Init+0x5c>)
 80011a0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 80011a2:	4b13      	ldr	r3, [pc, #76]	@ (80011f0 <MX_USART3_UART_Init+0x58>)
 80011a4:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 80011a8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80011aa:	4b11      	ldr	r3, [pc, #68]	@ (80011f0 <MX_USART3_UART_Init+0x58>)
 80011ac:	2200      	movs	r2, #0
 80011ae:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80011b0:	4b0f      	ldr	r3, [pc, #60]	@ (80011f0 <MX_USART3_UART_Init+0x58>)
 80011b2:	2200      	movs	r2, #0
 80011b4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80011b6:	4b0e      	ldr	r3, [pc, #56]	@ (80011f0 <MX_USART3_UART_Init+0x58>)
 80011b8:	2200      	movs	r2, #0
 80011ba:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80011bc:	4b0c      	ldr	r3, [pc, #48]	@ (80011f0 <MX_USART3_UART_Init+0x58>)
 80011be:	220c      	movs	r2, #12
 80011c0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80011c2:	4b0b      	ldr	r3, [pc, #44]	@ (80011f0 <MX_USART3_UART_Init+0x58>)
 80011c4:	2200      	movs	r2, #0
 80011c6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80011c8:	4b09      	ldr	r3, [pc, #36]	@ (80011f0 <MX_USART3_UART_Init+0x58>)
 80011ca:	2200      	movs	r2, #0
 80011cc:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80011ce:	4b08      	ldr	r3, [pc, #32]	@ (80011f0 <MX_USART3_UART_Init+0x58>)
 80011d0:	2200      	movs	r2, #0
 80011d2:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80011d4:	4b06      	ldr	r3, [pc, #24]	@ (80011f0 <MX_USART3_UART_Init+0x58>)
 80011d6:	2200      	movs	r2, #0
 80011d8:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80011da:	4805      	ldr	r0, [pc, #20]	@ (80011f0 <MX_USART3_UART_Init+0x58>)
 80011dc:	f003 fb08 	bl	80047f0 <HAL_UART_Init>
 80011e0:	4603      	mov	r3, r0
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d001      	beq.n	80011ea <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 80011e6:	f7ff fc39 	bl	8000a5c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80011ea:	bf00      	nop
 80011ec:	bd80      	pop	{r7, pc}
 80011ee:	bf00      	nop
 80011f0:	2000017c 	.word	0x2000017c
 80011f4:	40004800 	.word	0x40004800

080011f8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80011f8:	b580      	push	{r7, lr}
 80011fa:	b0ae      	sub	sp, #184	@ 0xb8
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001200:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001204:	2200      	movs	r2, #0
 8001206:	601a      	str	r2, [r3, #0]
 8001208:	605a      	str	r2, [r3, #4]
 800120a:	609a      	str	r2, [r3, #8]
 800120c:	60da      	str	r2, [r3, #12]
 800120e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001210:	f107 0314 	add.w	r3, r7, #20
 8001214:	2290      	movs	r2, #144	@ 0x90
 8001216:	2100      	movs	r1, #0
 8001218:	4618      	mov	r0, r3
 800121a:	f004 f861 	bl	80052e0 <memset>
  if(uartHandle->Instance==USART3)
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	4a22      	ldr	r2, [pc, #136]	@ (80012ac <HAL_UART_MspInit+0xb4>)
 8001224:	4293      	cmp	r3, r2
 8001226:	d13c      	bne.n	80012a2 <HAL_UART_MspInit+0xaa>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001228:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800122c:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 800122e:	2300      	movs	r3, #0
 8001230:	663b      	str	r3, [r7, #96]	@ 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001232:	f107 0314 	add.w	r3, r7, #20
 8001236:	4618      	mov	r0, r3
 8001238:	f001 f8f4 	bl	8002424 <HAL_RCCEx_PeriphCLKConfig>
 800123c:	4603      	mov	r3, r0
 800123e:	2b00      	cmp	r3, #0
 8001240:	d001      	beq.n	8001246 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8001242:	f7ff fc0b 	bl	8000a5c <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001246:	4b1a      	ldr	r3, [pc, #104]	@ (80012b0 <HAL_UART_MspInit+0xb8>)
 8001248:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800124a:	4a19      	ldr	r2, [pc, #100]	@ (80012b0 <HAL_UART_MspInit+0xb8>)
 800124c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001250:	6413      	str	r3, [r2, #64]	@ 0x40
 8001252:	4b17      	ldr	r3, [pc, #92]	@ (80012b0 <HAL_UART_MspInit+0xb8>)
 8001254:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001256:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800125a:	613b      	str	r3, [r7, #16]
 800125c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800125e:	4b14      	ldr	r3, [pc, #80]	@ (80012b0 <HAL_UART_MspInit+0xb8>)
 8001260:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001262:	4a13      	ldr	r2, [pc, #76]	@ (80012b0 <HAL_UART_MspInit+0xb8>)
 8001264:	f043 0308 	orr.w	r3, r3, #8
 8001268:	6313      	str	r3, [r2, #48]	@ 0x30
 800126a:	4b11      	ldr	r3, [pc, #68]	@ (80012b0 <HAL_UART_MspInit+0xb8>)
 800126c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800126e:	f003 0308 	and.w	r3, r3, #8
 8001272:	60fb      	str	r3, [r7, #12]
 8001274:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8001276:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800127a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800127e:	2302      	movs	r3, #2
 8001280:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001284:	2300      	movs	r3, #0
 8001286:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800128a:	2303      	movs	r3, #3
 800128c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001290:	2307      	movs	r3, #7
 8001292:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001296:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 800129a:	4619      	mov	r1, r3
 800129c:	4805      	ldr	r0, [pc, #20]	@ (80012b4 <HAL_UART_MspInit+0xbc>)
 800129e:	f000 f9c7 	bl	8001630 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 80012a2:	bf00      	nop
 80012a4:	37b8      	adds	r7, #184	@ 0xb8
 80012a6:	46bd      	mov	sp, r7
 80012a8:	bd80      	pop	{r7, pc}
 80012aa:	bf00      	nop
 80012ac:	40004800 	.word	0x40004800
 80012b0:	40023800 	.word	0x40023800
 80012b4:	40020c00 	.word	0x40020c00

080012b8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80012b8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80012f0 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80012bc:	f7ff fd24 	bl	8000d08 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80012c0:	480c      	ldr	r0, [pc, #48]	@ (80012f4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80012c2:	490d      	ldr	r1, [pc, #52]	@ (80012f8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80012c4:	4a0d      	ldr	r2, [pc, #52]	@ (80012fc <LoopFillZerobss+0x1a>)
  movs r3, #0
 80012c6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80012c8:	e002      	b.n	80012d0 <LoopCopyDataInit>

080012ca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80012ca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80012cc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80012ce:	3304      	adds	r3, #4

080012d0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80012d0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80012d2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80012d4:	d3f9      	bcc.n	80012ca <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80012d6:	4a0a      	ldr	r2, [pc, #40]	@ (8001300 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80012d8:	4c0a      	ldr	r4, [pc, #40]	@ (8001304 <LoopFillZerobss+0x22>)
  movs r3, #0
 80012da:	2300      	movs	r3, #0
  b LoopFillZerobss
 80012dc:	e001      	b.n	80012e2 <LoopFillZerobss>

080012de <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80012de:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80012e0:	3204      	adds	r2, #4

080012e2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80012e2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80012e4:	d3fb      	bcc.n	80012de <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 80012e6:	f004 f809 	bl	80052fc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80012ea:	f7ff fb11 	bl	8000910 <main>
  bx  lr    
 80012ee:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80012f0:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 80012f4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80012f8:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 80012fc:	08005c60 	.word	0x08005c60
  ldr r2, =_sbss
 8001300:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8001304:	20000350 	.word	0x20000350

08001308 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001308:	e7fe      	b.n	8001308 <ADC_IRQHandler>

0800130a <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800130a:	b580      	push	{r7, lr}
 800130c:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800130e:	2003      	movs	r0, #3
 8001310:	f000 f94c 	bl	80015ac <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001314:	2000      	movs	r0, #0
 8001316:	f000 f805 	bl	8001324 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800131a:	f7ff fc61 	bl	8000be0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800131e:	2300      	movs	r3, #0
}
 8001320:	4618      	mov	r0, r3
 8001322:	bd80      	pop	{r7, pc}

08001324 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001324:	b580      	push	{r7, lr}
 8001326:	b082      	sub	sp, #8
 8001328:	af00      	add	r7, sp, #0
 800132a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800132c:	4b12      	ldr	r3, [pc, #72]	@ (8001378 <HAL_InitTick+0x54>)
 800132e:	681a      	ldr	r2, [r3, #0]
 8001330:	4b12      	ldr	r3, [pc, #72]	@ (800137c <HAL_InitTick+0x58>)
 8001332:	781b      	ldrb	r3, [r3, #0]
 8001334:	4619      	mov	r1, r3
 8001336:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800133a:	fbb3 f3f1 	udiv	r3, r3, r1
 800133e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001342:	4618      	mov	r0, r3
 8001344:	f000 f967 	bl	8001616 <HAL_SYSTICK_Config>
 8001348:	4603      	mov	r3, r0
 800134a:	2b00      	cmp	r3, #0
 800134c:	d001      	beq.n	8001352 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800134e:	2301      	movs	r3, #1
 8001350:	e00e      	b.n	8001370 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	2b0f      	cmp	r3, #15
 8001356:	d80a      	bhi.n	800136e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001358:	2200      	movs	r2, #0
 800135a:	6879      	ldr	r1, [r7, #4]
 800135c:	f04f 30ff 	mov.w	r0, #4294967295
 8001360:	f000 f92f 	bl	80015c2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001364:	4a06      	ldr	r2, [pc, #24]	@ (8001380 <HAL_InitTick+0x5c>)
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800136a:	2300      	movs	r3, #0
 800136c:	e000      	b.n	8001370 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800136e:	2301      	movs	r3, #1
}
 8001370:	4618      	mov	r0, r3
 8001372:	3708      	adds	r7, #8
 8001374:	46bd      	mov	sp, r7
 8001376:	bd80      	pop	{r7, pc}
 8001378:	20000000 	.word	0x20000000
 800137c:	20000008 	.word	0x20000008
 8001380:	20000004 	.word	0x20000004

08001384 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001384:	b480      	push	{r7}
 8001386:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001388:	4b06      	ldr	r3, [pc, #24]	@ (80013a4 <HAL_IncTick+0x20>)
 800138a:	781b      	ldrb	r3, [r3, #0]
 800138c:	461a      	mov	r2, r3
 800138e:	4b06      	ldr	r3, [pc, #24]	@ (80013a8 <HAL_IncTick+0x24>)
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	4413      	add	r3, r2
 8001394:	4a04      	ldr	r2, [pc, #16]	@ (80013a8 <HAL_IncTick+0x24>)
 8001396:	6013      	str	r3, [r2, #0]
}
 8001398:	bf00      	nop
 800139a:	46bd      	mov	sp, r7
 800139c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a0:	4770      	bx	lr
 80013a2:	bf00      	nop
 80013a4:	20000008 	.word	0x20000008
 80013a8:	20000204 	.word	0x20000204

080013ac <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80013ac:	b480      	push	{r7}
 80013ae:	af00      	add	r7, sp, #0
  return uwTick;
 80013b0:	4b03      	ldr	r3, [pc, #12]	@ (80013c0 <HAL_GetTick+0x14>)
 80013b2:	681b      	ldr	r3, [r3, #0]
}
 80013b4:	4618      	mov	r0, r3
 80013b6:	46bd      	mov	sp, r7
 80013b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013bc:	4770      	bx	lr
 80013be:	bf00      	nop
 80013c0:	20000204 	.word	0x20000204

080013c4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80013c4:	b580      	push	{r7, lr}
 80013c6:	b084      	sub	sp, #16
 80013c8:	af00      	add	r7, sp, #0
 80013ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80013cc:	f7ff ffee 	bl	80013ac <HAL_GetTick>
 80013d0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80013d6:	68fb      	ldr	r3, [r7, #12]
 80013d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80013dc:	d005      	beq.n	80013ea <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80013de:	4b0a      	ldr	r3, [pc, #40]	@ (8001408 <HAL_Delay+0x44>)
 80013e0:	781b      	ldrb	r3, [r3, #0]
 80013e2:	461a      	mov	r2, r3
 80013e4:	68fb      	ldr	r3, [r7, #12]
 80013e6:	4413      	add	r3, r2
 80013e8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80013ea:	bf00      	nop
 80013ec:	f7ff ffde 	bl	80013ac <HAL_GetTick>
 80013f0:	4602      	mov	r2, r0
 80013f2:	68bb      	ldr	r3, [r7, #8]
 80013f4:	1ad3      	subs	r3, r2, r3
 80013f6:	68fa      	ldr	r2, [r7, #12]
 80013f8:	429a      	cmp	r2, r3
 80013fa:	d8f7      	bhi.n	80013ec <HAL_Delay+0x28>
  {
  }
}
 80013fc:	bf00      	nop
 80013fe:	bf00      	nop
 8001400:	3710      	adds	r7, #16
 8001402:	46bd      	mov	sp, r7
 8001404:	bd80      	pop	{r7, pc}
 8001406:	bf00      	nop
 8001408:	20000008 	.word	0x20000008

0800140c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800140c:	b480      	push	{r7}
 800140e:	b085      	sub	sp, #20
 8001410:	af00      	add	r7, sp, #0
 8001412:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	f003 0307 	and.w	r3, r3, #7
 800141a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800141c:	4b0b      	ldr	r3, [pc, #44]	@ (800144c <__NVIC_SetPriorityGrouping+0x40>)
 800141e:	68db      	ldr	r3, [r3, #12]
 8001420:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001422:	68ba      	ldr	r2, [r7, #8]
 8001424:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001428:	4013      	ands	r3, r2
 800142a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800142c:	68fb      	ldr	r3, [r7, #12]
 800142e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001430:	68bb      	ldr	r3, [r7, #8]
 8001432:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001434:	4b06      	ldr	r3, [pc, #24]	@ (8001450 <__NVIC_SetPriorityGrouping+0x44>)
 8001436:	4313      	orrs	r3, r2
 8001438:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800143a:	4a04      	ldr	r2, [pc, #16]	@ (800144c <__NVIC_SetPriorityGrouping+0x40>)
 800143c:	68bb      	ldr	r3, [r7, #8]
 800143e:	60d3      	str	r3, [r2, #12]
}
 8001440:	bf00      	nop
 8001442:	3714      	adds	r7, #20
 8001444:	46bd      	mov	sp, r7
 8001446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800144a:	4770      	bx	lr
 800144c:	e000ed00 	.word	0xe000ed00
 8001450:	05fa0000 	.word	0x05fa0000

08001454 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001454:	b480      	push	{r7}
 8001456:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001458:	4b04      	ldr	r3, [pc, #16]	@ (800146c <__NVIC_GetPriorityGrouping+0x18>)
 800145a:	68db      	ldr	r3, [r3, #12]
 800145c:	0a1b      	lsrs	r3, r3, #8
 800145e:	f003 0307 	and.w	r3, r3, #7
}
 8001462:	4618      	mov	r0, r3
 8001464:	46bd      	mov	sp, r7
 8001466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800146a:	4770      	bx	lr
 800146c:	e000ed00 	.word	0xe000ed00

08001470 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001470:	b480      	push	{r7}
 8001472:	b083      	sub	sp, #12
 8001474:	af00      	add	r7, sp, #0
 8001476:	4603      	mov	r3, r0
 8001478:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800147a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800147e:	2b00      	cmp	r3, #0
 8001480:	db0b      	blt.n	800149a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001482:	79fb      	ldrb	r3, [r7, #7]
 8001484:	f003 021f 	and.w	r2, r3, #31
 8001488:	4907      	ldr	r1, [pc, #28]	@ (80014a8 <__NVIC_EnableIRQ+0x38>)
 800148a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800148e:	095b      	lsrs	r3, r3, #5
 8001490:	2001      	movs	r0, #1
 8001492:	fa00 f202 	lsl.w	r2, r0, r2
 8001496:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800149a:	bf00      	nop
 800149c:	370c      	adds	r7, #12
 800149e:	46bd      	mov	sp, r7
 80014a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a4:	4770      	bx	lr
 80014a6:	bf00      	nop
 80014a8:	e000e100 	.word	0xe000e100

080014ac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80014ac:	b480      	push	{r7}
 80014ae:	b083      	sub	sp, #12
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	4603      	mov	r3, r0
 80014b4:	6039      	str	r1, [r7, #0]
 80014b6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80014b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014bc:	2b00      	cmp	r3, #0
 80014be:	db0a      	blt.n	80014d6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014c0:	683b      	ldr	r3, [r7, #0]
 80014c2:	b2da      	uxtb	r2, r3
 80014c4:	490c      	ldr	r1, [pc, #48]	@ (80014f8 <__NVIC_SetPriority+0x4c>)
 80014c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014ca:	0112      	lsls	r2, r2, #4
 80014cc:	b2d2      	uxtb	r2, r2
 80014ce:	440b      	add	r3, r1
 80014d0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80014d4:	e00a      	b.n	80014ec <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014d6:	683b      	ldr	r3, [r7, #0]
 80014d8:	b2da      	uxtb	r2, r3
 80014da:	4908      	ldr	r1, [pc, #32]	@ (80014fc <__NVIC_SetPriority+0x50>)
 80014dc:	79fb      	ldrb	r3, [r7, #7]
 80014de:	f003 030f 	and.w	r3, r3, #15
 80014e2:	3b04      	subs	r3, #4
 80014e4:	0112      	lsls	r2, r2, #4
 80014e6:	b2d2      	uxtb	r2, r2
 80014e8:	440b      	add	r3, r1
 80014ea:	761a      	strb	r2, [r3, #24]
}
 80014ec:	bf00      	nop
 80014ee:	370c      	adds	r7, #12
 80014f0:	46bd      	mov	sp, r7
 80014f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f6:	4770      	bx	lr
 80014f8:	e000e100 	.word	0xe000e100
 80014fc:	e000ed00 	.word	0xe000ed00

08001500 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001500:	b480      	push	{r7}
 8001502:	b089      	sub	sp, #36	@ 0x24
 8001504:	af00      	add	r7, sp, #0
 8001506:	60f8      	str	r0, [r7, #12]
 8001508:	60b9      	str	r1, [r7, #8]
 800150a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800150c:	68fb      	ldr	r3, [r7, #12]
 800150e:	f003 0307 	and.w	r3, r3, #7
 8001512:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001514:	69fb      	ldr	r3, [r7, #28]
 8001516:	f1c3 0307 	rsb	r3, r3, #7
 800151a:	2b04      	cmp	r3, #4
 800151c:	bf28      	it	cs
 800151e:	2304      	movcs	r3, #4
 8001520:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001522:	69fb      	ldr	r3, [r7, #28]
 8001524:	3304      	adds	r3, #4
 8001526:	2b06      	cmp	r3, #6
 8001528:	d902      	bls.n	8001530 <NVIC_EncodePriority+0x30>
 800152a:	69fb      	ldr	r3, [r7, #28]
 800152c:	3b03      	subs	r3, #3
 800152e:	e000      	b.n	8001532 <NVIC_EncodePriority+0x32>
 8001530:	2300      	movs	r3, #0
 8001532:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001534:	f04f 32ff 	mov.w	r2, #4294967295
 8001538:	69bb      	ldr	r3, [r7, #24]
 800153a:	fa02 f303 	lsl.w	r3, r2, r3
 800153e:	43da      	mvns	r2, r3
 8001540:	68bb      	ldr	r3, [r7, #8]
 8001542:	401a      	ands	r2, r3
 8001544:	697b      	ldr	r3, [r7, #20]
 8001546:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001548:	f04f 31ff 	mov.w	r1, #4294967295
 800154c:	697b      	ldr	r3, [r7, #20]
 800154e:	fa01 f303 	lsl.w	r3, r1, r3
 8001552:	43d9      	mvns	r1, r3
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001558:	4313      	orrs	r3, r2
         );
}
 800155a:	4618      	mov	r0, r3
 800155c:	3724      	adds	r7, #36	@ 0x24
 800155e:	46bd      	mov	sp, r7
 8001560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001564:	4770      	bx	lr
	...

08001568 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001568:	b580      	push	{r7, lr}
 800156a:	b082      	sub	sp, #8
 800156c:	af00      	add	r7, sp, #0
 800156e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	3b01      	subs	r3, #1
 8001574:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001578:	d301      	bcc.n	800157e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800157a:	2301      	movs	r3, #1
 800157c:	e00f      	b.n	800159e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800157e:	4a0a      	ldr	r2, [pc, #40]	@ (80015a8 <SysTick_Config+0x40>)
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	3b01      	subs	r3, #1
 8001584:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001586:	210f      	movs	r1, #15
 8001588:	f04f 30ff 	mov.w	r0, #4294967295
 800158c:	f7ff ff8e 	bl	80014ac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001590:	4b05      	ldr	r3, [pc, #20]	@ (80015a8 <SysTick_Config+0x40>)
 8001592:	2200      	movs	r2, #0
 8001594:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001596:	4b04      	ldr	r3, [pc, #16]	@ (80015a8 <SysTick_Config+0x40>)
 8001598:	2207      	movs	r2, #7
 800159a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800159c:	2300      	movs	r3, #0
}
 800159e:	4618      	mov	r0, r3
 80015a0:	3708      	adds	r7, #8
 80015a2:	46bd      	mov	sp, r7
 80015a4:	bd80      	pop	{r7, pc}
 80015a6:	bf00      	nop
 80015a8:	e000e010 	.word	0xe000e010

080015ac <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015ac:	b580      	push	{r7, lr}
 80015ae:	b082      	sub	sp, #8
 80015b0:	af00      	add	r7, sp, #0
 80015b2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80015b4:	6878      	ldr	r0, [r7, #4]
 80015b6:	f7ff ff29 	bl	800140c <__NVIC_SetPriorityGrouping>
}
 80015ba:	bf00      	nop
 80015bc:	3708      	adds	r7, #8
 80015be:	46bd      	mov	sp, r7
 80015c0:	bd80      	pop	{r7, pc}

080015c2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80015c2:	b580      	push	{r7, lr}
 80015c4:	b086      	sub	sp, #24
 80015c6:	af00      	add	r7, sp, #0
 80015c8:	4603      	mov	r3, r0
 80015ca:	60b9      	str	r1, [r7, #8]
 80015cc:	607a      	str	r2, [r7, #4]
 80015ce:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80015d0:	2300      	movs	r3, #0
 80015d2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80015d4:	f7ff ff3e 	bl	8001454 <__NVIC_GetPriorityGrouping>
 80015d8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80015da:	687a      	ldr	r2, [r7, #4]
 80015dc:	68b9      	ldr	r1, [r7, #8]
 80015de:	6978      	ldr	r0, [r7, #20]
 80015e0:	f7ff ff8e 	bl	8001500 <NVIC_EncodePriority>
 80015e4:	4602      	mov	r2, r0
 80015e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80015ea:	4611      	mov	r1, r2
 80015ec:	4618      	mov	r0, r3
 80015ee:	f7ff ff5d 	bl	80014ac <__NVIC_SetPriority>
}
 80015f2:	bf00      	nop
 80015f4:	3718      	adds	r7, #24
 80015f6:	46bd      	mov	sp, r7
 80015f8:	bd80      	pop	{r7, pc}

080015fa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80015fa:	b580      	push	{r7, lr}
 80015fc:	b082      	sub	sp, #8
 80015fe:	af00      	add	r7, sp, #0
 8001600:	4603      	mov	r3, r0
 8001602:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001604:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001608:	4618      	mov	r0, r3
 800160a:	f7ff ff31 	bl	8001470 <__NVIC_EnableIRQ>
}
 800160e:	bf00      	nop
 8001610:	3708      	adds	r7, #8
 8001612:	46bd      	mov	sp, r7
 8001614:	bd80      	pop	{r7, pc}

08001616 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001616:	b580      	push	{r7, lr}
 8001618:	b082      	sub	sp, #8
 800161a:	af00      	add	r7, sp, #0
 800161c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800161e:	6878      	ldr	r0, [r7, #4]
 8001620:	f7ff ffa2 	bl	8001568 <SysTick_Config>
 8001624:	4603      	mov	r3, r0
}
 8001626:	4618      	mov	r0, r3
 8001628:	3708      	adds	r7, #8
 800162a:	46bd      	mov	sp, r7
 800162c:	bd80      	pop	{r7, pc}
	...

08001630 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001630:	b480      	push	{r7}
 8001632:	b089      	sub	sp, #36	@ 0x24
 8001634:	af00      	add	r7, sp, #0
 8001636:	6078      	str	r0, [r7, #4]
 8001638:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800163a:	2300      	movs	r3, #0
 800163c:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800163e:	2300      	movs	r3, #0
 8001640:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8001642:	2300      	movs	r3, #0
 8001644:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8001646:	2300      	movs	r3, #0
 8001648:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 800164a:	2300      	movs	r3, #0
 800164c:	61fb      	str	r3, [r7, #28]
 800164e:	e175      	b.n	800193c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8001650:	2201      	movs	r2, #1
 8001652:	69fb      	ldr	r3, [r7, #28]
 8001654:	fa02 f303 	lsl.w	r3, r2, r3
 8001658:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800165a:	683b      	ldr	r3, [r7, #0]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	697a      	ldr	r2, [r7, #20]
 8001660:	4013      	ands	r3, r2
 8001662:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 8001664:	693a      	ldr	r2, [r7, #16]
 8001666:	697b      	ldr	r3, [r7, #20]
 8001668:	429a      	cmp	r2, r3
 800166a:	f040 8164 	bne.w	8001936 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800166e:	683b      	ldr	r3, [r7, #0]
 8001670:	685b      	ldr	r3, [r3, #4]
 8001672:	f003 0303 	and.w	r3, r3, #3
 8001676:	2b01      	cmp	r3, #1
 8001678:	d005      	beq.n	8001686 <HAL_GPIO_Init+0x56>
 800167a:	683b      	ldr	r3, [r7, #0]
 800167c:	685b      	ldr	r3, [r3, #4]
 800167e:	f003 0303 	and.w	r3, r3, #3
 8001682:	2b02      	cmp	r3, #2
 8001684:	d130      	bne.n	80016e8 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	689b      	ldr	r3, [r3, #8]
 800168a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800168c:	69fb      	ldr	r3, [r7, #28]
 800168e:	005b      	lsls	r3, r3, #1
 8001690:	2203      	movs	r2, #3
 8001692:	fa02 f303 	lsl.w	r3, r2, r3
 8001696:	43db      	mvns	r3, r3
 8001698:	69ba      	ldr	r2, [r7, #24]
 800169a:	4013      	ands	r3, r2
 800169c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800169e:	683b      	ldr	r3, [r7, #0]
 80016a0:	68da      	ldr	r2, [r3, #12]
 80016a2:	69fb      	ldr	r3, [r7, #28]
 80016a4:	005b      	lsls	r3, r3, #1
 80016a6:	fa02 f303 	lsl.w	r3, r2, r3
 80016aa:	69ba      	ldr	r2, [r7, #24]
 80016ac:	4313      	orrs	r3, r2
 80016ae:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	69ba      	ldr	r2, [r7, #24]
 80016b4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	685b      	ldr	r3, [r3, #4]
 80016ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80016bc:	2201      	movs	r2, #1
 80016be:	69fb      	ldr	r3, [r7, #28]
 80016c0:	fa02 f303 	lsl.w	r3, r2, r3
 80016c4:	43db      	mvns	r3, r3
 80016c6:	69ba      	ldr	r2, [r7, #24]
 80016c8:	4013      	ands	r3, r2
 80016ca:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80016cc:	683b      	ldr	r3, [r7, #0]
 80016ce:	685b      	ldr	r3, [r3, #4]
 80016d0:	091b      	lsrs	r3, r3, #4
 80016d2:	f003 0201 	and.w	r2, r3, #1
 80016d6:	69fb      	ldr	r3, [r7, #28]
 80016d8:	fa02 f303 	lsl.w	r3, r2, r3
 80016dc:	69ba      	ldr	r2, [r7, #24]
 80016de:	4313      	orrs	r3, r2
 80016e0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	69ba      	ldr	r2, [r7, #24]
 80016e6:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80016e8:	683b      	ldr	r3, [r7, #0]
 80016ea:	685b      	ldr	r3, [r3, #4]
 80016ec:	f003 0303 	and.w	r3, r3, #3
 80016f0:	2b03      	cmp	r3, #3
 80016f2:	d017      	beq.n	8001724 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	68db      	ldr	r3, [r3, #12]
 80016f8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80016fa:	69fb      	ldr	r3, [r7, #28]
 80016fc:	005b      	lsls	r3, r3, #1
 80016fe:	2203      	movs	r2, #3
 8001700:	fa02 f303 	lsl.w	r3, r2, r3
 8001704:	43db      	mvns	r3, r3
 8001706:	69ba      	ldr	r2, [r7, #24]
 8001708:	4013      	ands	r3, r2
 800170a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 800170c:	683b      	ldr	r3, [r7, #0]
 800170e:	689a      	ldr	r2, [r3, #8]
 8001710:	69fb      	ldr	r3, [r7, #28]
 8001712:	005b      	lsls	r3, r3, #1
 8001714:	fa02 f303 	lsl.w	r3, r2, r3
 8001718:	69ba      	ldr	r2, [r7, #24]
 800171a:	4313      	orrs	r3, r2
 800171c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	69ba      	ldr	r2, [r7, #24]
 8001722:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001724:	683b      	ldr	r3, [r7, #0]
 8001726:	685b      	ldr	r3, [r3, #4]
 8001728:	f003 0303 	and.w	r3, r3, #3
 800172c:	2b02      	cmp	r3, #2
 800172e:	d123      	bne.n	8001778 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8001730:	69fb      	ldr	r3, [r7, #28]
 8001732:	08da      	lsrs	r2, r3, #3
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	3208      	adds	r2, #8
 8001738:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800173c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800173e:	69fb      	ldr	r3, [r7, #28]
 8001740:	f003 0307 	and.w	r3, r3, #7
 8001744:	009b      	lsls	r3, r3, #2
 8001746:	220f      	movs	r2, #15
 8001748:	fa02 f303 	lsl.w	r3, r2, r3
 800174c:	43db      	mvns	r3, r3
 800174e:	69ba      	ldr	r2, [r7, #24]
 8001750:	4013      	ands	r3, r2
 8001752:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001754:	683b      	ldr	r3, [r7, #0]
 8001756:	691a      	ldr	r2, [r3, #16]
 8001758:	69fb      	ldr	r3, [r7, #28]
 800175a:	f003 0307 	and.w	r3, r3, #7
 800175e:	009b      	lsls	r3, r3, #2
 8001760:	fa02 f303 	lsl.w	r3, r2, r3
 8001764:	69ba      	ldr	r2, [r7, #24]
 8001766:	4313      	orrs	r3, r2
 8001768:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800176a:	69fb      	ldr	r3, [r7, #28]
 800176c:	08da      	lsrs	r2, r3, #3
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	3208      	adds	r2, #8
 8001772:	69b9      	ldr	r1, [r7, #24]
 8001774:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800177e:	69fb      	ldr	r3, [r7, #28]
 8001780:	005b      	lsls	r3, r3, #1
 8001782:	2203      	movs	r2, #3
 8001784:	fa02 f303 	lsl.w	r3, r2, r3
 8001788:	43db      	mvns	r3, r3
 800178a:	69ba      	ldr	r2, [r7, #24]
 800178c:	4013      	ands	r3, r2
 800178e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001790:	683b      	ldr	r3, [r7, #0]
 8001792:	685b      	ldr	r3, [r3, #4]
 8001794:	f003 0203 	and.w	r2, r3, #3
 8001798:	69fb      	ldr	r3, [r7, #28]
 800179a:	005b      	lsls	r3, r3, #1
 800179c:	fa02 f303 	lsl.w	r3, r2, r3
 80017a0:	69ba      	ldr	r2, [r7, #24]
 80017a2:	4313      	orrs	r3, r2
 80017a4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	69ba      	ldr	r2, [r7, #24]
 80017aa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80017ac:	683b      	ldr	r3, [r7, #0]
 80017ae:	685b      	ldr	r3, [r3, #4]
 80017b0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	f000 80be 	beq.w	8001936 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80017ba:	4b66      	ldr	r3, [pc, #408]	@ (8001954 <HAL_GPIO_Init+0x324>)
 80017bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80017be:	4a65      	ldr	r2, [pc, #404]	@ (8001954 <HAL_GPIO_Init+0x324>)
 80017c0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80017c4:	6453      	str	r3, [r2, #68]	@ 0x44
 80017c6:	4b63      	ldr	r3, [pc, #396]	@ (8001954 <HAL_GPIO_Init+0x324>)
 80017c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80017ca:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80017ce:	60fb      	str	r3, [r7, #12]
 80017d0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80017d2:	4a61      	ldr	r2, [pc, #388]	@ (8001958 <HAL_GPIO_Init+0x328>)
 80017d4:	69fb      	ldr	r3, [r7, #28]
 80017d6:	089b      	lsrs	r3, r3, #2
 80017d8:	3302      	adds	r3, #2
 80017da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80017de:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80017e0:	69fb      	ldr	r3, [r7, #28]
 80017e2:	f003 0303 	and.w	r3, r3, #3
 80017e6:	009b      	lsls	r3, r3, #2
 80017e8:	220f      	movs	r2, #15
 80017ea:	fa02 f303 	lsl.w	r3, r2, r3
 80017ee:	43db      	mvns	r3, r3
 80017f0:	69ba      	ldr	r2, [r7, #24]
 80017f2:	4013      	ands	r3, r2
 80017f4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	4a58      	ldr	r2, [pc, #352]	@ (800195c <HAL_GPIO_Init+0x32c>)
 80017fa:	4293      	cmp	r3, r2
 80017fc:	d037      	beq.n	800186e <HAL_GPIO_Init+0x23e>
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	4a57      	ldr	r2, [pc, #348]	@ (8001960 <HAL_GPIO_Init+0x330>)
 8001802:	4293      	cmp	r3, r2
 8001804:	d031      	beq.n	800186a <HAL_GPIO_Init+0x23a>
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	4a56      	ldr	r2, [pc, #344]	@ (8001964 <HAL_GPIO_Init+0x334>)
 800180a:	4293      	cmp	r3, r2
 800180c:	d02b      	beq.n	8001866 <HAL_GPIO_Init+0x236>
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	4a55      	ldr	r2, [pc, #340]	@ (8001968 <HAL_GPIO_Init+0x338>)
 8001812:	4293      	cmp	r3, r2
 8001814:	d025      	beq.n	8001862 <HAL_GPIO_Init+0x232>
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	4a54      	ldr	r2, [pc, #336]	@ (800196c <HAL_GPIO_Init+0x33c>)
 800181a:	4293      	cmp	r3, r2
 800181c:	d01f      	beq.n	800185e <HAL_GPIO_Init+0x22e>
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	4a53      	ldr	r2, [pc, #332]	@ (8001970 <HAL_GPIO_Init+0x340>)
 8001822:	4293      	cmp	r3, r2
 8001824:	d019      	beq.n	800185a <HAL_GPIO_Init+0x22a>
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	4a52      	ldr	r2, [pc, #328]	@ (8001974 <HAL_GPIO_Init+0x344>)
 800182a:	4293      	cmp	r3, r2
 800182c:	d013      	beq.n	8001856 <HAL_GPIO_Init+0x226>
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	4a51      	ldr	r2, [pc, #324]	@ (8001978 <HAL_GPIO_Init+0x348>)
 8001832:	4293      	cmp	r3, r2
 8001834:	d00d      	beq.n	8001852 <HAL_GPIO_Init+0x222>
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	4a50      	ldr	r2, [pc, #320]	@ (800197c <HAL_GPIO_Init+0x34c>)
 800183a:	4293      	cmp	r3, r2
 800183c:	d007      	beq.n	800184e <HAL_GPIO_Init+0x21e>
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	4a4f      	ldr	r2, [pc, #316]	@ (8001980 <HAL_GPIO_Init+0x350>)
 8001842:	4293      	cmp	r3, r2
 8001844:	d101      	bne.n	800184a <HAL_GPIO_Init+0x21a>
 8001846:	2309      	movs	r3, #9
 8001848:	e012      	b.n	8001870 <HAL_GPIO_Init+0x240>
 800184a:	230a      	movs	r3, #10
 800184c:	e010      	b.n	8001870 <HAL_GPIO_Init+0x240>
 800184e:	2308      	movs	r3, #8
 8001850:	e00e      	b.n	8001870 <HAL_GPIO_Init+0x240>
 8001852:	2307      	movs	r3, #7
 8001854:	e00c      	b.n	8001870 <HAL_GPIO_Init+0x240>
 8001856:	2306      	movs	r3, #6
 8001858:	e00a      	b.n	8001870 <HAL_GPIO_Init+0x240>
 800185a:	2305      	movs	r3, #5
 800185c:	e008      	b.n	8001870 <HAL_GPIO_Init+0x240>
 800185e:	2304      	movs	r3, #4
 8001860:	e006      	b.n	8001870 <HAL_GPIO_Init+0x240>
 8001862:	2303      	movs	r3, #3
 8001864:	e004      	b.n	8001870 <HAL_GPIO_Init+0x240>
 8001866:	2302      	movs	r3, #2
 8001868:	e002      	b.n	8001870 <HAL_GPIO_Init+0x240>
 800186a:	2301      	movs	r3, #1
 800186c:	e000      	b.n	8001870 <HAL_GPIO_Init+0x240>
 800186e:	2300      	movs	r3, #0
 8001870:	69fa      	ldr	r2, [r7, #28]
 8001872:	f002 0203 	and.w	r2, r2, #3
 8001876:	0092      	lsls	r2, r2, #2
 8001878:	4093      	lsls	r3, r2
 800187a:	69ba      	ldr	r2, [r7, #24]
 800187c:	4313      	orrs	r3, r2
 800187e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001880:	4935      	ldr	r1, [pc, #212]	@ (8001958 <HAL_GPIO_Init+0x328>)
 8001882:	69fb      	ldr	r3, [r7, #28]
 8001884:	089b      	lsrs	r3, r3, #2
 8001886:	3302      	adds	r3, #2
 8001888:	69ba      	ldr	r2, [r7, #24]
 800188a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800188e:	4b3d      	ldr	r3, [pc, #244]	@ (8001984 <HAL_GPIO_Init+0x354>)
 8001890:	689b      	ldr	r3, [r3, #8]
 8001892:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001894:	693b      	ldr	r3, [r7, #16]
 8001896:	43db      	mvns	r3, r3
 8001898:	69ba      	ldr	r2, [r7, #24]
 800189a:	4013      	ands	r3, r2
 800189c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800189e:	683b      	ldr	r3, [r7, #0]
 80018a0:	685b      	ldr	r3, [r3, #4]
 80018a2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d003      	beq.n	80018b2 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80018aa:	69ba      	ldr	r2, [r7, #24]
 80018ac:	693b      	ldr	r3, [r7, #16]
 80018ae:	4313      	orrs	r3, r2
 80018b0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80018b2:	4a34      	ldr	r2, [pc, #208]	@ (8001984 <HAL_GPIO_Init+0x354>)
 80018b4:	69bb      	ldr	r3, [r7, #24]
 80018b6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80018b8:	4b32      	ldr	r3, [pc, #200]	@ (8001984 <HAL_GPIO_Init+0x354>)
 80018ba:	68db      	ldr	r3, [r3, #12]
 80018bc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80018be:	693b      	ldr	r3, [r7, #16]
 80018c0:	43db      	mvns	r3, r3
 80018c2:	69ba      	ldr	r2, [r7, #24]
 80018c4:	4013      	ands	r3, r2
 80018c6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80018c8:	683b      	ldr	r3, [r7, #0]
 80018ca:	685b      	ldr	r3, [r3, #4]
 80018cc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d003      	beq.n	80018dc <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80018d4:	69ba      	ldr	r2, [r7, #24]
 80018d6:	693b      	ldr	r3, [r7, #16]
 80018d8:	4313      	orrs	r3, r2
 80018da:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80018dc:	4a29      	ldr	r2, [pc, #164]	@ (8001984 <HAL_GPIO_Init+0x354>)
 80018de:	69bb      	ldr	r3, [r7, #24]
 80018e0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80018e2:	4b28      	ldr	r3, [pc, #160]	@ (8001984 <HAL_GPIO_Init+0x354>)
 80018e4:	685b      	ldr	r3, [r3, #4]
 80018e6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80018e8:	693b      	ldr	r3, [r7, #16]
 80018ea:	43db      	mvns	r3, r3
 80018ec:	69ba      	ldr	r2, [r7, #24]
 80018ee:	4013      	ands	r3, r2
 80018f0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80018f2:	683b      	ldr	r3, [r7, #0]
 80018f4:	685b      	ldr	r3, [r3, #4]
 80018f6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d003      	beq.n	8001906 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80018fe:	69ba      	ldr	r2, [r7, #24]
 8001900:	693b      	ldr	r3, [r7, #16]
 8001902:	4313      	orrs	r3, r2
 8001904:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001906:	4a1f      	ldr	r2, [pc, #124]	@ (8001984 <HAL_GPIO_Init+0x354>)
 8001908:	69bb      	ldr	r3, [r7, #24]
 800190a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800190c:	4b1d      	ldr	r3, [pc, #116]	@ (8001984 <HAL_GPIO_Init+0x354>)
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001912:	693b      	ldr	r3, [r7, #16]
 8001914:	43db      	mvns	r3, r3
 8001916:	69ba      	ldr	r2, [r7, #24]
 8001918:	4013      	ands	r3, r2
 800191a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800191c:	683b      	ldr	r3, [r7, #0]
 800191e:	685b      	ldr	r3, [r3, #4]
 8001920:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001924:	2b00      	cmp	r3, #0
 8001926:	d003      	beq.n	8001930 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001928:	69ba      	ldr	r2, [r7, #24]
 800192a:	693b      	ldr	r3, [r7, #16]
 800192c:	4313      	orrs	r3, r2
 800192e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001930:	4a14      	ldr	r2, [pc, #80]	@ (8001984 <HAL_GPIO_Init+0x354>)
 8001932:	69bb      	ldr	r3, [r7, #24]
 8001934:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 8001936:	69fb      	ldr	r3, [r7, #28]
 8001938:	3301      	adds	r3, #1
 800193a:	61fb      	str	r3, [r7, #28]
 800193c:	69fb      	ldr	r3, [r7, #28]
 800193e:	2b0f      	cmp	r3, #15
 8001940:	f67f ae86 	bls.w	8001650 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8001944:	bf00      	nop
 8001946:	bf00      	nop
 8001948:	3724      	adds	r7, #36	@ 0x24
 800194a:	46bd      	mov	sp, r7
 800194c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001950:	4770      	bx	lr
 8001952:	bf00      	nop
 8001954:	40023800 	.word	0x40023800
 8001958:	40013800 	.word	0x40013800
 800195c:	40020000 	.word	0x40020000
 8001960:	40020400 	.word	0x40020400
 8001964:	40020800 	.word	0x40020800
 8001968:	40020c00 	.word	0x40020c00
 800196c:	40021000 	.word	0x40021000
 8001970:	40021400 	.word	0x40021400
 8001974:	40021800 	.word	0x40021800
 8001978:	40021c00 	.word	0x40021c00
 800197c:	40022000 	.word	0x40022000
 8001980:	40022400 	.word	0x40022400
 8001984:	40013c00 	.word	0x40013c00

08001988 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001988:	b480      	push	{r7}
 800198a:	b083      	sub	sp, #12
 800198c:	af00      	add	r7, sp, #0
 800198e:	6078      	str	r0, [r7, #4]
 8001990:	460b      	mov	r3, r1
 8001992:	807b      	strh	r3, [r7, #2]
 8001994:	4613      	mov	r3, r2
 8001996:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001998:	787b      	ldrb	r3, [r7, #1]
 800199a:	2b00      	cmp	r3, #0
 800199c:	d003      	beq.n	80019a6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800199e:	887a      	ldrh	r2, [r7, #2]
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80019a4:	e003      	b.n	80019ae <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80019a6:	887b      	ldrh	r3, [r7, #2]
 80019a8:	041a      	lsls	r2, r3, #16
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	619a      	str	r2, [r3, #24]
}
 80019ae:	bf00      	nop
 80019b0:	370c      	adds	r7, #12
 80019b2:	46bd      	mov	sp, r7
 80019b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b8:	4770      	bx	lr
	...

080019bc <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80019bc:	b480      	push	{r7}
 80019be:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80019c0:	4b05      	ldr	r3, [pc, #20]	@ (80019d8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	4a04      	ldr	r2, [pc, #16]	@ (80019d8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80019c6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80019ca:	6013      	str	r3, [r2, #0]
}
 80019cc:	bf00      	nop
 80019ce:	46bd      	mov	sp, r7
 80019d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d4:	4770      	bx	lr
 80019d6:	bf00      	nop
 80019d8:	40007000 	.word	0x40007000

080019dc <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80019dc:	b580      	push	{r7, lr}
 80019de:	b082      	sub	sp, #8
 80019e0:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 80019e2:	2300      	movs	r3, #0
 80019e4:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80019e6:	4b23      	ldr	r3, [pc, #140]	@ (8001a74 <HAL_PWREx_EnableOverDrive+0x98>)
 80019e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019ea:	4a22      	ldr	r2, [pc, #136]	@ (8001a74 <HAL_PWREx_EnableOverDrive+0x98>)
 80019ec:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80019f0:	6413      	str	r3, [r2, #64]	@ 0x40
 80019f2:	4b20      	ldr	r3, [pc, #128]	@ (8001a74 <HAL_PWREx_EnableOverDrive+0x98>)
 80019f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019f6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80019fa:	603b      	str	r3, [r7, #0]
 80019fc:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80019fe:	4b1e      	ldr	r3, [pc, #120]	@ (8001a78 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	4a1d      	ldr	r2, [pc, #116]	@ (8001a78 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001a04:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001a08:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001a0a:	f7ff fccf 	bl	80013ac <HAL_GetTick>
 8001a0e:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001a10:	e009      	b.n	8001a26 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001a12:	f7ff fccb 	bl	80013ac <HAL_GetTick>
 8001a16:	4602      	mov	r2, r0
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	1ad3      	subs	r3, r2, r3
 8001a1c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001a20:	d901      	bls.n	8001a26 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8001a22:	2303      	movs	r3, #3
 8001a24:	e022      	b.n	8001a6c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001a26:	4b14      	ldr	r3, [pc, #80]	@ (8001a78 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001a28:	685b      	ldr	r3, [r3, #4]
 8001a2a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001a2e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001a32:	d1ee      	bne.n	8001a12 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8001a34:	4b10      	ldr	r3, [pc, #64]	@ (8001a78 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	4a0f      	ldr	r2, [pc, #60]	@ (8001a78 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001a3a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001a3e:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001a40:	f7ff fcb4 	bl	80013ac <HAL_GetTick>
 8001a44:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001a46:	e009      	b.n	8001a5c <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001a48:	f7ff fcb0 	bl	80013ac <HAL_GetTick>
 8001a4c:	4602      	mov	r2, r0
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	1ad3      	subs	r3, r2, r3
 8001a52:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001a56:	d901      	bls.n	8001a5c <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8001a58:	2303      	movs	r3, #3
 8001a5a:	e007      	b.n	8001a6c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001a5c:	4b06      	ldr	r3, [pc, #24]	@ (8001a78 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001a5e:	685b      	ldr	r3, [r3, #4]
 8001a60:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a64:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8001a68:	d1ee      	bne.n	8001a48 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8001a6a:	2300      	movs	r3, #0
}
 8001a6c:	4618      	mov	r0, r3
 8001a6e:	3708      	adds	r7, #8
 8001a70:	46bd      	mov	sp, r7
 8001a72:	bd80      	pop	{r7, pc}
 8001a74:	40023800 	.word	0x40023800
 8001a78:	40007000 	.word	0x40007000

08001a7c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001a7c:	b580      	push	{r7, lr}
 8001a7e:	b086      	sub	sp, #24
 8001a80:	af00      	add	r7, sp, #0
 8001a82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8001a84:	2300      	movs	r3, #0
 8001a86:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d101      	bne.n	8001a92 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8001a8e:	2301      	movs	r3, #1
 8001a90:	e29b      	b.n	8001fca <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	f003 0301 	and.w	r3, r3, #1
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	f000 8087 	beq.w	8001bae <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001aa0:	4b96      	ldr	r3, [pc, #600]	@ (8001cfc <HAL_RCC_OscConfig+0x280>)
 8001aa2:	689b      	ldr	r3, [r3, #8]
 8001aa4:	f003 030c 	and.w	r3, r3, #12
 8001aa8:	2b04      	cmp	r3, #4
 8001aaa:	d00c      	beq.n	8001ac6 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001aac:	4b93      	ldr	r3, [pc, #588]	@ (8001cfc <HAL_RCC_OscConfig+0x280>)
 8001aae:	689b      	ldr	r3, [r3, #8]
 8001ab0:	f003 030c 	and.w	r3, r3, #12
 8001ab4:	2b08      	cmp	r3, #8
 8001ab6:	d112      	bne.n	8001ade <HAL_RCC_OscConfig+0x62>
 8001ab8:	4b90      	ldr	r3, [pc, #576]	@ (8001cfc <HAL_RCC_OscConfig+0x280>)
 8001aba:	685b      	ldr	r3, [r3, #4]
 8001abc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001ac0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001ac4:	d10b      	bne.n	8001ade <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ac6:	4b8d      	ldr	r3, [pc, #564]	@ (8001cfc <HAL_RCC_OscConfig+0x280>)
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d06c      	beq.n	8001bac <HAL_RCC_OscConfig+0x130>
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	685b      	ldr	r3, [r3, #4]
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d168      	bne.n	8001bac <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8001ada:	2301      	movs	r3, #1
 8001adc:	e275      	b.n	8001fca <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	685b      	ldr	r3, [r3, #4]
 8001ae2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001ae6:	d106      	bne.n	8001af6 <HAL_RCC_OscConfig+0x7a>
 8001ae8:	4b84      	ldr	r3, [pc, #528]	@ (8001cfc <HAL_RCC_OscConfig+0x280>)
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	4a83      	ldr	r2, [pc, #524]	@ (8001cfc <HAL_RCC_OscConfig+0x280>)
 8001aee:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001af2:	6013      	str	r3, [r2, #0]
 8001af4:	e02e      	b.n	8001b54 <HAL_RCC_OscConfig+0xd8>
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	685b      	ldr	r3, [r3, #4]
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d10c      	bne.n	8001b18 <HAL_RCC_OscConfig+0x9c>
 8001afe:	4b7f      	ldr	r3, [pc, #508]	@ (8001cfc <HAL_RCC_OscConfig+0x280>)
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	4a7e      	ldr	r2, [pc, #504]	@ (8001cfc <HAL_RCC_OscConfig+0x280>)
 8001b04:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001b08:	6013      	str	r3, [r2, #0]
 8001b0a:	4b7c      	ldr	r3, [pc, #496]	@ (8001cfc <HAL_RCC_OscConfig+0x280>)
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	4a7b      	ldr	r2, [pc, #492]	@ (8001cfc <HAL_RCC_OscConfig+0x280>)
 8001b10:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001b14:	6013      	str	r3, [r2, #0]
 8001b16:	e01d      	b.n	8001b54 <HAL_RCC_OscConfig+0xd8>
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	685b      	ldr	r3, [r3, #4]
 8001b1c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001b20:	d10c      	bne.n	8001b3c <HAL_RCC_OscConfig+0xc0>
 8001b22:	4b76      	ldr	r3, [pc, #472]	@ (8001cfc <HAL_RCC_OscConfig+0x280>)
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	4a75      	ldr	r2, [pc, #468]	@ (8001cfc <HAL_RCC_OscConfig+0x280>)
 8001b28:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001b2c:	6013      	str	r3, [r2, #0]
 8001b2e:	4b73      	ldr	r3, [pc, #460]	@ (8001cfc <HAL_RCC_OscConfig+0x280>)
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	4a72      	ldr	r2, [pc, #456]	@ (8001cfc <HAL_RCC_OscConfig+0x280>)
 8001b34:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001b38:	6013      	str	r3, [r2, #0]
 8001b3a:	e00b      	b.n	8001b54 <HAL_RCC_OscConfig+0xd8>
 8001b3c:	4b6f      	ldr	r3, [pc, #444]	@ (8001cfc <HAL_RCC_OscConfig+0x280>)
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	4a6e      	ldr	r2, [pc, #440]	@ (8001cfc <HAL_RCC_OscConfig+0x280>)
 8001b42:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001b46:	6013      	str	r3, [r2, #0]
 8001b48:	4b6c      	ldr	r3, [pc, #432]	@ (8001cfc <HAL_RCC_OscConfig+0x280>)
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	4a6b      	ldr	r2, [pc, #428]	@ (8001cfc <HAL_RCC_OscConfig+0x280>)
 8001b4e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001b52:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	685b      	ldr	r3, [r3, #4]
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d013      	beq.n	8001b84 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b5c:	f7ff fc26 	bl	80013ac <HAL_GetTick>
 8001b60:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b62:	e008      	b.n	8001b76 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001b64:	f7ff fc22 	bl	80013ac <HAL_GetTick>
 8001b68:	4602      	mov	r2, r0
 8001b6a:	693b      	ldr	r3, [r7, #16]
 8001b6c:	1ad3      	subs	r3, r2, r3
 8001b6e:	2b64      	cmp	r3, #100	@ 0x64
 8001b70:	d901      	bls.n	8001b76 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001b72:	2303      	movs	r3, #3
 8001b74:	e229      	b.n	8001fca <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b76:	4b61      	ldr	r3, [pc, #388]	@ (8001cfc <HAL_RCC_OscConfig+0x280>)
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d0f0      	beq.n	8001b64 <HAL_RCC_OscConfig+0xe8>
 8001b82:	e014      	b.n	8001bae <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b84:	f7ff fc12 	bl	80013ac <HAL_GetTick>
 8001b88:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b8a:	e008      	b.n	8001b9e <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001b8c:	f7ff fc0e 	bl	80013ac <HAL_GetTick>
 8001b90:	4602      	mov	r2, r0
 8001b92:	693b      	ldr	r3, [r7, #16]
 8001b94:	1ad3      	subs	r3, r2, r3
 8001b96:	2b64      	cmp	r3, #100	@ 0x64
 8001b98:	d901      	bls.n	8001b9e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8001b9a:	2303      	movs	r3, #3
 8001b9c:	e215      	b.n	8001fca <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b9e:	4b57      	ldr	r3, [pc, #348]	@ (8001cfc <HAL_RCC_OscConfig+0x280>)
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d1f0      	bne.n	8001b8c <HAL_RCC_OscConfig+0x110>
 8001baa:	e000      	b.n	8001bae <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001bac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	f003 0302 	and.w	r3, r3, #2
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d069      	beq.n	8001c8e <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001bba:	4b50      	ldr	r3, [pc, #320]	@ (8001cfc <HAL_RCC_OscConfig+0x280>)
 8001bbc:	689b      	ldr	r3, [r3, #8]
 8001bbe:	f003 030c 	and.w	r3, r3, #12
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d00b      	beq.n	8001bde <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001bc6:	4b4d      	ldr	r3, [pc, #308]	@ (8001cfc <HAL_RCC_OscConfig+0x280>)
 8001bc8:	689b      	ldr	r3, [r3, #8]
 8001bca:	f003 030c 	and.w	r3, r3, #12
 8001bce:	2b08      	cmp	r3, #8
 8001bd0:	d11c      	bne.n	8001c0c <HAL_RCC_OscConfig+0x190>
 8001bd2:	4b4a      	ldr	r3, [pc, #296]	@ (8001cfc <HAL_RCC_OscConfig+0x280>)
 8001bd4:	685b      	ldr	r3, [r3, #4]
 8001bd6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d116      	bne.n	8001c0c <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001bde:	4b47      	ldr	r3, [pc, #284]	@ (8001cfc <HAL_RCC_OscConfig+0x280>)
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	f003 0302 	and.w	r3, r3, #2
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d005      	beq.n	8001bf6 <HAL_RCC_OscConfig+0x17a>
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	68db      	ldr	r3, [r3, #12]
 8001bee:	2b01      	cmp	r3, #1
 8001bf0:	d001      	beq.n	8001bf6 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8001bf2:	2301      	movs	r3, #1
 8001bf4:	e1e9      	b.n	8001fca <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001bf6:	4b41      	ldr	r3, [pc, #260]	@ (8001cfc <HAL_RCC_OscConfig+0x280>)
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	691b      	ldr	r3, [r3, #16]
 8001c02:	00db      	lsls	r3, r3, #3
 8001c04:	493d      	ldr	r1, [pc, #244]	@ (8001cfc <HAL_RCC_OscConfig+0x280>)
 8001c06:	4313      	orrs	r3, r2
 8001c08:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c0a:	e040      	b.n	8001c8e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	68db      	ldr	r3, [r3, #12]
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d023      	beq.n	8001c5c <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001c14:	4b39      	ldr	r3, [pc, #228]	@ (8001cfc <HAL_RCC_OscConfig+0x280>)
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	4a38      	ldr	r2, [pc, #224]	@ (8001cfc <HAL_RCC_OscConfig+0x280>)
 8001c1a:	f043 0301 	orr.w	r3, r3, #1
 8001c1e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c20:	f7ff fbc4 	bl	80013ac <HAL_GetTick>
 8001c24:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c26:	e008      	b.n	8001c3a <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001c28:	f7ff fbc0 	bl	80013ac <HAL_GetTick>
 8001c2c:	4602      	mov	r2, r0
 8001c2e:	693b      	ldr	r3, [r7, #16]
 8001c30:	1ad3      	subs	r3, r2, r3
 8001c32:	2b02      	cmp	r3, #2
 8001c34:	d901      	bls.n	8001c3a <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8001c36:	2303      	movs	r3, #3
 8001c38:	e1c7      	b.n	8001fca <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c3a:	4b30      	ldr	r3, [pc, #192]	@ (8001cfc <HAL_RCC_OscConfig+0x280>)
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	f003 0302 	and.w	r3, r3, #2
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d0f0      	beq.n	8001c28 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c46:	4b2d      	ldr	r3, [pc, #180]	@ (8001cfc <HAL_RCC_OscConfig+0x280>)
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	691b      	ldr	r3, [r3, #16]
 8001c52:	00db      	lsls	r3, r3, #3
 8001c54:	4929      	ldr	r1, [pc, #164]	@ (8001cfc <HAL_RCC_OscConfig+0x280>)
 8001c56:	4313      	orrs	r3, r2
 8001c58:	600b      	str	r3, [r1, #0]
 8001c5a:	e018      	b.n	8001c8e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001c5c:	4b27      	ldr	r3, [pc, #156]	@ (8001cfc <HAL_RCC_OscConfig+0x280>)
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	4a26      	ldr	r2, [pc, #152]	@ (8001cfc <HAL_RCC_OscConfig+0x280>)
 8001c62:	f023 0301 	bic.w	r3, r3, #1
 8001c66:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c68:	f7ff fba0 	bl	80013ac <HAL_GetTick>
 8001c6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c6e:	e008      	b.n	8001c82 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001c70:	f7ff fb9c 	bl	80013ac <HAL_GetTick>
 8001c74:	4602      	mov	r2, r0
 8001c76:	693b      	ldr	r3, [r7, #16]
 8001c78:	1ad3      	subs	r3, r2, r3
 8001c7a:	2b02      	cmp	r3, #2
 8001c7c:	d901      	bls.n	8001c82 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8001c7e:	2303      	movs	r3, #3
 8001c80:	e1a3      	b.n	8001fca <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c82:	4b1e      	ldr	r3, [pc, #120]	@ (8001cfc <HAL_RCC_OscConfig+0x280>)
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	f003 0302 	and.w	r3, r3, #2
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d1f0      	bne.n	8001c70 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	f003 0308 	and.w	r3, r3, #8
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d038      	beq.n	8001d0c <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	695b      	ldr	r3, [r3, #20]
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d019      	beq.n	8001cd6 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001ca2:	4b16      	ldr	r3, [pc, #88]	@ (8001cfc <HAL_RCC_OscConfig+0x280>)
 8001ca4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001ca6:	4a15      	ldr	r2, [pc, #84]	@ (8001cfc <HAL_RCC_OscConfig+0x280>)
 8001ca8:	f043 0301 	orr.w	r3, r3, #1
 8001cac:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001cae:	f7ff fb7d 	bl	80013ac <HAL_GetTick>
 8001cb2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001cb4:	e008      	b.n	8001cc8 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001cb6:	f7ff fb79 	bl	80013ac <HAL_GetTick>
 8001cba:	4602      	mov	r2, r0
 8001cbc:	693b      	ldr	r3, [r7, #16]
 8001cbe:	1ad3      	subs	r3, r2, r3
 8001cc0:	2b02      	cmp	r3, #2
 8001cc2:	d901      	bls.n	8001cc8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001cc4:	2303      	movs	r3, #3
 8001cc6:	e180      	b.n	8001fca <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001cc8:	4b0c      	ldr	r3, [pc, #48]	@ (8001cfc <HAL_RCC_OscConfig+0x280>)
 8001cca:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001ccc:	f003 0302 	and.w	r3, r3, #2
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d0f0      	beq.n	8001cb6 <HAL_RCC_OscConfig+0x23a>
 8001cd4:	e01a      	b.n	8001d0c <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001cd6:	4b09      	ldr	r3, [pc, #36]	@ (8001cfc <HAL_RCC_OscConfig+0x280>)
 8001cd8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001cda:	4a08      	ldr	r2, [pc, #32]	@ (8001cfc <HAL_RCC_OscConfig+0x280>)
 8001cdc:	f023 0301 	bic.w	r3, r3, #1
 8001ce0:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ce2:	f7ff fb63 	bl	80013ac <HAL_GetTick>
 8001ce6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ce8:	e00a      	b.n	8001d00 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001cea:	f7ff fb5f 	bl	80013ac <HAL_GetTick>
 8001cee:	4602      	mov	r2, r0
 8001cf0:	693b      	ldr	r3, [r7, #16]
 8001cf2:	1ad3      	subs	r3, r2, r3
 8001cf4:	2b02      	cmp	r3, #2
 8001cf6:	d903      	bls.n	8001d00 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8001cf8:	2303      	movs	r3, #3
 8001cfa:	e166      	b.n	8001fca <HAL_RCC_OscConfig+0x54e>
 8001cfc:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d00:	4b92      	ldr	r3, [pc, #584]	@ (8001f4c <HAL_RCC_OscConfig+0x4d0>)
 8001d02:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001d04:	f003 0302 	and.w	r3, r3, #2
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d1ee      	bne.n	8001cea <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	f003 0304 	and.w	r3, r3, #4
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	f000 80a4 	beq.w	8001e62 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001d1a:	4b8c      	ldr	r3, [pc, #560]	@ (8001f4c <HAL_RCC_OscConfig+0x4d0>)
 8001d1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d1e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d10d      	bne.n	8001d42 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8001d26:	4b89      	ldr	r3, [pc, #548]	@ (8001f4c <HAL_RCC_OscConfig+0x4d0>)
 8001d28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d2a:	4a88      	ldr	r2, [pc, #544]	@ (8001f4c <HAL_RCC_OscConfig+0x4d0>)
 8001d2c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001d30:	6413      	str	r3, [r2, #64]	@ 0x40
 8001d32:	4b86      	ldr	r3, [pc, #536]	@ (8001f4c <HAL_RCC_OscConfig+0x4d0>)
 8001d34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d36:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001d3a:	60bb      	str	r3, [r7, #8]
 8001d3c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001d3e:	2301      	movs	r3, #1
 8001d40:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001d42:	4b83      	ldr	r3, [pc, #524]	@ (8001f50 <HAL_RCC_OscConfig+0x4d4>)
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d118      	bne.n	8001d80 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8001d4e:	4b80      	ldr	r3, [pc, #512]	@ (8001f50 <HAL_RCC_OscConfig+0x4d4>)
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	4a7f      	ldr	r2, [pc, #508]	@ (8001f50 <HAL_RCC_OscConfig+0x4d4>)
 8001d54:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001d58:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001d5a:	f7ff fb27 	bl	80013ac <HAL_GetTick>
 8001d5e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001d60:	e008      	b.n	8001d74 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001d62:	f7ff fb23 	bl	80013ac <HAL_GetTick>
 8001d66:	4602      	mov	r2, r0
 8001d68:	693b      	ldr	r3, [r7, #16]
 8001d6a:	1ad3      	subs	r3, r2, r3
 8001d6c:	2b64      	cmp	r3, #100	@ 0x64
 8001d6e:	d901      	bls.n	8001d74 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8001d70:	2303      	movs	r3, #3
 8001d72:	e12a      	b.n	8001fca <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001d74:	4b76      	ldr	r3, [pc, #472]	@ (8001f50 <HAL_RCC_OscConfig+0x4d4>)
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d0f0      	beq.n	8001d62 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	689b      	ldr	r3, [r3, #8]
 8001d84:	2b01      	cmp	r3, #1
 8001d86:	d106      	bne.n	8001d96 <HAL_RCC_OscConfig+0x31a>
 8001d88:	4b70      	ldr	r3, [pc, #448]	@ (8001f4c <HAL_RCC_OscConfig+0x4d0>)
 8001d8a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001d8c:	4a6f      	ldr	r2, [pc, #444]	@ (8001f4c <HAL_RCC_OscConfig+0x4d0>)
 8001d8e:	f043 0301 	orr.w	r3, r3, #1
 8001d92:	6713      	str	r3, [r2, #112]	@ 0x70
 8001d94:	e02d      	b.n	8001df2 <HAL_RCC_OscConfig+0x376>
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	689b      	ldr	r3, [r3, #8]
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d10c      	bne.n	8001db8 <HAL_RCC_OscConfig+0x33c>
 8001d9e:	4b6b      	ldr	r3, [pc, #428]	@ (8001f4c <HAL_RCC_OscConfig+0x4d0>)
 8001da0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001da2:	4a6a      	ldr	r2, [pc, #424]	@ (8001f4c <HAL_RCC_OscConfig+0x4d0>)
 8001da4:	f023 0301 	bic.w	r3, r3, #1
 8001da8:	6713      	str	r3, [r2, #112]	@ 0x70
 8001daa:	4b68      	ldr	r3, [pc, #416]	@ (8001f4c <HAL_RCC_OscConfig+0x4d0>)
 8001dac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001dae:	4a67      	ldr	r2, [pc, #412]	@ (8001f4c <HAL_RCC_OscConfig+0x4d0>)
 8001db0:	f023 0304 	bic.w	r3, r3, #4
 8001db4:	6713      	str	r3, [r2, #112]	@ 0x70
 8001db6:	e01c      	b.n	8001df2 <HAL_RCC_OscConfig+0x376>
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	689b      	ldr	r3, [r3, #8]
 8001dbc:	2b05      	cmp	r3, #5
 8001dbe:	d10c      	bne.n	8001dda <HAL_RCC_OscConfig+0x35e>
 8001dc0:	4b62      	ldr	r3, [pc, #392]	@ (8001f4c <HAL_RCC_OscConfig+0x4d0>)
 8001dc2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001dc4:	4a61      	ldr	r2, [pc, #388]	@ (8001f4c <HAL_RCC_OscConfig+0x4d0>)
 8001dc6:	f043 0304 	orr.w	r3, r3, #4
 8001dca:	6713      	str	r3, [r2, #112]	@ 0x70
 8001dcc:	4b5f      	ldr	r3, [pc, #380]	@ (8001f4c <HAL_RCC_OscConfig+0x4d0>)
 8001dce:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001dd0:	4a5e      	ldr	r2, [pc, #376]	@ (8001f4c <HAL_RCC_OscConfig+0x4d0>)
 8001dd2:	f043 0301 	orr.w	r3, r3, #1
 8001dd6:	6713      	str	r3, [r2, #112]	@ 0x70
 8001dd8:	e00b      	b.n	8001df2 <HAL_RCC_OscConfig+0x376>
 8001dda:	4b5c      	ldr	r3, [pc, #368]	@ (8001f4c <HAL_RCC_OscConfig+0x4d0>)
 8001ddc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001dde:	4a5b      	ldr	r2, [pc, #364]	@ (8001f4c <HAL_RCC_OscConfig+0x4d0>)
 8001de0:	f023 0301 	bic.w	r3, r3, #1
 8001de4:	6713      	str	r3, [r2, #112]	@ 0x70
 8001de6:	4b59      	ldr	r3, [pc, #356]	@ (8001f4c <HAL_RCC_OscConfig+0x4d0>)
 8001de8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001dea:	4a58      	ldr	r2, [pc, #352]	@ (8001f4c <HAL_RCC_OscConfig+0x4d0>)
 8001dec:	f023 0304 	bic.w	r3, r3, #4
 8001df0:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	689b      	ldr	r3, [r3, #8]
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d015      	beq.n	8001e26 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001dfa:	f7ff fad7 	bl	80013ac <HAL_GetTick>
 8001dfe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e00:	e00a      	b.n	8001e18 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e02:	f7ff fad3 	bl	80013ac <HAL_GetTick>
 8001e06:	4602      	mov	r2, r0
 8001e08:	693b      	ldr	r3, [r7, #16]
 8001e0a:	1ad3      	subs	r3, r2, r3
 8001e0c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001e10:	4293      	cmp	r3, r2
 8001e12:	d901      	bls.n	8001e18 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8001e14:	2303      	movs	r3, #3
 8001e16:	e0d8      	b.n	8001fca <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e18:	4b4c      	ldr	r3, [pc, #304]	@ (8001f4c <HAL_RCC_OscConfig+0x4d0>)
 8001e1a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001e1c:	f003 0302 	and.w	r3, r3, #2
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d0ee      	beq.n	8001e02 <HAL_RCC_OscConfig+0x386>
 8001e24:	e014      	b.n	8001e50 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e26:	f7ff fac1 	bl	80013ac <HAL_GetTick>
 8001e2a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e2c:	e00a      	b.n	8001e44 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e2e:	f7ff fabd 	bl	80013ac <HAL_GetTick>
 8001e32:	4602      	mov	r2, r0
 8001e34:	693b      	ldr	r3, [r7, #16]
 8001e36:	1ad3      	subs	r3, r2, r3
 8001e38:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001e3c:	4293      	cmp	r3, r2
 8001e3e:	d901      	bls.n	8001e44 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8001e40:	2303      	movs	r3, #3
 8001e42:	e0c2      	b.n	8001fca <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e44:	4b41      	ldr	r3, [pc, #260]	@ (8001f4c <HAL_RCC_OscConfig+0x4d0>)
 8001e46:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001e48:	f003 0302 	and.w	r3, r3, #2
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d1ee      	bne.n	8001e2e <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001e50:	7dfb      	ldrb	r3, [r7, #23]
 8001e52:	2b01      	cmp	r3, #1
 8001e54:	d105      	bne.n	8001e62 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001e56:	4b3d      	ldr	r3, [pc, #244]	@ (8001f4c <HAL_RCC_OscConfig+0x4d0>)
 8001e58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e5a:	4a3c      	ldr	r2, [pc, #240]	@ (8001f4c <HAL_RCC_OscConfig+0x4d0>)
 8001e5c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001e60:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	699b      	ldr	r3, [r3, #24]
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	f000 80ae 	beq.w	8001fc8 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001e6c:	4b37      	ldr	r3, [pc, #220]	@ (8001f4c <HAL_RCC_OscConfig+0x4d0>)
 8001e6e:	689b      	ldr	r3, [r3, #8]
 8001e70:	f003 030c 	and.w	r3, r3, #12
 8001e74:	2b08      	cmp	r3, #8
 8001e76:	d06d      	beq.n	8001f54 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	699b      	ldr	r3, [r3, #24]
 8001e7c:	2b02      	cmp	r3, #2
 8001e7e:	d14b      	bne.n	8001f18 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e80:	4b32      	ldr	r3, [pc, #200]	@ (8001f4c <HAL_RCC_OscConfig+0x4d0>)
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	4a31      	ldr	r2, [pc, #196]	@ (8001f4c <HAL_RCC_OscConfig+0x4d0>)
 8001e86:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001e8a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e8c:	f7ff fa8e 	bl	80013ac <HAL_GetTick>
 8001e90:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001e92:	e008      	b.n	8001ea6 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e94:	f7ff fa8a 	bl	80013ac <HAL_GetTick>
 8001e98:	4602      	mov	r2, r0
 8001e9a:	693b      	ldr	r3, [r7, #16]
 8001e9c:	1ad3      	subs	r3, r2, r3
 8001e9e:	2b02      	cmp	r3, #2
 8001ea0:	d901      	bls.n	8001ea6 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8001ea2:	2303      	movs	r3, #3
 8001ea4:	e091      	b.n	8001fca <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001ea6:	4b29      	ldr	r3, [pc, #164]	@ (8001f4c <HAL_RCC_OscConfig+0x4d0>)
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d1f0      	bne.n	8001e94 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	69da      	ldr	r2, [r3, #28]
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	6a1b      	ldr	r3, [r3, #32]
 8001eba:	431a      	orrs	r2, r3
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ec0:	019b      	lsls	r3, r3, #6
 8001ec2:	431a      	orrs	r2, r3
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ec8:	085b      	lsrs	r3, r3, #1
 8001eca:	3b01      	subs	r3, #1
 8001ecc:	041b      	lsls	r3, r3, #16
 8001ece:	431a      	orrs	r2, r3
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ed4:	061b      	lsls	r3, r3, #24
 8001ed6:	431a      	orrs	r2, r3
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001edc:	071b      	lsls	r3, r3, #28
 8001ede:	491b      	ldr	r1, [pc, #108]	@ (8001f4c <HAL_RCC_OscConfig+0x4d0>)
 8001ee0:	4313      	orrs	r3, r2
 8001ee2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001ee4:	4b19      	ldr	r3, [pc, #100]	@ (8001f4c <HAL_RCC_OscConfig+0x4d0>)
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	4a18      	ldr	r2, [pc, #96]	@ (8001f4c <HAL_RCC_OscConfig+0x4d0>)
 8001eea:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001eee:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ef0:	f7ff fa5c 	bl	80013ac <HAL_GetTick>
 8001ef4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001ef6:	e008      	b.n	8001f0a <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ef8:	f7ff fa58 	bl	80013ac <HAL_GetTick>
 8001efc:	4602      	mov	r2, r0
 8001efe:	693b      	ldr	r3, [r7, #16]
 8001f00:	1ad3      	subs	r3, r2, r3
 8001f02:	2b02      	cmp	r3, #2
 8001f04:	d901      	bls.n	8001f0a <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8001f06:	2303      	movs	r3, #3
 8001f08:	e05f      	b.n	8001fca <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f0a:	4b10      	ldr	r3, [pc, #64]	@ (8001f4c <HAL_RCC_OscConfig+0x4d0>)
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d0f0      	beq.n	8001ef8 <HAL_RCC_OscConfig+0x47c>
 8001f16:	e057      	b.n	8001fc8 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f18:	4b0c      	ldr	r3, [pc, #48]	@ (8001f4c <HAL_RCC_OscConfig+0x4d0>)
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	4a0b      	ldr	r2, [pc, #44]	@ (8001f4c <HAL_RCC_OscConfig+0x4d0>)
 8001f1e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001f22:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f24:	f7ff fa42 	bl	80013ac <HAL_GetTick>
 8001f28:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001f2a:	e008      	b.n	8001f3e <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f2c:	f7ff fa3e 	bl	80013ac <HAL_GetTick>
 8001f30:	4602      	mov	r2, r0
 8001f32:	693b      	ldr	r3, [r7, #16]
 8001f34:	1ad3      	subs	r3, r2, r3
 8001f36:	2b02      	cmp	r3, #2
 8001f38:	d901      	bls.n	8001f3e <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8001f3a:	2303      	movs	r3, #3
 8001f3c:	e045      	b.n	8001fca <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001f3e:	4b03      	ldr	r3, [pc, #12]	@ (8001f4c <HAL_RCC_OscConfig+0x4d0>)
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d1f0      	bne.n	8001f2c <HAL_RCC_OscConfig+0x4b0>
 8001f4a:	e03d      	b.n	8001fc8 <HAL_RCC_OscConfig+0x54c>
 8001f4c:	40023800 	.word	0x40023800
 8001f50:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8001f54:	4b1f      	ldr	r3, [pc, #124]	@ (8001fd4 <HAL_RCC_OscConfig+0x558>)
 8001f56:	685b      	ldr	r3, [r3, #4]
 8001f58:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	699b      	ldr	r3, [r3, #24]
 8001f5e:	2b01      	cmp	r3, #1
 8001f60:	d030      	beq.n	8001fc4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001f6c:	429a      	cmp	r2, r3
 8001f6e:	d129      	bne.n	8001fc4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f7a:	429a      	cmp	r2, r3
 8001f7c:	d122      	bne.n	8001fc4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001f7e:	68fa      	ldr	r2, [r7, #12]
 8001f80:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8001f84:	4013      	ands	r3, r2
 8001f86:	687a      	ldr	r2, [r7, #4]
 8001f88:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001f8a:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001f8c:	4293      	cmp	r3, r2
 8001f8e:	d119      	bne.n	8001fc4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f9a:	085b      	lsrs	r3, r3, #1
 8001f9c:	3b01      	subs	r3, #1
 8001f9e:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001fa0:	429a      	cmp	r2, r3
 8001fa2:	d10f      	bne.n	8001fc4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001fae:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8001fb0:	429a      	cmp	r2, r3
 8001fb2:	d107      	bne.n	8001fc4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fbe:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001fc0:	429a      	cmp	r2, r3
 8001fc2:	d001      	beq.n	8001fc8 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8001fc4:	2301      	movs	r3, #1
 8001fc6:	e000      	b.n	8001fca <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8001fc8:	2300      	movs	r3, #0
}
 8001fca:	4618      	mov	r0, r3
 8001fcc:	3718      	adds	r7, #24
 8001fce:	46bd      	mov	sp, r7
 8001fd0:	bd80      	pop	{r7, pc}
 8001fd2:	bf00      	nop
 8001fd4:	40023800 	.word	0x40023800

08001fd8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001fd8:	b580      	push	{r7, lr}
 8001fda:	b084      	sub	sp, #16
 8001fdc:	af00      	add	r7, sp, #0
 8001fde:	6078      	str	r0, [r7, #4]
 8001fe0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8001fe2:	2300      	movs	r3, #0
 8001fe4:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d101      	bne.n	8001ff0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001fec:	2301      	movs	r3, #1
 8001fee:	e0d0      	b.n	8002192 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001ff0:	4b6a      	ldr	r3, [pc, #424]	@ (800219c <HAL_RCC_ClockConfig+0x1c4>)
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	f003 030f 	and.w	r3, r3, #15
 8001ff8:	683a      	ldr	r2, [r7, #0]
 8001ffa:	429a      	cmp	r2, r3
 8001ffc:	d910      	bls.n	8002020 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ffe:	4b67      	ldr	r3, [pc, #412]	@ (800219c <HAL_RCC_ClockConfig+0x1c4>)
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	f023 020f 	bic.w	r2, r3, #15
 8002006:	4965      	ldr	r1, [pc, #404]	@ (800219c <HAL_RCC_ClockConfig+0x1c4>)
 8002008:	683b      	ldr	r3, [r7, #0]
 800200a:	4313      	orrs	r3, r2
 800200c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800200e:	4b63      	ldr	r3, [pc, #396]	@ (800219c <HAL_RCC_ClockConfig+0x1c4>)
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	f003 030f 	and.w	r3, r3, #15
 8002016:	683a      	ldr	r2, [r7, #0]
 8002018:	429a      	cmp	r2, r3
 800201a:	d001      	beq.n	8002020 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800201c:	2301      	movs	r3, #1
 800201e:	e0b8      	b.n	8002192 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	f003 0302 	and.w	r3, r3, #2
 8002028:	2b00      	cmp	r3, #0
 800202a:	d020      	beq.n	800206e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	f003 0304 	and.w	r3, r3, #4
 8002034:	2b00      	cmp	r3, #0
 8002036:	d005      	beq.n	8002044 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002038:	4b59      	ldr	r3, [pc, #356]	@ (80021a0 <HAL_RCC_ClockConfig+0x1c8>)
 800203a:	689b      	ldr	r3, [r3, #8]
 800203c:	4a58      	ldr	r2, [pc, #352]	@ (80021a0 <HAL_RCC_ClockConfig+0x1c8>)
 800203e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002042:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	f003 0308 	and.w	r3, r3, #8
 800204c:	2b00      	cmp	r3, #0
 800204e:	d005      	beq.n	800205c <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002050:	4b53      	ldr	r3, [pc, #332]	@ (80021a0 <HAL_RCC_ClockConfig+0x1c8>)
 8002052:	689b      	ldr	r3, [r3, #8]
 8002054:	4a52      	ldr	r2, [pc, #328]	@ (80021a0 <HAL_RCC_ClockConfig+0x1c8>)
 8002056:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800205a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800205c:	4b50      	ldr	r3, [pc, #320]	@ (80021a0 <HAL_RCC_ClockConfig+0x1c8>)
 800205e:	689b      	ldr	r3, [r3, #8]
 8002060:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	689b      	ldr	r3, [r3, #8]
 8002068:	494d      	ldr	r1, [pc, #308]	@ (80021a0 <HAL_RCC_ClockConfig+0x1c8>)
 800206a:	4313      	orrs	r3, r2
 800206c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	f003 0301 	and.w	r3, r3, #1
 8002076:	2b00      	cmp	r3, #0
 8002078:	d040      	beq.n	80020fc <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	685b      	ldr	r3, [r3, #4]
 800207e:	2b01      	cmp	r3, #1
 8002080:	d107      	bne.n	8002092 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002082:	4b47      	ldr	r3, [pc, #284]	@ (80021a0 <HAL_RCC_ClockConfig+0x1c8>)
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800208a:	2b00      	cmp	r3, #0
 800208c:	d115      	bne.n	80020ba <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800208e:	2301      	movs	r3, #1
 8002090:	e07f      	b.n	8002192 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	685b      	ldr	r3, [r3, #4]
 8002096:	2b02      	cmp	r3, #2
 8002098:	d107      	bne.n	80020aa <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800209a:	4b41      	ldr	r3, [pc, #260]	@ (80021a0 <HAL_RCC_ClockConfig+0x1c8>)
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d109      	bne.n	80020ba <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80020a6:	2301      	movs	r3, #1
 80020a8:	e073      	b.n	8002192 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80020aa:	4b3d      	ldr	r3, [pc, #244]	@ (80021a0 <HAL_RCC_ClockConfig+0x1c8>)
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	f003 0302 	and.w	r3, r3, #2
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d101      	bne.n	80020ba <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80020b6:	2301      	movs	r3, #1
 80020b8:	e06b      	b.n	8002192 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80020ba:	4b39      	ldr	r3, [pc, #228]	@ (80021a0 <HAL_RCC_ClockConfig+0x1c8>)
 80020bc:	689b      	ldr	r3, [r3, #8]
 80020be:	f023 0203 	bic.w	r2, r3, #3
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	685b      	ldr	r3, [r3, #4]
 80020c6:	4936      	ldr	r1, [pc, #216]	@ (80021a0 <HAL_RCC_ClockConfig+0x1c8>)
 80020c8:	4313      	orrs	r3, r2
 80020ca:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80020cc:	f7ff f96e 	bl	80013ac <HAL_GetTick>
 80020d0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80020d2:	e00a      	b.n	80020ea <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80020d4:	f7ff f96a 	bl	80013ac <HAL_GetTick>
 80020d8:	4602      	mov	r2, r0
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	1ad3      	subs	r3, r2, r3
 80020de:	f241 3288 	movw	r2, #5000	@ 0x1388
 80020e2:	4293      	cmp	r3, r2
 80020e4:	d901      	bls.n	80020ea <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80020e6:	2303      	movs	r3, #3
 80020e8:	e053      	b.n	8002192 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80020ea:	4b2d      	ldr	r3, [pc, #180]	@ (80021a0 <HAL_RCC_ClockConfig+0x1c8>)
 80020ec:	689b      	ldr	r3, [r3, #8]
 80020ee:	f003 020c 	and.w	r2, r3, #12
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	685b      	ldr	r3, [r3, #4]
 80020f6:	009b      	lsls	r3, r3, #2
 80020f8:	429a      	cmp	r2, r3
 80020fa:	d1eb      	bne.n	80020d4 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80020fc:	4b27      	ldr	r3, [pc, #156]	@ (800219c <HAL_RCC_ClockConfig+0x1c4>)
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	f003 030f 	and.w	r3, r3, #15
 8002104:	683a      	ldr	r2, [r7, #0]
 8002106:	429a      	cmp	r2, r3
 8002108:	d210      	bcs.n	800212c <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800210a:	4b24      	ldr	r3, [pc, #144]	@ (800219c <HAL_RCC_ClockConfig+0x1c4>)
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	f023 020f 	bic.w	r2, r3, #15
 8002112:	4922      	ldr	r1, [pc, #136]	@ (800219c <HAL_RCC_ClockConfig+0x1c4>)
 8002114:	683b      	ldr	r3, [r7, #0]
 8002116:	4313      	orrs	r3, r2
 8002118:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800211a:	4b20      	ldr	r3, [pc, #128]	@ (800219c <HAL_RCC_ClockConfig+0x1c4>)
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	f003 030f 	and.w	r3, r3, #15
 8002122:	683a      	ldr	r2, [r7, #0]
 8002124:	429a      	cmp	r2, r3
 8002126:	d001      	beq.n	800212c <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8002128:	2301      	movs	r3, #1
 800212a:	e032      	b.n	8002192 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	f003 0304 	and.w	r3, r3, #4
 8002134:	2b00      	cmp	r3, #0
 8002136:	d008      	beq.n	800214a <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002138:	4b19      	ldr	r3, [pc, #100]	@ (80021a0 <HAL_RCC_ClockConfig+0x1c8>)
 800213a:	689b      	ldr	r3, [r3, #8]
 800213c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	68db      	ldr	r3, [r3, #12]
 8002144:	4916      	ldr	r1, [pc, #88]	@ (80021a0 <HAL_RCC_ClockConfig+0x1c8>)
 8002146:	4313      	orrs	r3, r2
 8002148:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	f003 0308 	and.w	r3, r3, #8
 8002152:	2b00      	cmp	r3, #0
 8002154:	d009      	beq.n	800216a <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002156:	4b12      	ldr	r3, [pc, #72]	@ (80021a0 <HAL_RCC_ClockConfig+0x1c8>)
 8002158:	689b      	ldr	r3, [r3, #8]
 800215a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	691b      	ldr	r3, [r3, #16]
 8002162:	00db      	lsls	r3, r3, #3
 8002164:	490e      	ldr	r1, [pc, #56]	@ (80021a0 <HAL_RCC_ClockConfig+0x1c8>)
 8002166:	4313      	orrs	r3, r2
 8002168:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800216a:	f000 f821 	bl	80021b0 <HAL_RCC_GetSysClockFreq>
 800216e:	4602      	mov	r2, r0
 8002170:	4b0b      	ldr	r3, [pc, #44]	@ (80021a0 <HAL_RCC_ClockConfig+0x1c8>)
 8002172:	689b      	ldr	r3, [r3, #8]
 8002174:	091b      	lsrs	r3, r3, #4
 8002176:	f003 030f 	and.w	r3, r3, #15
 800217a:	490a      	ldr	r1, [pc, #40]	@ (80021a4 <HAL_RCC_ClockConfig+0x1cc>)
 800217c:	5ccb      	ldrb	r3, [r1, r3]
 800217e:	fa22 f303 	lsr.w	r3, r2, r3
 8002182:	4a09      	ldr	r2, [pc, #36]	@ (80021a8 <HAL_RCC_ClockConfig+0x1d0>)
 8002184:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002186:	4b09      	ldr	r3, [pc, #36]	@ (80021ac <HAL_RCC_ClockConfig+0x1d4>)
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	4618      	mov	r0, r3
 800218c:	f7ff f8ca 	bl	8001324 <HAL_InitTick>

  return HAL_OK;
 8002190:	2300      	movs	r3, #0
}
 8002192:	4618      	mov	r0, r3
 8002194:	3710      	adds	r7, #16
 8002196:	46bd      	mov	sp, r7
 8002198:	bd80      	pop	{r7, pc}
 800219a:	bf00      	nop
 800219c:	40023c00 	.word	0x40023c00
 80021a0:	40023800 	.word	0x40023800
 80021a4:	08005c04 	.word	0x08005c04
 80021a8:	20000000 	.word	0x20000000
 80021ac:	20000004 	.word	0x20000004

080021b0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80021b0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80021b4:	b094      	sub	sp, #80	@ 0x50
 80021b6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80021b8:	2300      	movs	r3, #0
 80021ba:	647b      	str	r3, [r7, #68]	@ 0x44
 80021bc:	2300      	movs	r3, #0
 80021be:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80021c0:	2300      	movs	r3, #0
 80021c2:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0;
 80021c4:	2300      	movs	r3, #0
 80021c6:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80021c8:	4b79      	ldr	r3, [pc, #484]	@ (80023b0 <HAL_RCC_GetSysClockFreq+0x200>)
 80021ca:	689b      	ldr	r3, [r3, #8]
 80021cc:	f003 030c 	and.w	r3, r3, #12
 80021d0:	2b08      	cmp	r3, #8
 80021d2:	d00d      	beq.n	80021f0 <HAL_RCC_GetSysClockFreq+0x40>
 80021d4:	2b08      	cmp	r3, #8
 80021d6:	f200 80e1 	bhi.w	800239c <HAL_RCC_GetSysClockFreq+0x1ec>
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d002      	beq.n	80021e4 <HAL_RCC_GetSysClockFreq+0x34>
 80021de:	2b04      	cmp	r3, #4
 80021e0:	d003      	beq.n	80021ea <HAL_RCC_GetSysClockFreq+0x3a>
 80021e2:	e0db      	b.n	800239c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80021e4:	4b73      	ldr	r3, [pc, #460]	@ (80023b4 <HAL_RCC_GetSysClockFreq+0x204>)
 80021e6:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80021e8:	e0db      	b.n	80023a2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80021ea:	4b73      	ldr	r3, [pc, #460]	@ (80023b8 <HAL_RCC_GetSysClockFreq+0x208>)
 80021ec:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80021ee:	e0d8      	b.n	80023a2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80021f0:	4b6f      	ldr	r3, [pc, #444]	@ (80023b0 <HAL_RCC_GetSysClockFreq+0x200>)
 80021f2:	685b      	ldr	r3, [r3, #4]
 80021f4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80021f8:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80021fa:	4b6d      	ldr	r3, [pc, #436]	@ (80023b0 <HAL_RCC_GetSysClockFreq+0x200>)
 80021fc:	685b      	ldr	r3, [r3, #4]
 80021fe:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002202:	2b00      	cmp	r3, #0
 8002204:	d063      	beq.n	80022ce <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002206:	4b6a      	ldr	r3, [pc, #424]	@ (80023b0 <HAL_RCC_GetSysClockFreq+0x200>)
 8002208:	685b      	ldr	r3, [r3, #4]
 800220a:	099b      	lsrs	r3, r3, #6
 800220c:	2200      	movs	r2, #0
 800220e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002210:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8002212:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002214:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002218:	633b      	str	r3, [r7, #48]	@ 0x30
 800221a:	2300      	movs	r3, #0
 800221c:	637b      	str	r3, [r7, #52]	@ 0x34
 800221e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8002222:	4622      	mov	r2, r4
 8002224:	462b      	mov	r3, r5
 8002226:	f04f 0000 	mov.w	r0, #0
 800222a:	f04f 0100 	mov.w	r1, #0
 800222e:	0159      	lsls	r1, r3, #5
 8002230:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002234:	0150      	lsls	r0, r2, #5
 8002236:	4602      	mov	r2, r0
 8002238:	460b      	mov	r3, r1
 800223a:	4621      	mov	r1, r4
 800223c:	1a51      	subs	r1, r2, r1
 800223e:	6139      	str	r1, [r7, #16]
 8002240:	4629      	mov	r1, r5
 8002242:	eb63 0301 	sbc.w	r3, r3, r1
 8002246:	617b      	str	r3, [r7, #20]
 8002248:	f04f 0200 	mov.w	r2, #0
 800224c:	f04f 0300 	mov.w	r3, #0
 8002250:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002254:	4659      	mov	r1, fp
 8002256:	018b      	lsls	r3, r1, #6
 8002258:	4651      	mov	r1, sl
 800225a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800225e:	4651      	mov	r1, sl
 8002260:	018a      	lsls	r2, r1, #6
 8002262:	4651      	mov	r1, sl
 8002264:	ebb2 0801 	subs.w	r8, r2, r1
 8002268:	4659      	mov	r1, fp
 800226a:	eb63 0901 	sbc.w	r9, r3, r1
 800226e:	f04f 0200 	mov.w	r2, #0
 8002272:	f04f 0300 	mov.w	r3, #0
 8002276:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800227a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800227e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002282:	4690      	mov	r8, r2
 8002284:	4699      	mov	r9, r3
 8002286:	4623      	mov	r3, r4
 8002288:	eb18 0303 	adds.w	r3, r8, r3
 800228c:	60bb      	str	r3, [r7, #8]
 800228e:	462b      	mov	r3, r5
 8002290:	eb49 0303 	adc.w	r3, r9, r3
 8002294:	60fb      	str	r3, [r7, #12]
 8002296:	f04f 0200 	mov.w	r2, #0
 800229a:	f04f 0300 	mov.w	r3, #0
 800229e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80022a2:	4629      	mov	r1, r5
 80022a4:	024b      	lsls	r3, r1, #9
 80022a6:	4621      	mov	r1, r4
 80022a8:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80022ac:	4621      	mov	r1, r4
 80022ae:	024a      	lsls	r2, r1, #9
 80022b0:	4610      	mov	r0, r2
 80022b2:	4619      	mov	r1, r3
 80022b4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80022b6:	2200      	movs	r2, #0
 80022b8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80022ba:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80022bc:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80022c0:	f7fe f80e 	bl	80002e0 <__aeabi_uldivmod>
 80022c4:	4602      	mov	r2, r0
 80022c6:	460b      	mov	r3, r1
 80022c8:	4613      	mov	r3, r2
 80022ca:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80022cc:	e058      	b.n	8002380 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80022ce:	4b38      	ldr	r3, [pc, #224]	@ (80023b0 <HAL_RCC_GetSysClockFreq+0x200>)
 80022d0:	685b      	ldr	r3, [r3, #4]
 80022d2:	099b      	lsrs	r3, r3, #6
 80022d4:	2200      	movs	r2, #0
 80022d6:	4618      	mov	r0, r3
 80022d8:	4611      	mov	r1, r2
 80022da:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80022de:	623b      	str	r3, [r7, #32]
 80022e0:	2300      	movs	r3, #0
 80022e2:	627b      	str	r3, [r7, #36]	@ 0x24
 80022e4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80022e8:	4642      	mov	r2, r8
 80022ea:	464b      	mov	r3, r9
 80022ec:	f04f 0000 	mov.w	r0, #0
 80022f0:	f04f 0100 	mov.w	r1, #0
 80022f4:	0159      	lsls	r1, r3, #5
 80022f6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80022fa:	0150      	lsls	r0, r2, #5
 80022fc:	4602      	mov	r2, r0
 80022fe:	460b      	mov	r3, r1
 8002300:	4641      	mov	r1, r8
 8002302:	ebb2 0a01 	subs.w	sl, r2, r1
 8002306:	4649      	mov	r1, r9
 8002308:	eb63 0b01 	sbc.w	fp, r3, r1
 800230c:	f04f 0200 	mov.w	r2, #0
 8002310:	f04f 0300 	mov.w	r3, #0
 8002314:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002318:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800231c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002320:	ebb2 040a 	subs.w	r4, r2, sl
 8002324:	eb63 050b 	sbc.w	r5, r3, fp
 8002328:	f04f 0200 	mov.w	r2, #0
 800232c:	f04f 0300 	mov.w	r3, #0
 8002330:	00eb      	lsls	r3, r5, #3
 8002332:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002336:	00e2      	lsls	r2, r4, #3
 8002338:	4614      	mov	r4, r2
 800233a:	461d      	mov	r5, r3
 800233c:	4643      	mov	r3, r8
 800233e:	18e3      	adds	r3, r4, r3
 8002340:	603b      	str	r3, [r7, #0]
 8002342:	464b      	mov	r3, r9
 8002344:	eb45 0303 	adc.w	r3, r5, r3
 8002348:	607b      	str	r3, [r7, #4]
 800234a:	f04f 0200 	mov.w	r2, #0
 800234e:	f04f 0300 	mov.w	r3, #0
 8002352:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002356:	4629      	mov	r1, r5
 8002358:	028b      	lsls	r3, r1, #10
 800235a:	4621      	mov	r1, r4
 800235c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002360:	4621      	mov	r1, r4
 8002362:	028a      	lsls	r2, r1, #10
 8002364:	4610      	mov	r0, r2
 8002366:	4619      	mov	r1, r3
 8002368:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800236a:	2200      	movs	r2, #0
 800236c:	61bb      	str	r3, [r7, #24]
 800236e:	61fa      	str	r2, [r7, #28]
 8002370:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002374:	f7fd ffb4 	bl	80002e0 <__aeabi_uldivmod>
 8002378:	4602      	mov	r2, r0
 800237a:	460b      	mov	r3, r1
 800237c:	4613      	mov	r3, r2
 800237e:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8002380:	4b0b      	ldr	r3, [pc, #44]	@ (80023b0 <HAL_RCC_GetSysClockFreq+0x200>)
 8002382:	685b      	ldr	r3, [r3, #4]
 8002384:	0c1b      	lsrs	r3, r3, #16
 8002386:	f003 0303 	and.w	r3, r3, #3
 800238a:	3301      	adds	r3, #1
 800238c:	005b      	lsls	r3, r3, #1
 800238e:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8002390:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002392:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002394:	fbb2 f3f3 	udiv	r3, r2, r3
 8002398:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800239a:	e002      	b.n	80023a2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800239c:	4b05      	ldr	r3, [pc, #20]	@ (80023b4 <HAL_RCC_GetSysClockFreq+0x204>)
 800239e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80023a0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80023a2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 80023a4:	4618      	mov	r0, r3
 80023a6:	3750      	adds	r7, #80	@ 0x50
 80023a8:	46bd      	mov	sp, r7
 80023aa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80023ae:	bf00      	nop
 80023b0:	40023800 	.word	0x40023800
 80023b4:	00f42400 	.word	0x00f42400
 80023b8:	007a1200 	.word	0x007a1200

080023bc <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80023bc:	b480      	push	{r7}
 80023be:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80023c0:	4b03      	ldr	r3, [pc, #12]	@ (80023d0 <HAL_RCC_GetHCLKFreq+0x14>)
 80023c2:	681b      	ldr	r3, [r3, #0]
}
 80023c4:	4618      	mov	r0, r3
 80023c6:	46bd      	mov	sp, r7
 80023c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023cc:	4770      	bx	lr
 80023ce:	bf00      	nop
 80023d0:	20000000 	.word	0x20000000

080023d4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80023d4:	b580      	push	{r7, lr}
 80023d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80023d8:	f7ff fff0 	bl	80023bc <HAL_RCC_GetHCLKFreq>
 80023dc:	4602      	mov	r2, r0
 80023de:	4b05      	ldr	r3, [pc, #20]	@ (80023f4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80023e0:	689b      	ldr	r3, [r3, #8]
 80023e2:	0a9b      	lsrs	r3, r3, #10
 80023e4:	f003 0307 	and.w	r3, r3, #7
 80023e8:	4903      	ldr	r1, [pc, #12]	@ (80023f8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80023ea:	5ccb      	ldrb	r3, [r1, r3]
 80023ec:	fa22 f303 	lsr.w	r3, r2, r3
}
 80023f0:	4618      	mov	r0, r3
 80023f2:	bd80      	pop	{r7, pc}
 80023f4:	40023800 	.word	0x40023800
 80023f8:	08005c14 	.word	0x08005c14

080023fc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80023fc:	b580      	push	{r7, lr}
 80023fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002400:	f7ff ffdc 	bl	80023bc <HAL_RCC_GetHCLKFreq>
 8002404:	4602      	mov	r2, r0
 8002406:	4b05      	ldr	r3, [pc, #20]	@ (800241c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002408:	689b      	ldr	r3, [r3, #8]
 800240a:	0b5b      	lsrs	r3, r3, #13
 800240c:	f003 0307 	and.w	r3, r3, #7
 8002410:	4903      	ldr	r1, [pc, #12]	@ (8002420 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002412:	5ccb      	ldrb	r3, [r1, r3]
 8002414:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002418:	4618      	mov	r0, r3
 800241a:	bd80      	pop	{r7, pc}
 800241c:	40023800 	.word	0x40023800
 8002420:	08005c14 	.word	0x08005c14

08002424 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002424:	b580      	push	{r7, lr}
 8002426:	b088      	sub	sp, #32
 8002428:	af00      	add	r7, sp, #0
 800242a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 800242c:	2300      	movs	r3, #0
 800242e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8002430:	2300      	movs	r3, #0
 8002432:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8002434:	2300      	movs	r3, #0
 8002436:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8002438:	2300      	movs	r3, #0
 800243a:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 800243c:	2300      	movs	r3, #0
 800243e:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	f003 0301 	and.w	r3, r3, #1
 8002448:	2b00      	cmp	r3, #0
 800244a:	d012      	beq.n	8002472 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800244c:	4b69      	ldr	r3, [pc, #420]	@ (80025f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800244e:	689b      	ldr	r3, [r3, #8]
 8002450:	4a68      	ldr	r2, [pc, #416]	@ (80025f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002452:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8002456:	6093      	str	r3, [r2, #8]
 8002458:	4b66      	ldr	r3, [pc, #408]	@ (80025f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800245a:	689a      	ldr	r2, [r3, #8]
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002460:	4964      	ldr	r1, [pc, #400]	@ (80025f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002462:	4313      	orrs	r3, r2
 8002464:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800246a:	2b00      	cmp	r3, #0
 800246c:	d101      	bne.n	8002472 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 800246e:	2301      	movs	r3, #1
 8002470:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800247a:	2b00      	cmp	r3, #0
 800247c:	d017      	beq.n	80024ae <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800247e:	4b5d      	ldr	r3, [pc, #372]	@ (80025f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002480:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002484:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800248c:	4959      	ldr	r1, [pc, #356]	@ (80025f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800248e:	4313      	orrs	r3, r2
 8002490:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002498:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800249c:	d101      	bne.n	80024a2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 800249e:	2301      	movs	r3, #1
 80024a0:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d101      	bne.n	80024ae <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 80024aa:	2301      	movs	r3, #1
 80024ac:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d017      	beq.n	80024ea <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80024ba:	4b4e      	ldr	r3, [pc, #312]	@ (80025f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80024bc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80024c0:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024c8:	494a      	ldr	r1, [pc, #296]	@ (80025f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80024ca:	4313      	orrs	r3, r2
 80024cc:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024d4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80024d8:	d101      	bne.n	80024de <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 80024da:	2301      	movs	r3, #1
 80024dc:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d101      	bne.n	80024ea <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 80024e6:	2301      	movs	r3, #1
 80024e8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d001      	beq.n	80024fa <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 80024f6:	2301      	movs	r3, #1
 80024f8:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	f003 0320 	and.w	r3, r3, #32
 8002502:	2b00      	cmp	r3, #0
 8002504:	f000 808b 	beq.w	800261e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002508:	4b3a      	ldr	r3, [pc, #232]	@ (80025f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800250a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800250c:	4a39      	ldr	r2, [pc, #228]	@ (80025f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800250e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002512:	6413      	str	r3, [r2, #64]	@ 0x40
 8002514:	4b37      	ldr	r3, [pc, #220]	@ (80025f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002516:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002518:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800251c:	60bb      	str	r3, [r7, #8]
 800251e:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002520:	4b35      	ldr	r3, [pc, #212]	@ (80025f8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	4a34      	ldr	r2, [pc, #208]	@ (80025f8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002526:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800252a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800252c:	f7fe ff3e 	bl	80013ac <HAL_GetTick>
 8002530:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002532:	e008      	b.n	8002546 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002534:	f7fe ff3a 	bl	80013ac <HAL_GetTick>
 8002538:	4602      	mov	r2, r0
 800253a:	697b      	ldr	r3, [r7, #20]
 800253c:	1ad3      	subs	r3, r2, r3
 800253e:	2b64      	cmp	r3, #100	@ 0x64
 8002540:	d901      	bls.n	8002546 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8002542:	2303      	movs	r3, #3
 8002544:	e38f      	b.n	8002c66 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002546:	4b2c      	ldr	r3, [pc, #176]	@ (80025f8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800254e:	2b00      	cmp	r3, #0
 8002550:	d0f0      	beq.n	8002534 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002552:	4b28      	ldr	r3, [pc, #160]	@ (80025f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002554:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002556:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800255a:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800255c:	693b      	ldr	r3, [r7, #16]
 800255e:	2b00      	cmp	r3, #0
 8002560:	d035      	beq.n	80025ce <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002566:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800256a:	693a      	ldr	r2, [r7, #16]
 800256c:	429a      	cmp	r2, r3
 800256e:	d02e      	beq.n	80025ce <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002570:	4b20      	ldr	r3, [pc, #128]	@ (80025f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002572:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002574:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002578:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800257a:	4b1e      	ldr	r3, [pc, #120]	@ (80025f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800257c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800257e:	4a1d      	ldr	r2, [pc, #116]	@ (80025f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002580:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002584:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002586:	4b1b      	ldr	r3, [pc, #108]	@ (80025f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002588:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800258a:	4a1a      	ldr	r2, [pc, #104]	@ (80025f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800258c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002590:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8002592:	4a18      	ldr	r2, [pc, #96]	@ (80025f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002594:	693b      	ldr	r3, [r7, #16]
 8002596:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002598:	4b16      	ldr	r3, [pc, #88]	@ (80025f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800259a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800259c:	f003 0301 	and.w	r3, r3, #1
 80025a0:	2b01      	cmp	r3, #1
 80025a2:	d114      	bne.n	80025ce <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025a4:	f7fe ff02 	bl	80013ac <HAL_GetTick>
 80025a8:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80025aa:	e00a      	b.n	80025c2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80025ac:	f7fe fefe 	bl	80013ac <HAL_GetTick>
 80025b0:	4602      	mov	r2, r0
 80025b2:	697b      	ldr	r3, [r7, #20]
 80025b4:	1ad3      	subs	r3, r2, r3
 80025b6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80025ba:	4293      	cmp	r3, r2
 80025bc:	d901      	bls.n	80025c2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80025be:	2303      	movs	r3, #3
 80025c0:	e351      	b.n	8002c66 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80025c2:	4b0c      	ldr	r3, [pc, #48]	@ (80025f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80025c4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80025c6:	f003 0302 	and.w	r3, r3, #2
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d0ee      	beq.n	80025ac <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025d2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80025d6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80025da:	d111      	bne.n	8002600 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 80025dc:	4b05      	ldr	r3, [pc, #20]	@ (80025f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80025de:	689b      	ldr	r3, [r3, #8]
 80025e0:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80025e8:	4b04      	ldr	r3, [pc, #16]	@ (80025fc <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80025ea:	400b      	ands	r3, r1
 80025ec:	4901      	ldr	r1, [pc, #4]	@ (80025f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80025ee:	4313      	orrs	r3, r2
 80025f0:	608b      	str	r3, [r1, #8]
 80025f2:	e00b      	b.n	800260c <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 80025f4:	40023800 	.word	0x40023800
 80025f8:	40007000 	.word	0x40007000
 80025fc:	0ffffcff 	.word	0x0ffffcff
 8002600:	4bac      	ldr	r3, [pc, #688]	@ (80028b4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002602:	689b      	ldr	r3, [r3, #8]
 8002604:	4aab      	ldr	r2, [pc, #684]	@ (80028b4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002606:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 800260a:	6093      	str	r3, [r2, #8]
 800260c:	4ba9      	ldr	r3, [pc, #676]	@ (80028b4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800260e:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002614:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002618:	49a6      	ldr	r1, [pc, #664]	@ (80028b4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800261a:	4313      	orrs	r3, r2
 800261c:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	f003 0310 	and.w	r3, r3, #16
 8002626:	2b00      	cmp	r3, #0
 8002628:	d010      	beq.n	800264c <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800262a:	4ba2      	ldr	r3, [pc, #648]	@ (80028b4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800262c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002630:	4aa0      	ldr	r2, [pc, #640]	@ (80028b4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002632:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002636:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800263a:	4b9e      	ldr	r3, [pc, #632]	@ (80028b4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800263c:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002644:	499b      	ldr	r1, [pc, #620]	@ (80028b4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002646:	4313      	orrs	r3, r2
 8002648:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002654:	2b00      	cmp	r3, #0
 8002656:	d00a      	beq.n	800266e <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002658:	4b96      	ldr	r3, [pc, #600]	@ (80028b4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800265a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800265e:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002666:	4993      	ldr	r1, [pc, #588]	@ (80028b4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002668:	4313      	orrs	r3, r2
 800266a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002676:	2b00      	cmp	r3, #0
 8002678:	d00a      	beq.n	8002690 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800267a:	4b8e      	ldr	r3, [pc, #568]	@ (80028b4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800267c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002680:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002688:	498a      	ldr	r1, [pc, #552]	@ (80028b4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800268a:	4313      	orrs	r3, r2
 800268c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002698:	2b00      	cmp	r3, #0
 800269a:	d00a      	beq.n	80026b2 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800269c:	4b85      	ldr	r3, [pc, #532]	@ (80028b4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800269e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80026a2:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80026aa:	4982      	ldr	r1, [pc, #520]	@ (80028b4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80026ac:	4313      	orrs	r3, r2
 80026ae:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d00a      	beq.n	80026d4 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80026be:	4b7d      	ldr	r3, [pc, #500]	@ (80028b4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80026c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80026c4:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80026cc:	4979      	ldr	r1, [pc, #484]	@ (80028b4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80026ce:	4313      	orrs	r3, r2
 80026d0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d00a      	beq.n	80026f6 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80026e0:	4b74      	ldr	r3, [pc, #464]	@ (80028b4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80026e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80026e6:	f023 0203 	bic.w	r2, r3, #3
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80026ee:	4971      	ldr	r1, [pc, #452]	@ (80028b4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80026f0:	4313      	orrs	r3, r2
 80026f2:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d00a      	beq.n	8002718 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002702:	4b6c      	ldr	r3, [pc, #432]	@ (80028b4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002704:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002708:	f023 020c 	bic.w	r2, r3, #12
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002710:	4968      	ldr	r1, [pc, #416]	@ (80028b4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002712:	4313      	orrs	r3, r2
 8002714:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002720:	2b00      	cmp	r3, #0
 8002722:	d00a      	beq.n	800273a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002724:	4b63      	ldr	r3, [pc, #396]	@ (80028b4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002726:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800272a:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002732:	4960      	ldr	r1, [pc, #384]	@ (80028b4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002734:	4313      	orrs	r3, r2
 8002736:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002742:	2b00      	cmp	r3, #0
 8002744:	d00a      	beq.n	800275c <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002746:	4b5b      	ldr	r3, [pc, #364]	@ (80028b4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002748:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800274c:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002754:	4957      	ldr	r1, [pc, #348]	@ (80028b4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002756:	4313      	orrs	r3, r2
 8002758:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002764:	2b00      	cmp	r3, #0
 8002766:	d00a      	beq.n	800277e <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002768:	4b52      	ldr	r3, [pc, #328]	@ (80028b4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800276a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800276e:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002776:	494f      	ldr	r1, [pc, #316]	@ (80028b4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002778:	4313      	orrs	r3, r2
 800277a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002786:	2b00      	cmp	r3, #0
 8002788:	d00a      	beq.n	80027a0 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800278a:	4b4a      	ldr	r3, [pc, #296]	@ (80028b4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800278c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002790:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002798:	4946      	ldr	r1, [pc, #280]	@ (80028b4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800279a:	4313      	orrs	r3, r2
 800279c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d00a      	beq.n	80027c2 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80027ac:	4b41      	ldr	r3, [pc, #260]	@ (80028b4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80027ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80027b2:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80027ba:	493e      	ldr	r1, [pc, #248]	@ (80028b4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80027bc:	4313      	orrs	r3, r2
 80027be:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d00a      	beq.n	80027e4 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80027ce:	4b39      	ldr	r3, [pc, #228]	@ (80028b4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80027d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80027d4:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80027dc:	4935      	ldr	r1, [pc, #212]	@ (80028b4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80027de:	4313      	orrs	r3, r2
 80027e0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d00a      	beq.n	8002806 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80027f0:	4b30      	ldr	r3, [pc, #192]	@ (80028b4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80027f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80027f6:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80027fe:	492d      	ldr	r1, [pc, #180]	@ (80028b4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002800:	4313      	orrs	r3, r2
 8002802:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800280e:	2b00      	cmp	r3, #0
 8002810:	d011      	beq.n	8002836 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8002812:	4b28      	ldr	r3, [pc, #160]	@ (80028b4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002814:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002818:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002820:	4924      	ldr	r1, [pc, #144]	@ (80028b4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002822:	4313      	orrs	r3, r2
 8002824:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800282c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002830:	d101      	bne.n	8002836 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8002832:	2301      	movs	r3, #1
 8002834:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	f003 0308 	and.w	r3, r3, #8
 800283e:	2b00      	cmp	r3, #0
 8002840:	d001      	beq.n	8002846 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8002842:	2301      	movs	r3, #1
 8002844:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800284e:	2b00      	cmp	r3, #0
 8002850:	d00a      	beq.n	8002868 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002852:	4b18      	ldr	r3, [pc, #96]	@ (80028b4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002854:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002858:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002860:	4914      	ldr	r1, [pc, #80]	@ (80028b4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002862:	4313      	orrs	r3, r2
 8002864:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002870:	2b00      	cmp	r3, #0
 8002872:	d00b      	beq.n	800288c <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002874:	4b0f      	ldr	r3, [pc, #60]	@ (80028b4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002876:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800287a:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002884:	490b      	ldr	r1, [pc, #44]	@ (80028b4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002886:	4313      	orrs	r3, r2
 8002888:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002894:	2b00      	cmp	r3, #0
 8002896:	d00f      	beq.n	80028b8 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8002898:	4b06      	ldr	r3, [pc, #24]	@ (80028b4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800289a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800289e:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80028a8:	4902      	ldr	r1, [pc, #8]	@ (80028b4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80028aa:	4313      	orrs	r3, r2
 80028ac:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80028b0:	e002      	b.n	80028b8 <HAL_RCCEx_PeriphCLKConfig+0x494>
 80028b2:	bf00      	nop
 80028b4:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d00b      	beq.n	80028dc <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80028c4:	4b8a      	ldr	r3, [pc, #552]	@ (8002af0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80028c6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80028ca:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80028d4:	4986      	ldr	r1, [pc, #536]	@ (8002af0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80028d6:	4313      	orrs	r3, r2
 80028d8:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d00b      	beq.n	8002900 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 80028e8:	4b81      	ldr	r3, [pc, #516]	@ (8002af0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80028ea:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80028ee:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80028f8:	497d      	ldr	r1, [pc, #500]	@ (8002af0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80028fa:	4313      	orrs	r3, r2
 80028fc:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8002900:	69fb      	ldr	r3, [r7, #28]
 8002902:	2b01      	cmp	r3, #1
 8002904:	d006      	beq.n	8002914 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800290e:	2b00      	cmp	r3, #0
 8002910:	f000 80d6 	beq.w	8002ac0 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002914:	4b76      	ldr	r3, [pc, #472]	@ (8002af0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	4a75      	ldr	r2, [pc, #468]	@ (8002af0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800291a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800291e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002920:	f7fe fd44 	bl	80013ac <HAL_GetTick>
 8002924:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002926:	e008      	b.n	800293a <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002928:	f7fe fd40 	bl	80013ac <HAL_GetTick>
 800292c:	4602      	mov	r2, r0
 800292e:	697b      	ldr	r3, [r7, #20]
 8002930:	1ad3      	subs	r3, r2, r3
 8002932:	2b64      	cmp	r3, #100	@ 0x64
 8002934:	d901      	bls.n	800293a <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002936:	2303      	movs	r3, #3
 8002938:	e195      	b.n	8002c66 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800293a:	4b6d      	ldr	r3, [pc, #436]	@ (8002af0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002942:	2b00      	cmp	r3, #0
 8002944:	d1f0      	bne.n	8002928 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	f003 0301 	and.w	r3, r3, #1
 800294e:	2b00      	cmp	r3, #0
 8002950:	d021      	beq.n	8002996 <HAL_RCCEx_PeriphCLKConfig+0x572>
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002956:	2b00      	cmp	r3, #0
 8002958:	d11d      	bne.n	8002996 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800295a:	4b65      	ldr	r3, [pc, #404]	@ (8002af0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800295c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002960:	0c1b      	lsrs	r3, r3, #16
 8002962:	f003 0303 	and.w	r3, r3, #3
 8002966:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002968:	4b61      	ldr	r3, [pc, #388]	@ (8002af0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800296a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800296e:	0e1b      	lsrs	r3, r3, #24
 8002970:	f003 030f 	and.w	r3, r3, #15
 8002974:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	685b      	ldr	r3, [r3, #4]
 800297a:	019a      	lsls	r2, r3, #6
 800297c:	693b      	ldr	r3, [r7, #16]
 800297e:	041b      	lsls	r3, r3, #16
 8002980:	431a      	orrs	r2, r3
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	061b      	lsls	r3, r3, #24
 8002986:	431a      	orrs	r2, r3
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	689b      	ldr	r3, [r3, #8]
 800298c:	071b      	lsls	r3, r3, #28
 800298e:	4958      	ldr	r1, [pc, #352]	@ (8002af0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002990:	4313      	orrs	r3, r2
 8002992:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d004      	beq.n	80029ac <HAL_RCCEx_PeriphCLKConfig+0x588>
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80029a6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80029aa:	d00a      	beq.n	80029c2 <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d02e      	beq.n	8002a16 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029bc:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80029c0:	d129      	bne.n	8002a16 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80029c2:	4b4b      	ldr	r3, [pc, #300]	@ (8002af0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80029c4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80029c8:	0c1b      	lsrs	r3, r3, #16
 80029ca:	f003 0303 	and.w	r3, r3, #3
 80029ce:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80029d0:	4b47      	ldr	r3, [pc, #284]	@ (8002af0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80029d2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80029d6:	0f1b      	lsrs	r3, r3, #28
 80029d8:	f003 0307 	and.w	r3, r3, #7
 80029dc:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	685b      	ldr	r3, [r3, #4]
 80029e2:	019a      	lsls	r2, r3, #6
 80029e4:	693b      	ldr	r3, [r7, #16]
 80029e6:	041b      	lsls	r3, r3, #16
 80029e8:	431a      	orrs	r2, r3
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	68db      	ldr	r3, [r3, #12]
 80029ee:	061b      	lsls	r3, r3, #24
 80029f0:	431a      	orrs	r2, r3
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	071b      	lsls	r3, r3, #28
 80029f6:	493e      	ldr	r1, [pc, #248]	@ (8002af0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80029f8:	4313      	orrs	r3, r2
 80029fa:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80029fe:	4b3c      	ldr	r3, [pc, #240]	@ (8002af0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002a00:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002a04:	f023 021f 	bic.w	r2, r3, #31
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a0c:	3b01      	subs	r3, #1
 8002a0e:	4938      	ldr	r1, [pc, #224]	@ (8002af0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002a10:	4313      	orrs	r3, r2
 8002a12:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d01d      	beq.n	8002a5e <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002a22:	4b33      	ldr	r3, [pc, #204]	@ (8002af0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002a24:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002a28:	0e1b      	lsrs	r3, r3, #24
 8002a2a:	f003 030f 	and.w	r3, r3, #15
 8002a2e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002a30:	4b2f      	ldr	r3, [pc, #188]	@ (8002af0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002a32:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002a36:	0f1b      	lsrs	r3, r3, #28
 8002a38:	f003 0307 	and.w	r3, r3, #7
 8002a3c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	685b      	ldr	r3, [r3, #4]
 8002a42:	019a      	lsls	r2, r3, #6
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	691b      	ldr	r3, [r3, #16]
 8002a48:	041b      	lsls	r3, r3, #16
 8002a4a:	431a      	orrs	r2, r3
 8002a4c:	693b      	ldr	r3, [r7, #16]
 8002a4e:	061b      	lsls	r3, r3, #24
 8002a50:	431a      	orrs	r2, r3
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	071b      	lsls	r3, r3, #28
 8002a56:	4926      	ldr	r1, [pc, #152]	@ (8002af0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002a58:	4313      	orrs	r3, r2
 8002a5a:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d011      	beq.n	8002a8e <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	685b      	ldr	r3, [r3, #4]
 8002a6e:	019a      	lsls	r2, r3, #6
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	691b      	ldr	r3, [r3, #16]
 8002a74:	041b      	lsls	r3, r3, #16
 8002a76:	431a      	orrs	r2, r3
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	68db      	ldr	r3, [r3, #12]
 8002a7c:	061b      	lsls	r3, r3, #24
 8002a7e:	431a      	orrs	r2, r3
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	689b      	ldr	r3, [r3, #8]
 8002a84:	071b      	lsls	r3, r3, #28
 8002a86:	491a      	ldr	r1, [pc, #104]	@ (8002af0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002a88:	4313      	orrs	r3, r2
 8002a8a:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8002a8e:	4b18      	ldr	r3, [pc, #96]	@ (8002af0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	4a17      	ldr	r2, [pc, #92]	@ (8002af0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002a94:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8002a98:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002a9a:	f7fe fc87 	bl	80013ac <HAL_GetTick>
 8002a9e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002aa0:	e008      	b.n	8002ab4 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002aa2:	f7fe fc83 	bl	80013ac <HAL_GetTick>
 8002aa6:	4602      	mov	r2, r0
 8002aa8:	697b      	ldr	r3, [r7, #20]
 8002aaa:	1ad3      	subs	r3, r2, r3
 8002aac:	2b64      	cmp	r3, #100	@ 0x64
 8002aae:	d901      	bls.n	8002ab4 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002ab0:	2303      	movs	r3, #3
 8002ab2:	e0d8      	b.n	8002c66 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002ab4:	4b0e      	ldr	r3, [pc, #56]	@ (8002af0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d0f0      	beq.n	8002aa2 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8002ac0:	69bb      	ldr	r3, [r7, #24]
 8002ac2:	2b01      	cmp	r3, #1
 8002ac4:	f040 80ce 	bne.w	8002c64 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8002ac8:	4b09      	ldr	r3, [pc, #36]	@ (8002af0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	4a08      	ldr	r2, [pc, #32]	@ (8002af0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002ace:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002ad2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002ad4:	f7fe fc6a 	bl	80013ac <HAL_GetTick>
 8002ad8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002ada:	e00b      	b.n	8002af4 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002adc:	f7fe fc66 	bl	80013ac <HAL_GetTick>
 8002ae0:	4602      	mov	r2, r0
 8002ae2:	697b      	ldr	r3, [r7, #20]
 8002ae4:	1ad3      	subs	r3, r2, r3
 8002ae6:	2b64      	cmp	r3, #100	@ 0x64
 8002ae8:	d904      	bls.n	8002af4 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002aea:	2303      	movs	r3, #3
 8002aec:	e0bb      	b.n	8002c66 <HAL_RCCEx_PeriphCLKConfig+0x842>
 8002aee:	bf00      	nop
 8002af0:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002af4:	4b5e      	ldr	r3, [pc, #376]	@ (8002c70 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002afc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002b00:	d0ec      	beq.n	8002adc <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d003      	beq.n	8002b16 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d009      	beq.n	8002b2a <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d02e      	beq.n	8002b80 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d12a      	bne.n	8002b80 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002b2a:	4b51      	ldr	r3, [pc, #324]	@ (8002c70 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002b2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002b30:	0c1b      	lsrs	r3, r3, #16
 8002b32:	f003 0303 	and.w	r3, r3, #3
 8002b36:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002b38:	4b4d      	ldr	r3, [pc, #308]	@ (8002c70 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002b3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002b3e:	0f1b      	lsrs	r3, r3, #28
 8002b40:	f003 0307 	and.w	r3, r3, #7
 8002b44:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	695b      	ldr	r3, [r3, #20]
 8002b4a:	019a      	lsls	r2, r3, #6
 8002b4c:	693b      	ldr	r3, [r7, #16]
 8002b4e:	041b      	lsls	r3, r3, #16
 8002b50:	431a      	orrs	r2, r3
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	699b      	ldr	r3, [r3, #24]
 8002b56:	061b      	lsls	r3, r3, #24
 8002b58:	431a      	orrs	r2, r3
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	071b      	lsls	r3, r3, #28
 8002b5e:	4944      	ldr	r1, [pc, #272]	@ (8002c70 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002b60:	4313      	orrs	r3, r2
 8002b62:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8002b66:	4b42      	ldr	r3, [pc, #264]	@ (8002c70 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002b68:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002b6c:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b74:	3b01      	subs	r3, #1
 8002b76:	021b      	lsls	r3, r3, #8
 8002b78:	493d      	ldr	r1, [pc, #244]	@ (8002c70 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002b7a:	4313      	orrs	r3, r2
 8002b7c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d022      	beq.n	8002bd2 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002b90:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002b94:	d11d      	bne.n	8002bd2 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002b96:	4b36      	ldr	r3, [pc, #216]	@ (8002c70 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002b98:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002b9c:	0e1b      	lsrs	r3, r3, #24
 8002b9e:	f003 030f 	and.w	r3, r3, #15
 8002ba2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002ba4:	4b32      	ldr	r3, [pc, #200]	@ (8002c70 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002ba6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002baa:	0f1b      	lsrs	r3, r3, #28
 8002bac:	f003 0307 	and.w	r3, r3, #7
 8002bb0:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	695b      	ldr	r3, [r3, #20]
 8002bb6:	019a      	lsls	r2, r3, #6
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	6a1b      	ldr	r3, [r3, #32]
 8002bbc:	041b      	lsls	r3, r3, #16
 8002bbe:	431a      	orrs	r2, r3
 8002bc0:	693b      	ldr	r3, [r7, #16]
 8002bc2:	061b      	lsls	r3, r3, #24
 8002bc4:	431a      	orrs	r2, r3
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	071b      	lsls	r3, r3, #28
 8002bca:	4929      	ldr	r1, [pc, #164]	@ (8002c70 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002bcc:	4313      	orrs	r3, r2
 8002bce:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	f003 0308 	and.w	r3, r3, #8
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d028      	beq.n	8002c30 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002bde:	4b24      	ldr	r3, [pc, #144]	@ (8002c70 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002be0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002be4:	0e1b      	lsrs	r3, r3, #24
 8002be6:	f003 030f 	and.w	r3, r3, #15
 8002bea:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002bec:	4b20      	ldr	r3, [pc, #128]	@ (8002c70 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002bee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002bf2:	0c1b      	lsrs	r3, r3, #16
 8002bf4:	f003 0303 	and.w	r3, r3, #3
 8002bf8:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	695b      	ldr	r3, [r3, #20]
 8002bfe:	019a      	lsls	r2, r3, #6
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	041b      	lsls	r3, r3, #16
 8002c04:	431a      	orrs	r2, r3
 8002c06:	693b      	ldr	r3, [r7, #16]
 8002c08:	061b      	lsls	r3, r3, #24
 8002c0a:	431a      	orrs	r2, r3
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	69db      	ldr	r3, [r3, #28]
 8002c10:	071b      	lsls	r3, r3, #28
 8002c12:	4917      	ldr	r1, [pc, #92]	@ (8002c70 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002c14:	4313      	orrs	r3, r2
 8002c16:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8002c1a:	4b15      	ldr	r3, [pc, #84]	@ (8002c70 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002c1c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002c20:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c28:	4911      	ldr	r1, [pc, #68]	@ (8002c70 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002c2a:	4313      	orrs	r3, r2
 8002c2c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8002c30:	4b0f      	ldr	r3, [pc, #60]	@ (8002c70 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	4a0e      	ldr	r2, [pc, #56]	@ (8002c70 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002c36:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002c3a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002c3c:	f7fe fbb6 	bl	80013ac <HAL_GetTick>
 8002c40:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002c42:	e008      	b.n	8002c56 <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002c44:	f7fe fbb2 	bl	80013ac <HAL_GetTick>
 8002c48:	4602      	mov	r2, r0
 8002c4a:	697b      	ldr	r3, [r7, #20]
 8002c4c:	1ad3      	subs	r3, r2, r3
 8002c4e:	2b64      	cmp	r3, #100	@ 0x64
 8002c50:	d901      	bls.n	8002c56 <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002c52:	2303      	movs	r3, #3
 8002c54:	e007      	b.n	8002c66 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002c56:	4b06      	ldr	r3, [pc, #24]	@ (8002c70 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002c5e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002c62:	d1ef      	bne.n	8002c44 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8002c64:	2300      	movs	r3, #0
}
 8002c66:	4618      	mov	r0, r3
 8002c68:	3720      	adds	r7, #32
 8002c6a:	46bd      	mov	sp, r7
 8002c6c:	bd80      	pop	{r7, pc}
 8002c6e:	bf00      	nop
 8002c70:	40023800 	.word	0x40023800

08002c74 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002c74:	b580      	push	{r7, lr}
 8002c76:	b082      	sub	sp, #8
 8002c78:	af00      	add	r7, sp, #0
 8002c7a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d101      	bne.n	8002c86 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002c82:	2301      	movs	r3, #1
 8002c84:	e049      	b.n	8002d1a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002c8c:	b2db      	uxtb	r3, r3
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d106      	bne.n	8002ca0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	2200      	movs	r2, #0
 8002c96:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002c9a:	6878      	ldr	r0, [r7, #4]
 8002c9c:	f7fe f9a0 	bl	8000fe0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	2202      	movs	r2, #2
 8002ca4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681a      	ldr	r2, [r3, #0]
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	3304      	adds	r3, #4
 8002cb0:	4619      	mov	r1, r3
 8002cb2:	4610      	mov	r0, r2
 8002cb4:	f000 ff68 	bl	8003b88 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	2201      	movs	r2, #1
 8002cbc:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	2201      	movs	r2, #1
 8002cc4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	2201      	movs	r2, #1
 8002ccc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	2201      	movs	r2, #1
 8002cd4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	2201      	movs	r2, #1
 8002cdc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	2201      	movs	r2, #1
 8002ce4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	2201      	movs	r2, #1
 8002cec:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	2201      	movs	r2, #1
 8002cf4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	2201      	movs	r2, #1
 8002cfc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	2201      	movs	r2, #1
 8002d04:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	2201      	movs	r2, #1
 8002d0c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	2201      	movs	r2, #1
 8002d14:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002d18:	2300      	movs	r3, #0
}
 8002d1a:	4618      	mov	r0, r3
 8002d1c:	3708      	adds	r7, #8
 8002d1e:	46bd      	mov	sp, r7
 8002d20:	bd80      	pop	{r7, pc}

08002d22 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002d22:	b580      	push	{r7, lr}
 8002d24:	b082      	sub	sp, #8
 8002d26:	af00      	add	r7, sp, #0
 8002d28:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d101      	bne.n	8002d34 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002d30:	2301      	movs	r3, #1
 8002d32:	e049      	b.n	8002dc8 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002d3a:	b2db      	uxtb	r3, r3
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d106      	bne.n	8002d4e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	2200      	movs	r2, #0
 8002d44:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002d48:	6878      	ldr	r0, [r7, #4]
 8002d4a:	f7fe f995 	bl	8001078 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	2202      	movs	r2, #2
 8002d52:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681a      	ldr	r2, [r3, #0]
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	3304      	adds	r3, #4
 8002d5e:	4619      	mov	r1, r3
 8002d60:	4610      	mov	r0, r2
 8002d62:	f000 ff11 	bl	8003b88 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	2201      	movs	r2, #1
 8002d6a:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	2201      	movs	r2, #1
 8002d72:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	2201      	movs	r2, #1
 8002d7a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	2201      	movs	r2, #1
 8002d82:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	2201      	movs	r2, #1
 8002d8a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	2201      	movs	r2, #1
 8002d92:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	2201      	movs	r2, #1
 8002d9a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	2201      	movs	r2, #1
 8002da2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	2201      	movs	r2, #1
 8002daa:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	2201      	movs	r2, #1
 8002db2:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	2201      	movs	r2, #1
 8002dba:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	2201      	movs	r2, #1
 8002dc2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002dc6:	2300      	movs	r3, #0
}
 8002dc8:	4618      	mov	r0, r3
 8002dca:	3708      	adds	r7, #8
 8002dcc:	46bd      	mov	sp, r7
 8002dce:	bd80      	pop	{r7, pc}

08002dd0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002dd0:	b580      	push	{r7, lr}
 8002dd2:	b084      	sub	sp, #16
 8002dd4:	af00      	add	r7, sp, #0
 8002dd6:	6078      	str	r0, [r7, #4]
 8002dd8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002dda:	683b      	ldr	r3, [r7, #0]
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d109      	bne.n	8002df4 <HAL_TIM_PWM_Start+0x24>
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002de6:	b2db      	uxtb	r3, r3
 8002de8:	2b01      	cmp	r3, #1
 8002dea:	bf14      	ite	ne
 8002dec:	2301      	movne	r3, #1
 8002dee:	2300      	moveq	r3, #0
 8002df0:	b2db      	uxtb	r3, r3
 8002df2:	e03c      	b.n	8002e6e <HAL_TIM_PWM_Start+0x9e>
 8002df4:	683b      	ldr	r3, [r7, #0]
 8002df6:	2b04      	cmp	r3, #4
 8002df8:	d109      	bne.n	8002e0e <HAL_TIM_PWM_Start+0x3e>
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8002e00:	b2db      	uxtb	r3, r3
 8002e02:	2b01      	cmp	r3, #1
 8002e04:	bf14      	ite	ne
 8002e06:	2301      	movne	r3, #1
 8002e08:	2300      	moveq	r3, #0
 8002e0a:	b2db      	uxtb	r3, r3
 8002e0c:	e02f      	b.n	8002e6e <HAL_TIM_PWM_Start+0x9e>
 8002e0e:	683b      	ldr	r3, [r7, #0]
 8002e10:	2b08      	cmp	r3, #8
 8002e12:	d109      	bne.n	8002e28 <HAL_TIM_PWM_Start+0x58>
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002e1a:	b2db      	uxtb	r3, r3
 8002e1c:	2b01      	cmp	r3, #1
 8002e1e:	bf14      	ite	ne
 8002e20:	2301      	movne	r3, #1
 8002e22:	2300      	moveq	r3, #0
 8002e24:	b2db      	uxtb	r3, r3
 8002e26:	e022      	b.n	8002e6e <HAL_TIM_PWM_Start+0x9e>
 8002e28:	683b      	ldr	r3, [r7, #0]
 8002e2a:	2b0c      	cmp	r3, #12
 8002e2c:	d109      	bne.n	8002e42 <HAL_TIM_PWM_Start+0x72>
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002e34:	b2db      	uxtb	r3, r3
 8002e36:	2b01      	cmp	r3, #1
 8002e38:	bf14      	ite	ne
 8002e3a:	2301      	movne	r3, #1
 8002e3c:	2300      	moveq	r3, #0
 8002e3e:	b2db      	uxtb	r3, r3
 8002e40:	e015      	b.n	8002e6e <HAL_TIM_PWM_Start+0x9e>
 8002e42:	683b      	ldr	r3, [r7, #0]
 8002e44:	2b10      	cmp	r3, #16
 8002e46:	d109      	bne.n	8002e5c <HAL_TIM_PWM_Start+0x8c>
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002e4e:	b2db      	uxtb	r3, r3
 8002e50:	2b01      	cmp	r3, #1
 8002e52:	bf14      	ite	ne
 8002e54:	2301      	movne	r3, #1
 8002e56:	2300      	moveq	r3, #0
 8002e58:	b2db      	uxtb	r3, r3
 8002e5a:	e008      	b.n	8002e6e <HAL_TIM_PWM_Start+0x9e>
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8002e62:	b2db      	uxtb	r3, r3
 8002e64:	2b01      	cmp	r3, #1
 8002e66:	bf14      	ite	ne
 8002e68:	2301      	movne	r3, #1
 8002e6a:	2300      	moveq	r3, #0
 8002e6c:	b2db      	uxtb	r3, r3
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d001      	beq.n	8002e76 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8002e72:	2301      	movs	r3, #1
 8002e74:	e092      	b.n	8002f9c <HAL_TIM_PWM_Start+0x1cc>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002e76:	683b      	ldr	r3, [r7, #0]
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d104      	bne.n	8002e86 <HAL_TIM_PWM_Start+0xb6>
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	2202      	movs	r2, #2
 8002e80:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002e84:	e023      	b.n	8002ece <HAL_TIM_PWM_Start+0xfe>
 8002e86:	683b      	ldr	r3, [r7, #0]
 8002e88:	2b04      	cmp	r3, #4
 8002e8a:	d104      	bne.n	8002e96 <HAL_TIM_PWM_Start+0xc6>
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	2202      	movs	r2, #2
 8002e90:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002e94:	e01b      	b.n	8002ece <HAL_TIM_PWM_Start+0xfe>
 8002e96:	683b      	ldr	r3, [r7, #0]
 8002e98:	2b08      	cmp	r3, #8
 8002e9a:	d104      	bne.n	8002ea6 <HAL_TIM_PWM_Start+0xd6>
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	2202      	movs	r2, #2
 8002ea0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002ea4:	e013      	b.n	8002ece <HAL_TIM_PWM_Start+0xfe>
 8002ea6:	683b      	ldr	r3, [r7, #0]
 8002ea8:	2b0c      	cmp	r3, #12
 8002eaa:	d104      	bne.n	8002eb6 <HAL_TIM_PWM_Start+0xe6>
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	2202      	movs	r2, #2
 8002eb0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8002eb4:	e00b      	b.n	8002ece <HAL_TIM_PWM_Start+0xfe>
 8002eb6:	683b      	ldr	r3, [r7, #0]
 8002eb8:	2b10      	cmp	r3, #16
 8002eba:	d104      	bne.n	8002ec6 <HAL_TIM_PWM_Start+0xf6>
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	2202      	movs	r2, #2
 8002ec0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002ec4:	e003      	b.n	8002ece <HAL_TIM_PWM_Start+0xfe>
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	2202      	movs	r2, #2
 8002eca:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	2201      	movs	r2, #1
 8002ed4:	6839      	ldr	r1, [r7, #0]
 8002ed6:	4618      	mov	r0, r3
 8002ed8:	f001 fbb8 	bl	800464c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	4a30      	ldr	r2, [pc, #192]	@ (8002fa4 <HAL_TIM_PWM_Start+0x1d4>)
 8002ee2:	4293      	cmp	r3, r2
 8002ee4:	d004      	beq.n	8002ef0 <HAL_TIM_PWM_Start+0x120>
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	4a2f      	ldr	r2, [pc, #188]	@ (8002fa8 <HAL_TIM_PWM_Start+0x1d8>)
 8002eec:	4293      	cmp	r3, r2
 8002eee:	d101      	bne.n	8002ef4 <HAL_TIM_PWM_Start+0x124>
 8002ef0:	2301      	movs	r3, #1
 8002ef2:	e000      	b.n	8002ef6 <HAL_TIM_PWM_Start+0x126>
 8002ef4:	2300      	movs	r3, #0
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d007      	beq.n	8002f0a <HAL_TIM_PWM_Start+0x13a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002f08:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	4a25      	ldr	r2, [pc, #148]	@ (8002fa4 <HAL_TIM_PWM_Start+0x1d4>)
 8002f10:	4293      	cmp	r3, r2
 8002f12:	d022      	beq.n	8002f5a <HAL_TIM_PWM_Start+0x18a>
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002f1c:	d01d      	beq.n	8002f5a <HAL_TIM_PWM_Start+0x18a>
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	4a22      	ldr	r2, [pc, #136]	@ (8002fac <HAL_TIM_PWM_Start+0x1dc>)
 8002f24:	4293      	cmp	r3, r2
 8002f26:	d018      	beq.n	8002f5a <HAL_TIM_PWM_Start+0x18a>
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	4a20      	ldr	r2, [pc, #128]	@ (8002fb0 <HAL_TIM_PWM_Start+0x1e0>)
 8002f2e:	4293      	cmp	r3, r2
 8002f30:	d013      	beq.n	8002f5a <HAL_TIM_PWM_Start+0x18a>
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	4a1f      	ldr	r2, [pc, #124]	@ (8002fb4 <HAL_TIM_PWM_Start+0x1e4>)
 8002f38:	4293      	cmp	r3, r2
 8002f3a:	d00e      	beq.n	8002f5a <HAL_TIM_PWM_Start+0x18a>
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	4a19      	ldr	r2, [pc, #100]	@ (8002fa8 <HAL_TIM_PWM_Start+0x1d8>)
 8002f42:	4293      	cmp	r3, r2
 8002f44:	d009      	beq.n	8002f5a <HAL_TIM_PWM_Start+0x18a>
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	4a1b      	ldr	r2, [pc, #108]	@ (8002fb8 <HAL_TIM_PWM_Start+0x1e8>)
 8002f4c:	4293      	cmp	r3, r2
 8002f4e:	d004      	beq.n	8002f5a <HAL_TIM_PWM_Start+0x18a>
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	4a19      	ldr	r2, [pc, #100]	@ (8002fbc <HAL_TIM_PWM_Start+0x1ec>)
 8002f56:	4293      	cmp	r3, r2
 8002f58:	d115      	bne.n	8002f86 <HAL_TIM_PWM_Start+0x1b6>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	689a      	ldr	r2, [r3, #8]
 8002f60:	4b17      	ldr	r3, [pc, #92]	@ (8002fc0 <HAL_TIM_PWM_Start+0x1f0>)
 8002f62:	4013      	ands	r3, r2
 8002f64:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	2b06      	cmp	r3, #6
 8002f6a:	d015      	beq.n	8002f98 <HAL_TIM_PWM_Start+0x1c8>
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002f72:	d011      	beq.n	8002f98 <HAL_TIM_PWM_Start+0x1c8>
    {
      __HAL_TIM_ENABLE(htim);
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	681a      	ldr	r2, [r3, #0]
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	f042 0201 	orr.w	r2, r2, #1
 8002f82:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002f84:	e008      	b.n	8002f98 <HAL_TIM_PWM_Start+0x1c8>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	681a      	ldr	r2, [r3, #0]
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	f042 0201 	orr.w	r2, r2, #1
 8002f94:	601a      	str	r2, [r3, #0]
 8002f96:	e000      	b.n	8002f9a <HAL_TIM_PWM_Start+0x1ca>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002f98:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002f9a:	2300      	movs	r3, #0
}
 8002f9c:	4618      	mov	r0, r3
 8002f9e:	3710      	adds	r7, #16
 8002fa0:	46bd      	mov	sp, r7
 8002fa2:	bd80      	pop	{r7, pc}
 8002fa4:	40010000 	.word	0x40010000
 8002fa8:	40010400 	.word	0x40010400
 8002fac:	40000400 	.word	0x40000400
 8002fb0:	40000800 	.word	0x40000800
 8002fb4:	40000c00 	.word	0x40000c00
 8002fb8:	40014000 	.word	0x40014000
 8002fbc:	40001800 	.word	0x40001800
 8002fc0:	00010007 	.word	0x00010007

08002fc4 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8002fc4:	b580      	push	{r7, lr}
 8002fc6:	b082      	sub	sp, #8
 8002fc8:	af00      	add	r7, sp, #0
 8002fca:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d101      	bne.n	8002fd6 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8002fd2:	2301      	movs	r3, #1
 8002fd4:	e049      	b.n	800306a <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002fdc:	b2db      	uxtb	r3, r3
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d106      	bne.n	8002ff0 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	2200      	movs	r2, #0
 8002fe6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8002fea:	6878      	ldr	r0, [r7, #4]
 8002fec:	f000 f841 	bl	8003072 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	2202      	movs	r2, #2
 8002ff4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681a      	ldr	r2, [r3, #0]
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	3304      	adds	r3, #4
 8003000:	4619      	mov	r1, r3
 8003002:	4610      	mov	r0, r2
 8003004:	f000 fdc0 	bl	8003b88 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	2201      	movs	r2, #1
 800300c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	2201      	movs	r2, #1
 8003014:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	2201      	movs	r2, #1
 800301c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	2201      	movs	r2, #1
 8003024:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	2201      	movs	r2, #1
 800302c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	2201      	movs	r2, #1
 8003034:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	2201      	movs	r2, #1
 800303c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	2201      	movs	r2, #1
 8003044:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	2201      	movs	r2, #1
 800304c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	2201      	movs	r2, #1
 8003054:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	2201      	movs	r2, #1
 800305c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	2201      	movs	r2, #1
 8003064:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003068:	2300      	movs	r3, #0
}
 800306a:	4618      	mov	r0, r3
 800306c:	3708      	adds	r7, #8
 800306e:	46bd      	mov	sp, r7
 8003070:	bd80      	pop	{r7, pc}

08003072 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8003072:	b480      	push	{r7}
 8003074:	b083      	sub	sp, #12
 8003076:	af00      	add	r7, sp, #0
 8003078:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 800307a:	bf00      	nop
 800307c:	370c      	adds	r7, #12
 800307e:	46bd      	mov	sp, r7
 8003080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003084:	4770      	bx	lr
	...

08003088 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003088:	b580      	push	{r7, lr}
 800308a:	b084      	sub	sp, #16
 800308c:	af00      	add	r7, sp, #0
 800308e:	6078      	str	r0, [r7, #4]
 8003090:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003092:	2300      	movs	r3, #0
 8003094:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8003096:	683b      	ldr	r3, [r7, #0]
 8003098:	2b00      	cmp	r3, #0
 800309a:	d104      	bne.n	80030a6 <HAL_TIM_IC_Start_IT+0x1e>
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80030a2:	b2db      	uxtb	r3, r3
 80030a4:	e023      	b.n	80030ee <HAL_TIM_IC_Start_IT+0x66>
 80030a6:	683b      	ldr	r3, [r7, #0]
 80030a8:	2b04      	cmp	r3, #4
 80030aa:	d104      	bne.n	80030b6 <HAL_TIM_IC_Start_IT+0x2e>
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80030b2:	b2db      	uxtb	r3, r3
 80030b4:	e01b      	b.n	80030ee <HAL_TIM_IC_Start_IT+0x66>
 80030b6:	683b      	ldr	r3, [r7, #0]
 80030b8:	2b08      	cmp	r3, #8
 80030ba:	d104      	bne.n	80030c6 <HAL_TIM_IC_Start_IT+0x3e>
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80030c2:	b2db      	uxtb	r3, r3
 80030c4:	e013      	b.n	80030ee <HAL_TIM_IC_Start_IT+0x66>
 80030c6:	683b      	ldr	r3, [r7, #0]
 80030c8:	2b0c      	cmp	r3, #12
 80030ca:	d104      	bne.n	80030d6 <HAL_TIM_IC_Start_IT+0x4e>
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80030d2:	b2db      	uxtb	r3, r3
 80030d4:	e00b      	b.n	80030ee <HAL_TIM_IC_Start_IT+0x66>
 80030d6:	683b      	ldr	r3, [r7, #0]
 80030d8:	2b10      	cmp	r3, #16
 80030da:	d104      	bne.n	80030e6 <HAL_TIM_IC_Start_IT+0x5e>
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80030e2:	b2db      	uxtb	r3, r3
 80030e4:	e003      	b.n	80030ee <HAL_TIM_IC_Start_IT+0x66>
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80030ec:	b2db      	uxtb	r3, r3
 80030ee:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 80030f0:	683b      	ldr	r3, [r7, #0]
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d104      	bne.n	8003100 <HAL_TIM_IC_Start_IT+0x78>
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80030fc:	b2db      	uxtb	r3, r3
 80030fe:	e013      	b.n	8003128 <HAL_TIM_IC_Start_IT+0xa0>
 8003100:	683b      	ldr	r3, [r7, #0]
 8003102:	2b04      	cmp	r3, #4
 8003104:	d104      	bne.n	8003110 <HAL_TIM_IC_Start_IT+0x88>
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800310c:	b2db      	uxtb	r3, r3
 800310e:	e00b      	b.n	8003128 <HAL_TIM_IC_Start_IT+0xa0>
 8003110:	683b      	ldr	r3, [r7, #0]
 8003112:	2b08      	cmp	r3, #8
 8003114:	d104      	bne.n	8003120 <HAL_TIM_IC_Start_IT+0x98>
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 800311c:	b2db      	uxtb	r3, r3
 800311e:	e003      	b.n	8003128 <HAL_TIM_IC_Start_IT+0xa0>
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	f893 3047 	ldrb.w	r3, [r3, #71]	@ 0x47
 8003126:	b2db      	uxtb	r3, r3
 8003128:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 800312a:	7bbb      	ldrb	r3, [r7, #14]
 800312c:	2b01      	cmp	r3, #1
 800312e:	d102      	bne.n	8003136 <HAL_TIM_IC_Start_IT+0xae>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8003130:	7b7b      	ldrb	r3, [r7, #13]
 8003132:	2b01      	cmp	r3, #1
 8003134:	d001      	beq.n	800313a <HAL_TIM_IC_Start_IT+0xb2>
  {
    return HAL_ERROR;
 8003136:	2301      	movs	r3, #1
 8003138:	e0e2      	b.n	8003300 <HAL_TIM_IC_Start_IT+0x278>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800313a:	683b      	ldr	r3, [r7, #0]
 800313c:	2b00      	cmp	r3, #0
 800313e:	d104      	bne.n	800314a <HAL_TIM_IC_Start_IT+0xc2>
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	2202      	movs	r2, #2
 8003144:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003148:	e023      	b.n	8003192 <HAL_TIM_IC_Start_IT+0x10a>
 800314a:	683b      	ldr	r3, [r7, #0]
 800314c:	2b04      	cmp	r3, #4
 800314e:	d104      	bne.n	800315a <HAL_TIM_IC_Start_IT+0xd2>
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	2202      	movs	r2, #2
 8003154:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003158:	e01b      	b.n	8003192 <HAL_TIM_IC_Start_IT+0x10a>
 800315a:	683b      	ldr	r3, [r7, #0]
 800315c:	2b08      	cmp	r3, #8
 800315e:	d104      	bne.n	800316a <HAL_TIM_IC_Start_IT+0xe2>
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	2202      	movs	r2, #2
 8003164:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003168:	e013      	b.n	8003192 <HAL_TIM_IC_Start_IT+0x10a>
 800316a:	683b      	ldr	r3, [r7, #0]
 800316c:	2b0c      	cmp	r3, #12
 800316e:	d104      	bne.n	800317a <HAL_TIM_IC_Start_IT+0xf2>
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	2202      	movs	r2, #2
 8003174:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003178:	e00b      	b.n	8003192 <HAL_TIM_IC_Start_IT+0x10a>
 800317a:	683b      	ldr	r3, [r7, #0]
 800317c:	2b10      	cmp	r3, #16
 800317e:	d104      	bne.n	800318a <HAL_TIM_IC_Start_IT+0x102>
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	2202      	movs	r2, #2
 8003184:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003188:	e003      	b.n	8003192 <HAL_TIM_IC_Start_IT+0x10a>
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	2202      	movs	r2, #2
 800318e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003192:	683b      	ldr	r3, [r7, #0]
 8003194:	2b00      	cmp	r3, #0
 8003196:	d104      	bne.n	80031a2 <HAL_TIM_IC_Start_IT+0x11a>
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	2202      	movs	r2, #2
 800319c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80031a0:	e013      	b.n	80031ca <HAL_TIM_IC_Start_IT+0x142>
 80031a2:	683b      	ldr	r3, [r7, #0]
 80031a4:	2b04      	cmp	r3, #4
 80031a6:	d104      	bne.n	80031b2 <HAL_TIM_IC_Start_IT+0x12a>
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	2202      	movs	r2, #2
 80031ac:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80031b0:	e00b      	b.n	80031ca <HAL_TIM_IC_Start_IT+0x142>
 80031b2:	683b      	ldr	r3, [r7, #0]
 80031b4:	2b08      	cmp	r3, #8
 80031b6:	d104      	bne.n	80031c2 <HAL_TIM_IC_Start_IT+0x13a>
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	2202      	movs	r2, #2
 80031bc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80031c0:	e003      	b.n	80031ca <HAL_TIM_IC_Start_IT+0x142>
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	2202      	movs	r2, #2
 80031c6:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  switch (Channel)
 80031ca:	683b      	ldr	r3, [r7, #0]
 80031cc:	2b0c      	cmp	r3, #12
 80031ce:	d841      	bhi.n	8003254 <HAL_TIM_IC_Start_IT+0x1cc>
 80031d0:	a201      	add	r2, pc, #4	@ (adr r2, 80031d8 <HAL_TIM_IC_Start_IT+0x150>)
 80031d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031d6:	bf00      	nop
 80031d8:	0800320d 	.word	0x0800320d
 80031dc:	08003255 	.word	0x08003255
 80031e0:	08003255 	.word	0x08003255
 80031e4:	08003255 	.word	0x08003255
 80031e8:	0800321f 	.word	0x0800321f
 80031ec:	08003255 	.word	0x08003255
 80031f0:	08003255 	.word	0x08003255
 80031f4:	08003255 	.word	0x08003255
 80031f8:	08003231 	.word	0x08003231
 80031fc:	08003255 	.word	0x08003255
 8003200:	08003255 	.word	0x08003255
 8003204:	08003255 	.word	0x08003255
 8003208:	08003243 	.word	0x08003243
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	68da      	ldr	r2, [r3, #12]
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	f042 0202 	orr.w	r2, r2, #2
 800321a:	60da      	str	r2, [r3, #12]
      break;
 800321c:	e01d      	b.n	800325a <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	68da      	ldr	r2, [r3, #12]
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	f042 0204 	orr.w	r2, r2, #4
 800322c:	60da      	str	r2, [r3, #12]
      break;
 800322e:	e014      	b.n	800325a <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	68da      	ldr	r2, [r3, #12]
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	f042 0208 	orr.w	r2, r2, #8
 800323e:	60da      	str	r2, [r3, #12]
      break;
 8003240:	e00b      	b.n	800325a <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	68da      	ldr	r2, [r3, #12]
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	f042 0210 	orr.w	r2, r2, #16
 8003250:	60da      	str	r2, [r3, #12]
      break;
 8003252:	e002      	b.n	800325a <HAL_TIM_IC_Start_IT+0x1d2>
    }

    default:
      status = HAL_ERROR;
 8003254:	2301      	movs	r3, #1
 8003256:	73fb      	strb	r3, [r7, #15]
      break;
 8003258:	bf00      	nop
  }

  if (status == HAL_OK)
 800325a:	7bfb      	ldrb	r3, [r7, #15]
 800325c:	2b00      	cmp	r3, #0
 800325e:	d14e      	bne.n	80032fe <HAL_TIM_IC_Start_IT+0x276>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	2201      	movs	r2, #1
 8003266:	6839      	ldr	r1, [r7, #0]
 8003268:	4618      	mov	r0, r3
 800326a:	f001 f9ef 	bl	800464c <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	4a25      	ldr	r2, [pc, #148]	@ (8003308 <HAL_TIM_IC_Start_IT+0x280>)
 8003274:	4293      	cmp	r3, r2
 8003276:	d022      	beq.n	80032be <HAL_TIM_IC_Start_IT+0x236>
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003280:	d01d      	beq.n	80032be <HAL_TIM_IC_Start_IT+0x236>
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	4a21      	ldr	r2, [pc, #132]	@ (800330c <HAL_TIM_IC_Start_IT+0x284>)
 8003288:	4293      	cmp	r3, r2
 800328a:	d018      	beq.n	80032be <HAL_TIM_IC_Start_IT+0x236>
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	4a1f      	ldr	r2, [pc, #124]	@ (8003310 <HAL_TIM_IC_Start_IT+0x288>)
 8003292:	4293      	cmp	r3, r2
 8003294:	d013      	beq.n	80032be <HAL_TIM_IC_Start_IT+0x236>
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	4a1e      	ldr	r2, [pc, #120]	@ (8003314 <HAL_TIM_IC_Start_IT+0x28c>)
 800329c:	4293      	cmp	r3, r2
 800329e:	d00e      	beq.n	80032be <HAL_TIM_IC_Start_IT+0x236>
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	4a1c      	ldr	r2, [pc, #112]	@ (8003318 <HAL_TIM_IC_Start_IT+0x290>)
 80032a6:	4293      	cmp	r3, r2
 80032a8:	d009      	beq.n	80032be <HAL_TIM_IC_Start_IT+0x236>
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	4a1b      	ldr	r2, [pc, #108]	@ (800331c <HAL_TIM_IC_Start_IT+0x294>)
 80032b0:	4293      	cmp	r3, r2
 80032b2:	d004      	beq.n	80032be <HAL_TIM_IC_Start_IT+0x236>
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	4a19      	ldr	r2, [pc, #100]	@ (8003320 <HAL_TIM_IC_Start_IT+0x298>)
 80032ba:	4293      	cmp	r3, r2
 80032bc:	d115      	bne.n	80032ea <HAL_TIM_IC_Start_IT+0x262>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	689a      	ldr	r2, [r3, #8]
 80032c4:	4b17      	ldr	r3, [pc, #92]	@ (8003324 <HAL_TIM_IC_Start_IT+0x29c>)
 80032c6:	4013      	ands	r3, r2
 80032c8:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80032ca:	68bb      	ldr	r3, [r7, #8]
 80032cc:	2b06      	cmp	r3, #6
 80032ce:	d015      	beq.n	80032fc <HAL_TIM_IC_Start_IT+0x274>
 80032d0:	68bb      	ldr	r3, [r7, #8]
 80032d2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80032d6:	d011      	beq.n	80032fc <HAL_TIM_IC_Start_IT+0x274>
      {
        __HAL_TIM_ENABLE(htim);
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	681a      	ldr	r2, [r3, #0]
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	f042 0201 	orr.w	r2, r2, #1
 80032e6:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80032e8:	e008      	b.n	80032fc <HAL_TIM_IC_Start_IT+0x274>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	681a      	ldr	r2, [r3, #0]
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	f042 0201 	orr.w	r2, r2, #1
 80032f8:	601a      	str	r2, [r3, #0]
 80032fa:	e000      	b.n	80032fe <HAL_TIM_IC_Start_IT+0x276>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80032fc:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 80032fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8003300:	4618      	mov	r0, r3
 8003302:	3710      	adds	r7, #16
 8003304:	46bd      	mov	sp, r7
 8003306:	bd80      	pop	{r7, pc}
 8003308:	40010000 	.word	0x40010000
 800330c:	40000400 	.word	0x40000400
 8003310:	40000800 	.word	0x40000800
 8003314:	40000c00 	.word	0x40000c00
 8003318:	40010400 	.word	0x40010400
 800331c:	40014000 	.word	0x40014000
 8003320:	40001800 	.word	0x40001800
 8003324:	00010007 	.word	0x00010007

08003328 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003328:	b580      	push	{r7, lr}
 800332a:	b084      	sub	sp, #16
 800332c:	af00      	add	r7, sp, #0
 800332e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	68db      	ldr	r3, [r3, #12]
 8003336:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	691b      	ldr	r3, [r3, #16]
 800333e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003340:	68bb      	ldr	r3, [r7, #8]
 8003342:	f003 0302 	and.w	r3, r3, #2
 8003346:	2b00      	cmp	r3, #0
 8003348:	d020      	beq.n	800338c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	f003 0302 	and.w	r3, r3, #2
 8003350:	2b00      	cmp	r3, #0
 8003352:	d01b      	beq.n	800338c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	f06f 0202 	mvn.w	r2, #2
 800335c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	2201      	movs	r2, #1
 8003362:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	699b      	ldr	r3, [r3, #24]
 800336a:	f003 0303 	and.w	r3, r3, #3
 800336e:	2b00      	cmp	r3, #0
 8003370:	d003      	beq.n	800337a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003372:	6878      	ldr	r0, [r7, #4]
 8003374:	f7fd fa74 	bl	8000860 <HAL_TIM_IC_CaptureCallback>
 8003378:	e005      	b.n	8003386 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800337a:	6878      	ldr	r0, [r7, #4]
 800337c:	f000 fbe6 	bl	8003b4c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003380:	6878      	ldr	r0, [r7, #4]
 8003382:	f000 fbed 	bl	8003b60 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	2200      	movs	r2, #0
 800338a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800338c:	68bb      	ldr	r3, [r7, #8]
 800338e:	f003 0304 	and.w	r3, r3, #4
 8003392:	2b00      	cmp	r3, #0
 8003394:	d020      	beq.n	80033d8 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	f003 0304 	and.w	r3, r3, #4
 800339c:	2b00      	cmp	r3, #0
 800339e:	d01b      	beq.n	80033d8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	f06f 0204 	mvn.w	r2, #4
 80033a8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	2202      	movs	r2, #2
 80033ae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	699b      	ldr	r3, [r3, #24]
 80033b6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d003      	beq.n	80033c6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80033be:	6878      	ldr	r0, [r7, #4]
 80033c0:	f7fd fa4e 	bl	8000860 <HAL_TIM_IC_CaptureCallback>
 80033c4:	e005      	b.n	80033d2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80033c6:	6878      	ldr	r0, [r7, #4]
 80033c8:	f000 fbc0 	bl	8003b4c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80033cc:	6878      	ldr	r0, [r7, #4]
 80033ce:	f000 fbc7 	bl	8003b60 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	2200      	movs	r2, #0
 80033d6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80033d8:	68bb      	ldr	r3, [r7, #8]
 80033da:	f003 0308 	and.w	r3, r3, #8
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d020      	beq.n	8003424 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	f003 0308 	and.w	r3, r3, #8
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d01b      	beq.n	8003424 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	f06f 0208 	mvn.w	r2, #8
 80033f4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	2204      	movs	r2, #4
 80033fa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	69db      	ldr	r3, [r3, #28]
 8003402:	f003 0303 	and.w	r3, r3, #3
 8003406:	2b00      	cmp	r3, #0
 8003408:	d003      	beq.n	8003412 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800340a:	6878      	ldr	r0, [r7, #4]
 800340c:	f7fd fa28 	bl	8000860 <HAL_TIM_IC_CaptureCallback>
 8003410:	e005      	b.n	800341e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003412:	6878      	ldr	r0, [r7, #4]
 8003414:	f000 fb9a 	bl	8003b4c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003418:	6878      	ldr	r0, [r7, #4]
 800341a:	f000 fba1 	bl	8003b60 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	2200      	movs	r2, #0
 8003422:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003424:	68bb      	ldr	r3, [r7, #8]
 8003426:	f003 0310 	and.w	r3, r3, #16
 800342a:	2b00      	cmp	r3, #0
 800342c:	d020      	beq.n	8003470 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	f003 0310 	and.w	r3, r3, #16
 8003434:	2b00      	cmp	r3, #0
 8003436:	d01b      	beq.n	8003470 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	f06f 0210 	mvn.w	r2, #16
 8003440:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	2208      	movs	r2, #8
 8003446:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	69db      	ldr	r3, [r3, #28]
 800344e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003452:	2b00      	cmp	r3, #0
 8003454:	d003      	beq.n	800345e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003456:	6878      	ldr	r0, [r7, #4]
 8003458:	f7fd fa02 	bl	8000860 <HAL_TIM_IC_CaptureCallback>
 800345c:	e005      	b.n	800346a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800345e:	6878      	ldr	r0, [r7, #4]
 8003460:	f000 fb74 	bl	8003b4c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003464:	6878      	ldr	r0, [r7, #4]
 8003466:	f000 fb7b 	bl	8003b60 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	2200      	movs	r2, #0
 800346e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003470:	68bb      	ldr	r3, [r7, #8]
 8003472:	f003 0301 	and.w	r3, r3, #1
 8003476:	2b00      	cmp	r3, #0
 8003478:	d00c      	beq.n	8003494 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	f003 0301 	and.w	r3, r3, #1
 8003480:	2b00      	cmp	r3, #0
 8003482:	d007      	beq.n	8003494 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	f06f 0201 	mvn.w	r2, #1
 800348c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800348e:	6878      	ldr	r0, [r7, #4]
 8003490:	f000 fb52 	bl	8003b38 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8003494:	68bb      	ldr	r3, [r7, #8]
 8003496:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800349a:	2b00      	cmp	r3, #0
 800349c:	d104      	bne.n	80034a8 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800349e:	68bb      	ldr	r3, [r7, #8]
 80034a0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d00c      	beq.n	80034c2 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d007      	beq.n	80034c2 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 80034ba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80034bc:	6878      	ldr	r0, [r7, #4]
 80034be:	f001 f983 	bl	80047c8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80034c2:	68bb      	ldr	r3, [r7, #8]
 80034c4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d00c      	beq.n	80034e6 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d007      	beq.n	80034e6 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 80034de:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80034e0:	6878      	ldr	r0, [r7, #4]
 80034e2:	f001 f97b 	bl	80047dc <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80034e6:	68bb      	ldr	r3, [r7, #8]
 80034e8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d00c      	beq.n	800350a <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d007      	beq.n	800350a <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8003502:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003504:	6878      	ldr	r0, [r7, #4]
 8003506:	f000 fb35 	bl	8003b74 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800350a:	68bb      	ldr	r3, [r7, #8]
 800350c:	f003 0320 	and.w	r3, r3, #32
 8003510:	2b00      	cmp	r3, #0
 8003512:	d00c      	beq.n	800352e <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	f003 0320 	and.w	r3, r3, #32
 800351a:	2b00      	cmp	r3, #0
 800351c:	d007      	beq.n	800352e <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	f06f 0220 	mvn.w	r2, #32
 8003526:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003528:	6878      	ldr	r0, [r7, #4]
 800352a:	f001 f943 	bl	80047b4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800352e:	bf00      	nop
 8003530:	3710      	adds	r7, #16
 8003532:	46bd      	mov	sp, r7
 8003534:	bd80      	pop	{r7, pc}

08003536 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8003536:	b580      	push	{r7, lr}
 8003538:	b086      	sub	sp, #24
 800353a:	af00      	add	r7, sp, #0
 800353c:	60f8      	str	r0, [r7, #12]
 800353e:	60b9      	str	r1, [r7, #8]
 8003540:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003542:	2300      	movs	r3, #0
 8003544:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800354c:	2b01      	cmp	r3, #1
 800354e:	d101      	bne.n	8003554 <HAL_TIM_IC_ConfigChannel+0x1e>
 8003550:	2302      	movs	r3, #2
 8003552:	e088      	b.n	8003666 <HAL_TIM_IC_ConfigChannel+0x130>
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	2201      	movs	r2, #1
 8003558:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	2b00      	cmp	r3, #0
 8003560:	d11b      	bne.n	800359a <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8003566:	68bb      	ldr	r3, [r7, #8]
 8003568:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800356a:	68bb      	ldr	r3, [r7, #8]
 800356c:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800356e:	68bb      	ldr	r3, [r7, #8]
 8003570:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 8003572:	f000 fea7 	bl	80042c4 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	699a      	ldr	r2, [r3, #24]
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	f022 020c 	bic.w	r2, r2, #12
 8003584:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	6999      	ldr	r1, [r3, #24]
 800358c:	68bb      	ldr	r3, [r7, #8]
 800358e:	689a      	ldr	r2, [r3, #8]
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	430a      	orrs	r2, r1
 8003596:	619a      	str	r2, [r3, #24]
 8003598:	e060      	b.n	800365c <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	2b04      	cmp	r3, #4
 800359e:	d11c      	bne.n	80035da <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80035a4:	68bb      	ldr	r3, [r7, #8]
 80035a6:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80035a8:	68bb      	ldr	r3, [r7, #8]
 80035aa:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80035ac:	68bb      	ldr	r3, [r7, #8]
 80035ae:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 80035b0:	f000 ff2b 	bl	800440a <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	699a      	ldr	r2, [r3, #24]
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 80035c2:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	6999      	ldr	r1, [r3, #24]
 80035ca:	68bb      	ldr	r3, [r7, #8]
 80035cc:	689b      	ldr	r3, [r3, #8]
 80035ce:	021a      	lsls	r2, r3, #8
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	430a      	orrs	r2, r1
 80035d6:	619a      	str	r2, [r3, #24]
 80035d8:	e040      	b.n	800365c <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	2b08      	cmp	r3, #8
 80035de:	d11b      	bne.n	8003618 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80035e4:	68bb      	ldr	r3, [r7, #8]
 80035e6:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80035e8:	68bb      	ldr	r3, [r7, #8]
 80035ea:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80035ec:	68bb      	ldr	r3, [r7, #8]
 80035ee:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 80035f0:	f000 ff78 	bl	80044e4 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	69da      	ldr	r2, [r3, #28]
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	f022 020c 	bic.w	r2, r2, #12
 8003602:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	69d9      	ldr	r1, [r3, #28]
 800360a:	68bb      	ldr	r3, [r7, #8]
 800360c:	689a      	ldr	r2, [r3, #8]
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	430a      	orrs	r2, r1
 8003614:	61da      	str	r2, [r3, #28]
 8003616:	e021      	b.n	800365c <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	2b0c      	cmp	r3, #12
 800361c:	d11c      	bne.n	8003658 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8003622:	68bb      	ldr	r3, [r7, #8]
 8003624:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8003626:	68bb      	ldr	r3, [r7, #8]
 8003628:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800362a:	68bb      	ldr	r3, [r7, #8]
 800362c:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 800362e:	f000 ff95 	bl	800455c <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	69da      	ldr	r2, [r3, #28]
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8003640:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	69d9      	ldr	r1, [r3, #28]
 8003648:	68bb      	ldr	r3, [r7, #8]
 800364a:	689b      	ldr	r3, [r3, #8]
 800364c:	021a      	lsls	r2, r3, #8
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	430a      	orrs	r2, r1
 8003654:	61da      	str	r2, [r3, #28]
 8003656:	e001      	b.n	800365c <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8003658:	2301      	movs	r3, #1
 800365a:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	2200      	movs	r2, #0
 8003660:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003664:	7dfb      	ldrb	r3, [r7, #23]
}
 8003666:	4618      	mov	r0, r3
 8003668:	3718      	adds	r7, #24
 800366a:	46bd      	mov	sp, r7
 800366c:	bd80      	pop	{r7, pc}
	...

08003670 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003670:	b580      	push	{r7, lr}
 8003672:	b086      	sub	sp, #24
 8003674:	af00      	add	r7, sp, #0
 8003676:	60f8      	str	r0, [r7, #12]
 8003678:	60b9      	str	r1, [r7, #8]
 800367a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800367c:	2300      	movs	r3, #0
 800367e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003686:	2b01      	cmp	r3, #1
 8003688:	d101      	bne.n	800368e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800368a:	2302      	movs	r3, #2
 800368c:	e0ff      	b.n	800388e <HAL_TIM_PWM_ConfigChannel+0x21e>
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	2201      	movs	r2, #1
 8003692:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	2b14      	cmp	r3, #20
 800369a:	f200 80f0 	bhi.w	800387e <HAL_TIM_PWM_ConfigChannel+0x20e>
 800369e:	a201      	add	r2, pc, #4	@ (adr r2, 80036a4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80036a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80036a4:	080036f9 	.word	0x080036f9
 80036a8:	0800387f 	.word	0x0800387f
 80036ac:	0800387f 	.word	0x0800387f
 80036b0:	0800387f 	.word	0x0800387f
 80036b4:	08003739 	.word	0x08003739
 80036b8:	0800387f 	.word	0x0800387f
 80036bc:	0800387f 	.word	0x0800387f
 80036c0:	0800387f 	.word	0x0800387f
 80036c4:	0800377b 	.word	0x0800377b
 80036c8:	0800387f 	.word	0x0800387f
 80036cc:	0800387f 	.word	0x0800387f
 80036d0:	0800387f 	.word	0x0800387f
 80036d4:	080037bb 	.word	0x080037bb
 80036d8:	0800387f 	.word	0x0800387f
 80036dc:	0800387f 	.word	0x0800387f
 80036e0:	0800387f 	.word	0x0800387f
 80036e4:	080037fd 	.word	0x080037fd
 80036e8:	0800387f 	.word	0x0800387f
 80036ec:	0800387f 	.word	0x0800387f
 80036f0:	0800387f 	.word	0x0800387f
 80036f4:	0800383d 	.word	0x0800383d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	68b9      	ldr	r1, [r7, #8]
 80036fe:	4618      	mov	r0, r3
 8003700:	f000 faee 	bl	8003ce0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	699a      	ldr	r2, [r3, #24]
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	f042 0208 	orr.w	r2, r2, #8
 8003712:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	699a      	ldr	r2, [r3, #24]
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	f022 0204 	bic.w	r2, r2, #4
 8003722:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	6999      	ldr	r1, [r3, #24]
 800372a:	68bb      	ldr	r3, [r7, #8]
 800372c:	691a      	ldr	r2, [r3, #16]
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	430a      	orrs	r2, r1
 8003734:	619a      	str	r2, [r3, #24]
      break;
 8003736:	e0a5      	b.n	8003884 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	68b9      	ldr	r1, [r7, #8]
 800373e:	4618      	mov	r0, r3
 8003740:	f000 fb40 	bl	8003dc4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	699a      	ldr	r2, [r3, #24]
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003752:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	699a      	ldr	r2, [r3, #24]
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003762:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	6999      	ldr	r1, [r3, #24]
 800376a:	68bb      	ldr	r3, [r7, #8]
 800376c:	691b      	ldr	r3, [r3, #16]
 800376e:	021a      	lsls	r2, r3, #8
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	430a      	orrs	r2, r1
 8003776:	619a      	str	r2, [r3, #24]
      break;
 8003778:	e084      	b.n	8003884 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	68b9      	ldr	r1, [r7, #8]
 8003780:	4618      	mov	r0, r3
 8003782:	f000 fb97 	bl	8003eb4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	69da      	ldr	r2, [r3, #28]
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	f042 0208 	orr.w	r2, r2, #8
 8003794:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	69da      	ldr	r2, [r3, #28]
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	f022 0204 	bic.w	r2, r2, #4
 80037a4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	69d9      	ldr	r1, [r3, #28]
 80037ac:	68bb      	ldr	r3, [r7, #8]
 80037ae:	691a      	ldr	r2, [r3, #16]
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	430a      	orrs	r2, r1
 80037b6:	61da      	str	r2, [r3, #28]
      break;
 80037b8:	e064      	b.n	8003884 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	68b9      	ldr	r1, [r7, #8]
 80037c0:	4618      	mov	r0, r3
 80037c2:	f000 fbed 	bl	8003fa0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	69da      	ldr	r2, [r3, #28]
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80037d4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	69da      	ldr	r2, [r3, #28]
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80037e4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	69d9      	ldr	r1, [r3, #28]
 80037ec:	68bb      	ldr	r3, [r7, #8]
 80037ee:	691b      	ldr	r3, [r3, #16]
 80037f0:	021a      	lsls	r2, r3, #8
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	430a      	orrs	r2, r1
 80037f8:	61da      	str	r2, [r3, #28]
      break;
 80037fa:	e043      	b.n	8003884 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	68b9      	ldr	r1, [r7, #8]
 8003802:	4618      	mov	r0, r3
 8003804:	f000 fc24 	bl	8004050 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	f042 0208 	orr.w	r2, r2, #8
 8003816:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	f022 0204 	bic.w	r2, r2, #4
 8003826:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800382e:	68bb      	ldr	r3, [r7, #8]
 8003830:	691a      	ldr	r2, [r3, #16]
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	430a      	orrs	r2, r1
 8003838:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800383a:	e023      	b.n	8003884 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	68b9      	ldr	r1, [r7, #8]
 8003842:	4618      	mov	r0, r3
 8003844:	f000 fc56 	bl	80040f4 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003856:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003866:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800386e:	68bb      	ldr	r3, [r7, #8]
 8003870:	691b      	ldr	r3, [r3, #16]
 8003872:	021a      	lsls	r2, r3, #8
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	430a      	orrs	r2, r1
 800387a:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800387c:	e002      	b.n	8003884 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800387e:	2301      	movs	r3, #1
 8003880:	75fb      	strb	r3, [r7, #23]
      break;
 8003882:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	2200      	movs	r2, #0
 8003888:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800388c:	7dfb      	ldrb	r3, [r7, #23]
}
 800388e:	4618      	mov	r0, r3
 8003890:	3718      	adds	r7, #24
 8003892:	46bd      	mov	sp, r7
 8003894:	bd80      	pop	{r7, pc}
 8003896:	bf00      	nop

08003898 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003898:	b580      	push	{r7, lr}
 800389a:	b084      	sub	sp, #16
 800389c:	af00      	add	r7, sp, #0
 800389e:	6078      	str	r0, [r7, #4]
 80038a0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80038a2:	2300      	movs	r3, #0
 80038a4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80038ac:	2b01      	cmp	r3, #1
 80038ae:	d101      	bne.n	80038b4 <HAL_TIM_ConfigClockSource+0x1c>
 80038b0:	2302      	movs	r3, #2
 80038b2:	e0b4      	b.n	8003a1e <HAL_TIM_ConfigClockSource+0x186>
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	2201      	movs	r2, #1
 80038b8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	2202      	movs	r2, #2
 80038c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	689b      	ldr	r3, [r3, #8]
 80038ca:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80038cc:	68ba      	ldr	r2, [r7, #8]
 80038ce:	4b56      	ldr	r3, [pc, #344]	@ (8003a28 <HAL_TIM_ConfigClockSource+0x190>)
 80038d0:	4013      	ands	r3, r2
 80038d2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80038d4:	68bb      	ldr	r3, [r7, #8]
 80038d6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80038da:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	68ba      	ldr	r2, [r7, #8]
 80038e2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80038e4:	683b      	ldr	r3, [r7, #0]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80038ec:	d03e      	beq.n	800396c <HAL_TIM_ConfigClockSource+0xd4>
 80038ee:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80038f2:	f200 8087 	bhi.w	8003a04 <HAL_TIM_ConfigClockSource+0x16c>
 80038f6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80038fa:	f000 8086 	beq.w	8003a0a <HAL_TIM_ConfigClockSource+0x172>
 80038fe:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003902:	d87f      	bhi.n	8003a04 <HAL_TIM_ConfigClockSource+0x16c>
 8003904:	2b70      	cmp	r3, #112	@ 0x70
 8003906:	d01a      	beq.n	800393e <HAL_TIM_ConfigClockSource+0xa6>
 8003908:	2b70      	cmp	r3, #112	@ 0x70
 800390a:	d87b      	bhi.n	8003a04 <HAL_TIM_ConfigClockSource+0x16c>
 800390c:	2b60      	cmp	r3, #96	@ 0x60
 800390e:	d050      	beq.n	80039b2 <HAL_TIM_ConfigClockSource+0x11a>
 8003910:	2b60      	cmp	r3, #96	@ 0x60
 8003912:	d877      	bhi.n	8003a04 <HAL_TIM_ConfigClockSource+0x16c>
 8003914:	2b50      	cmp	r3, #80	@ 0x50
 8003916:	d03c      	beq.n	8003992 <HAL_TIM_ConfigClockSource+0xfa>
 8003918:	2b50      	cmp	r3, #80	@ 0x50
 800391a:	d873      	bhi.n	8003a04 <HAL_TIM_ConfigClockSource+0x16c>
 800391c:	2b40      	cmp	r3, #64	@ 0x40
 800391e:	d058      	beq.n	80039d2 <HAL_TIM_ConfigClockSource+0x13a>
 8003920:	2b40      	cmp	r3, #64	@ 0x40
 8003922:	d86f      	bhi.n	8003a04 <HAL_TIM_ConfigClockSource+0x16c>
 8003924:	2b30      	cmp	r3, #48	@ 0x30
 8003926:	d064      	beq.n	80039f2 <HAL_TIM_ConfigClockSource+0x15a>
 8003928:	2b30      	cmp	r3, #48	@ 0x30
 800392a:	d86b      	bhi.n	8003a04 <HAL_TIM_ConfigClockSource+0x16c>
 800392c:	2b20      	cmp	r3, #32
 800392e:	d060      	beq.n	80039f2 <HAL_TIM_ConfigClockSource+0x15a>
 8003930:	2b20      	cmp	r3, #32
 8003932:	d867      	bhi.n	8003a04 <HAL_TIM_ConfigClockSource+0x16c>
 8003934:	2b00      	cmp	r3, #0
 8003936:	d05c      	beq.n	80039f2 <HAL_TIM_ConfigClockSource+0x15a>
 8003938:	2b10      	cmp	r3, #16
 800393a:	d05a      	beq.n	80039f2 <HAL_TIM_ConfigClockSource+0x15a>
 800393c:	e062      	b.n	8003a04 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003942:	683b      	ldr	r3, [r7, #0]
 8003944:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003946:	683b      	ldr	r3, [r7, #0]
 8003948:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800394a:	683b      	ldr	r3, [r7, #0]
 800394c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800394e:	f000 fe5d 	bl	800460c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	689b      	ldr	r3, [r3, #8]
 8003958:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800395a:	68bb      	ldr	r3, [r7, #8]
 800395c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8003960:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	68ba      	ldr	r2, [r7, #8]
 8003968:	609a      	str	r2, [r3, #8]
      break;
 800396a:	e04f      	b.n	8003a0c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003970:	683b      	ldr	r3, [r7, #0]
 8003972:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003974:	683b      	ldr	r3, [r7, #0]
 8003976:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003978:	683b      	ldr	r3, [r7, #0]
 800397a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800397c:	f000 fe46 	bl	800460c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	689a      	ldr	r2, [r3, #8]
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800398e:	609a      	str	r2, [r3, #8]
      break;
 8003990:	e03c      	b.n	8003a0c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003996:	683b      	ldr	r3, [r7, #0]
 8003998:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800399a:	683b      	ldr	r3, [r7, #0]
 800399c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800399e:	461a      	mov	r2, r3
 80039a0:	f000 fd04 	bl	80043ac <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	2150      	movs	r1, #80	@ 0x50
 80039aa:	4618      	mov	r0, r3
 80039ac:	f000 fe13 	bl	80045d6 <TIM_ITRx_SetConfig>
      break;
 80039b0:	e02c      	b.n	8003a0c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80039b6:	683b      	ldr	r3, [r7, #0]
 80039b8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80039ba:	683b      	ldr	r3, [r7, #0]
 80039bc:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80039be:	461a      	mov	r2, r3
 80039c0:	f000 fd60 	bl	8004484 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	2160      	movs	r1, #96	@ 0x60
 80039ca:	4618      	mov	r0, r3
 80039cc:	f000 fe03 	bl	80045d6 <TIM_ITRx_SetConfig>
      break;
 80039d0:	e01c      	b.n	8003a0c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80039d6:	683b      	ldr	r3, [r7, #0]
 80039d8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80039da:	683b      	ldr	r3, [r7, #0]
 80039dc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80039de:	461a      	mov	r2, r3
 80039e0:	f000 fce4 	bl	80043ac <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	2140      	movs	r1, #64	@ 0x40
 80039ea:	4618      	mov	r0, r3
 80039ec:	f000 fdf3 	bl	80045d6 <TIM_ITRx_SetConfig>
      break;
 80039f0:	e00c      	b.n	8003a0c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681a      	ldr	r2, [r3, #0]
 80039f6:	683b      	ldr	r3, [r7, #0]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	4619      	mov	r1, r3
 80039fc:	4610      	mov	r0, r2
 80039fe:	f000 fdea 	bl	80045d6 <TIM_ITRx_SetConfig>
      break;
 8003a02:	e003      	b.n	8003a0c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003a04:	2301      	movs	r3, #1
 8003a06:	73fb      	strb	r3, [r7, #15]
      break;
 8003a08:	e000      	b.n	8003a0c <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003a0a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	2201      	movs	r2, #1
 8003a10:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	2200      	movs	r2, #0
 8003a18:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003a1c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a1e:	4618      	mov	r0, r3
 8003a20:	3710      	adds	r7, #16
 8003a22:	46bd      	mov	sp, r7
 8003a24:	bd80      	pop	{r7, pc}
 8003a26:	bf00      	nop
 8003a28:	fffeff88 	.word	0xfffeff88

08003a2c <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8003a2c:	b580      	push	{r7, lr}
 8003a2e:	b082      	sub	sp, #8
 8003a30:	af00      	add	r7, sp, #0
 8003a32:	6078      	str	r0, [r7, #4]
 8003a34:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003a3c:	2b01      	cmp	r3, #1
 8003a3e:	d101      	bne.n	8003a44 <HAL_TIM_SlaveConfigSynchro+0x18>
 8003a40:	2302      	movs	r3, #2
 8003a42:	e031      	b.n	8003aa8 <HAL_TIM_SlaveConfigSynchro+0x7c>
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	2201      	movs	r2, #1
 8003a48:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	2202      	movs	r2, #2
 8003a50:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8003a54:	6839      	ldr	r1, [r7, #0]
 8003a56:	6878      	ldr	r0, [r7, #4]
 8003a58:	f000 fba0 	bl	800419c <TIM_SlaveTimer_SetConfig>
 8003a5c:	4603      	mov	r3, r0
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d009      	beq.n	8003a76 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	2201      	movs	r2, #1
 8003a66:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    __HAL_UNLOCK(htim);
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	2200      	movs	r2, #0
 8003a6e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    return HAL_ERROR;
 8003a72:	2301      	movs	r3, #1
 8003a74:	e018      	b.n	8003aa8 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	68da      	ldr	r2, [r3, #12]
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003a84:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	68da      	ldr	r2, [r3, #12]
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8003a94:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	2201      	movs	r2, #1
 8003a9a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	2200      	movs	r2, #0
 8003aa2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003aa6:	2300      	movs	r3, #0
}
 8003aa8:	4618      	mov	r0, r3
 8003aaa:	3708      	adds	r7, #8
 8003aac:	46bd      	mov	sp, r7
 8003aae:	bd80      	pop	{r7, pc}

08003ab0 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003ab0:	b480      	push	{r7}
 8003ab2:	b085      	sub	sp, #20
 8003ab4:	af00      	add	r7, sp, #0
 8003ab6:	6078      	str	r0, [r7, #4]
 8003ab8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8003aba:	2300      	movs	r3, #0
 8003abc:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 8003abe:	683b      	ldr	r3, [r7, #0]
 8003ac0:	2b0c      	cmp	r3, #12
 8003ac2:	d831      	bhi.n	8003b28 <HAL_TIM_ReadCapturedValue+0x78>
 8003ac4:	a201      	add	r2, pc, #4	@ (adr r2, 8003acc <HAL_TIM_ReadCapturedValue+0x1c>)
 8003ac6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003aca:	bf00      	nop
 8003acc:	08003b01 	.word	0x08003b01
 8003ad0:	08003b29 	.word	0x08003b29
 8003ad4:	08003b29 	.word	0x08003b29
 8003ad8:	08003b29 	.word	0x08003b29
 8003adc:	08003b0b 	.word	0x08003b0b
 8003ae0:	08003b29 	.word	0x08003b29
 8003ae4:	08003b29 	.word	0x08003b29
 8003ae8:	08003b29 	.word	0x08003b29
 8003aec:	08003b15 	.word	0x08003b15
 8003af0:	08003b29 	.word	0x08003b29
 8003af4:	08003b29 	.word	0x08003b29
 8003af8:	08003b29 	.word	0x08003b29
 8003afc:	08003b1f 	.word	0x08003b1f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003b06:	60fb      	str	r3, [r7, #12]

      break;
 8003b08:	e00f      	b.n	8003b2a <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003b10:	60fb      	str	r3, [r7, #12]

      break;
 8003b12:	e00a      	b.n	8003b2a <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003b1a:	60fb      	str	r3, [r7, #12]

      break;
 8003b1c:	e005      	b.n	8003b2a <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b24:	60fb      	str	r3, [r7, #12]

      break;
 8003b26:	e000      	b.n	8003b2a <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8003b28:	bf00      	nop
  }

  return tmpreg;
 8003b2a:	68fb      	ldr	r3, [r7, #12]
}
 8003b2c:	4618      	mov	r0, r3
 8003b2e:	3714      	adds	r7, #20
 8003b30:	46bd      	mov	sp, r7
 8003b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b36:	4770      	bx	lr

08003b38 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003b38:	b480      	push	{r7}
 8003b3a:	b083      	sub	sp, #12
 8003b3c:	af00      	add	r7, sp, #0
 8003b3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8003b40:	bf00      	nop
 8003b42:	370c      	adds	r7, #12
 8003b44:	46bd      	mov	sp, r7
 8003b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b4a:	4770      	bx	lr

08003b4c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003b4c:	b480      	push	{r7}
 8003b4e:	b083      	sub	sp, #12
 8003b50:	af00      	add	r7, sp, #0
 8003b52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003b54:	bf00      	nop
 8003b56:	370c      	adds	r7, #12
 8003b58:	46bd      	mov	sp, r7
 8003b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b5e:	4770      	bx	lr

08003b60 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003b60:	b480      	push	{r7}
 8003b62:	b083      	sub	sp, #12
 8003b64:	af00      	add	r7, sp, #0
 8003b66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003b68:	bf00      	nop
 8003b6a:	370c      	adds	r7, #12
 8003b6c:	46bd      	mov	sp, r7
 8003b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b72:	4770      	bx	lr

08003b74 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003b74:	b480      	push	{r7}
 8003b76:	b083      	sub	sp, #12
 8003b78:	af00      	add	r7, sp, #0
 8003b7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003b7c:	bf00      	nop
 8003b7e:	370c      	adds	r7, #12
 8003b80:	46bd      	mov	sp, r7
 8003b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b86:	4770      	bx	lr

08003b88 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003b88:	b480      	push	{r7}
 8003b8a:	b085      	sub	sp, #20
 8003b8c:	af00      	add	r7, sp, #0
 8003b8e:	6078      	str	r0, [r7, #4]
 8003b90:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	4a46      	ldr	r2, [pc, #280]	@ (8003cb4 <TIM_Base_SetConfig+0x12c>)
 8003b9c:	4293      	cmp	r3, r2
 8003b9e:	d013      	beq.n	8003bc8 <TIM_Base_SetConfig+0x40>
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003ba6:	d00f      	beq.n	8003bc8 <TIM_Base_SetConfig+0x40>
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	4a43      	ldr	r2, [pc, #268]	@ (8003cb8 <TIM_Base_SetConfig+0x130>)
 8003bac:	4293      	cmp	r3, r2
 8003bae:	d00b      	beq.n	8003bc8 <TIM_Base_SetConfig+0x40>
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	4a42      	ldr	r2, [pc, #264]	@ (8003cbc <TIM_Base_SetConfig+0x134>)
 8003bb4:	4293      	cmp	r3, r2
 8003bb6:	d007      	beq.n	8003bc8 <TIM_Base_SetConfig+0x40>
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	4a41      	ldr	r2, [pc, #260]	@ (8003cc0 <TIM_Base_SetConfig+0x138>)
 8003bbc:	4293      	cmp	r3, r2
 8003bbe:	d003      	beq.n	8003bc8 <TIM_Base_SetConfig+0x40>
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	4a40      	ldr	r2, [pc, #256]	@ (8003cc4 <TIM_Base_SetConfig+0x13c>)
 8003bc4:	4293      	cmp	r3, r2
 8003bc6:	d108      	bne.n	8003bda <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003bce:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003bd0:	683b      	ldr	r3, [r7, #0]
 8003bd2:	685b      	ldr	r3, [r3, #4]
 8003bd4:	68fa      	ldr	r2, [r7, #12]
 8003bd6:	4313      	orrs	r3, r2
 8003bd8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	4a35      	ldr	r2, [pc, #212]	@ (8003cb4 <TIM_Base_SetConfig+0x12c>)
 8003bde:	4293      	cmp	r3, r2
 8003be0:	d02b      	beq.n	8003c3a <TIM_Base_SetConfig+0xb2>
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003be8:	d027      	beq.n	8003c3a <TIM_Base_SetConfig+0xb2>
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	4a32      	ldr	r2, [pc, #200]	@ (8003cb8 <TIM_Base_SetConfig+0x130>)
 8003bee:	4293      	cmp	r3, r2
 8003bf0:	d023      	beq.n	8003c3a <TIM_Base_SetConfig+0xb2>
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	4a31      	ldr	r2, [pc, #196]	@ (8003cbc <TIM_Base_SetConfig+0x134>)
 8003bf6:	4293      	cmp	r3, r2
 8003bf8:	d01f      	beq.n	8003c3a <TIM_Base_SetConfig+0xb2>
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	4a30      	ldr	r2, [pc, #192]	@ (8003cc0 <TIM_Base_SetConfig+0x138>)
 8003bfe:	4293      	cmp	r3, r2
 8003c00:	d01b      	beq.n	8003c3a <TIM_Base_SetConfig+0xb2>
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	4a2f      	ldr	r2, [pc, #188]	@ (8003cc4 <TIM_Base_SetConfig+0x13c>)
 8003c06:	4293      	cmp	r3, r2
 8003c08:	d017      	beq.n	8003c3a <TIM_Base_SetConfig+0xb2>
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	4a2e      	ldr	r2, [pc, #184]	@ (8003cc8 <TIM_Base_SetConfig+0x140>)
 8003c0e:	4293      	cmp	r3, r2
 8003c10:	d013      	beq.n	8003c3a <TIM_Base_SetConfig+0xb2>
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	4a2d      	ldr	r2, [pc, #180]	@ (8003ccc <TIM_Base_SetConfig+0x144>)
 8003c16:	4293      	cmp	r3, r2
 8003c18:	d00f      	beq.n	8003c3a <TIM_Base_SetConfig+0xb2>
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	4a2c      	ldr	r2, [pc, #176]	@ (8003cd0 <TIM_Base_SetConfig+0x148>)
 8003c1e:	4293      	cmp	r3, r2
 8003c20:	d00b      	beq.n	8003c3a <TIM_Base_SetConfig+0xb2>
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	4a2b      	ldr	r2, [pc, #172]	@ (8003cd4 <TIM_Base_SetConfig+0x14c>)
 8003c26:	4293      	cmp	r3, r2
 8003c28:	d007      	beq.n	8003c3a <TIM_Base_SetConfig+0xb2>
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	4a2a      	ldr	r2, [pc, #168]	@ (8003cd8 <TIM_Base_SetConfig+0x150>)
 8003c2e:	4293      	cmp	r3, r2
 8003c30:	d003      	beq.n	8003c3a <TIM_Base_SetConfig+0xb2>
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	4a29      	ldr	r2, [pc, #164]	@ (8003cdc <TIM_Base_SetConfig+0x154>)
 8003c36:	4293      	cmp	r3, r2
 8003c38:	d108      	bne.n	8003c4c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003c40:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003c42:	683b      	ldr	r3, [r7, #0]
 8003c44:	68db      	ldr	r3, [r3, #12]
 8003c46:	68fa      	ldr	r2, [r7, #12]
 8003c48:	4313      	orrs	r3, r2
 8003c4a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003c52:	683b      	ldr	r3, [r7, #0]
 8003c54:	695b      	ldr	r3, [r3, #20]
 8003c56:	4313      	orrs	r3, r2
 8003c58:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	68fa      	ldr	r2, [r7, #12]
 8003c5e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003c60:	683b      	ldr	r3, [r7, #0]
 8003c62:	689a      	ldr	r2, [r3, #8]
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003c68:	683b      	ldr	r3, [r7, #0]
 8003c6a:	681a      	ldr	r2, [r3, #0]
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	4a10      	ldr	r2, [pc, #64]	@ (8003cb4 <TIM_Base_SetConfig+0x12c>)
 8003c74:	4293      	cmp	r3, r2
 8003c76:	d003      	beq.n	8003c80 <TIM_Base_SetConfig+0xf8>
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	4a12      	ldr	r2, [pc, #72]	@ (8003cc4 <TIM_Base_SetConfig+0x13c>)
 8003c7c:	4293      	cmp	r3, r2
 8003c7e:	d103      	bne.n	8003c88 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003c80:	683b      	ldr	r3, [r7, #0]
 8003c82:	691a      	ldr	r2, [r3, #16]
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	2201      	movs	r2, #1
 8003c8c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	691b      	ldr	r3, [r3, #16]
 8003c92:	f003 0301 	and.w	r3, r3, #1
 8003c96:	2b01      	cmp	r3, #1
 8003c98:	d105      	bne.n	8003ca6 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	691b      	ldr	r3, [r3, #16]
 8003c9e:	f023 0201 	bic.w	r2, r3, #1
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	611a      	str	r2, [r3, #16]
  }
}
 8003ca6:	bf00      	nop
 8003ca8:	3714      	adds	r7, #20
 8003caa:	46bd      	mov	sp, r7
 8003cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb0:	4770      	bx	lr
 8003cb2:	bf00      	nop
 8003cb4:	40010000 	.word	0x40010000
 8003cb8:	40000400 	.word	0x40000400
 8003cbc:	40000800 	.word	0x40000800
 8003cc0:	40000c00 	.word	0x40000c00
 8003cc4:	40010400 	.word	0x40010400
 8003cc8:	40014000 	.word	0x40014000
 8003ccc:	40014400 	.word	0x40014400
 8003cd0:	40014800 	.word	0x40014800
 8003cd4:	40001800 	.word	0x40001800
 8003cd8:	40001c00 	.word	0x40001c00
 8003cdc:	40002000 	.word	0x40002000

08003ce0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003ce0:	b480      	push	{r7}
 8003ce2:	b087      	sub	sp, #28
 8003ce4:	af00      	add	r7, sp, #0
 8003ce6:	6078      	str	r0, [r7, #4]
 8003ce8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	6a1b      	ldr	r3, [r3, #32]
 8003cee:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	6a1b      	ldr	r3, [r3, #32]
 8003cf4:	f023 0201 	bic.w	r2, r3, #1
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	685b      	ldr	r3, [r3, #4]
 8003d00:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	699b      	ldr	r3, [r3, #24]
 8003d06:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003d08:	68fa      	ldr	r2, [r7, #12]
 8003d0a:	4b2b      	ldr	r3, [pc, #172]	@ (8003db8 <TIM_OC1_SetConfig+0xd8>)
 8003d0c:	4013      	ands	r3, r2
 8003d0e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	f023 0303 	bic.w	r3, r3, #3
 8003d16:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003d18:	683b      	ldr	r3, [r7, #0]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	68fa      	ldr	r2, [r7, #12]
 8003d1e:	4313      	orrs	r3, r2
 8003d20:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003d22:	697b      	ldr	r3, [r7, #20]
 8003d24:	f023 0302 	bic.w	r3, r3, #2
 8003d28:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003d2a:	683b      	ldr	r3, [r7, #0]
 8003d2c:	689b      	ldr	r3, [r3, #8]
 8003d2e:	697a      	ldr	r2, [r7, #20]
 8003d30:	4313      	orrs	r3, r2
 8003d32:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	4a21      	ldr	r2, [pc, #132]	@ (8003dbc <TIM_OC1_SetConfig+0xdc>)
 8003d38:	4293      	cmp	r3, r2
 8003d3a:	d003      	beq.n	8003d44 <TIM_OC1_SetConfig+0x64>
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	4a20      	ldr	r2, [pc, #128]	@ (8003dc0 <TIM_OC1_SetConfig+0xe0>)
 8003d40:	4293      	cmp	r3, r2
 8003d42:	d10c      	bne.n	8003d5e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003d44:	697b      	ldr	r3, [r7, #20]
 8003d46:	f023 0308 	bic.w	r3, r3, #8
 8003d4a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003d4c:	683b      	ldr	r3, [r7, #0]
 8003d4e:	68db      	ldr	r3, [r3, #12]
 8003d50:	697a      	ldr	r2, [r7, #20]
 8003d52:	4313      	orrs	r3, r2
 8003d54:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003d56:	697b      	ldr	r3, [r7, #20]
 8003d58:	f023 0304 	bic.w	r3, r3, #4
 8003d5c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	4a16      	ldr	r2, [pc, #88]	@ (8003dbc <TIM_OC1_SetConfig+0xdc>)
 8003d62:	4293      	cmp	r3, r2
 8003d64:	d003      	beq.n	8003d6e <TIM_OC1_SetConfig+0x8e>
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	4a15      	ldr	r2, [pc, #84]	@ (8003dc0 <TIM_OC1_SetConfig+0xe0>)
 8003d6a:	4293      	cmp	r3, r2
 8003d6c:	d111      	bne.n	8003d92 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003d6e:	693b      	ldr	r3, [r7, #16]
 8003d70:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003d74:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003d76:	693b      	ldr	r3, [r7, #16]
 8003d78:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003d7c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003d7e:	683b      	ldr	r3, [r7, #0]
 8003d80:	695b      	ldr	r3, [r3, #20]
 8003d82:	693a      	ldr	r2, [r7, #16]
 8003d84:	4313      	orrs	r3, r2
 8003d86:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003d88:	683b      	ldr	r3, [r7, #0]
 8003d8a:	699b      	ldr	r3, [r3, #24]
 8003d8c:	693a      	ldr	r2, [r7, #16]
 8003d8e:	4313      	orrs	r3, r2
 8003d90:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	693a      	ldr	r2, [r7, #16]
 8003d96:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	68fa      	ldr	r2, [r7, #12]
 8003d9c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003d9e:	683b      	ldr	r3, [r7, #0]
 8003da0:	685a      	ldr	r2, [r3, #4]
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	697a      	ldr	r2, [r7, #20]
 8003daa:	621a      	str	r2, [r3, #32]
}
 8003dac:	bf00      	nop
 8003dae:	371c      	adds	r7, #28
 8003db0:	46bd      	mov	sp, r7
 8003db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003db6:	4770      	bx	lr
 8003db8:	fffeff8f 	.word	0xfffeff8f
 8003dbc:	40010000 	.word	0x40010000
 8003dc0:	40010400 	.word	0x40010400

08003dc4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003dc4:	b480      	push	{r7}
 8003dc6:	b087      	sub	sp, #28
 8003dc8:	af00      	add	r7, sp, #0
 8003dca:	6078      	str	r0, [r7, #4]
 8003dcc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	6a1b      	ldr	r3, [r3, #32]
 8003dd2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	6a1b      	ldr	r3, [r3, #32]
 8003dd8:	f023 0210 	bic.w	r2, r3, #16
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	685b      	ldr	r3, [r3, #4]
 8003de4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	699b      	ldr	r3, [r3, #24]
 8003dea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003dec:	68fa      	ldr	r2, [r7, #12]
 8003dee:	4b2e      	ldr	r3, [pc, #184]	@ (8003ea8 <TIM_OC2_SetConfig+0xe4>)
 8003df0:	4013      	ands	r3, r2
 8003df2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003dfa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003dfc:	683b      	ldr	r3, [r7, #0]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	021b      	lsls	r3, r3, #8
 8003e02:	68fa      	ldr	r2, [r7, #12]
 8003e04:	4313      	orrs	r3, r2
 8003e06:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003e08:	697b      	ldr	r3, [r7, #20]
 8003e0a:	f023 0320 	bic.w	r3, r3, #32
 8003e0e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003e10:	683b      	ldr	r3, [r7, #0]
 8003e12:	689b      	ldr	r3, [r3, #8]
 8003e14:	011b      	lsls	r3, r3, #4
 8003e16:	697a      	ldr	r2, [r7, #20]
 8003e18:	4313      	orrs	r3, r2
 8003e1a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	4a23      	ldr	r2, [pc, #140]	@ (8003eac <TIM_OC2_SetConfig+0xe8>)
 8003e20:	4293      	cmp	r3, r2
 8003e22:	d003      	beq.n	8003e2c <TIM_OC2_SetConfig+0x68>
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	4a22      	ldr	r2, [pc, #136]	@ (8003eb0 <TIM_OC2_SetConfig+0xec>)
 8003e28:	4293      	cmp	r3, r2
 8003e2a:	d10d      	bne.n	8003e48 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003e2c:	697b      	ldr	r3, [r7, #20]
 8003e2e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003e32:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003e34:	683b      	ldr	r3, [r7, #0]
 8003e36:	68db      	ldr	r3, [r3, #12]
 8003e38:	011b      	lsls	r3, r3, #4
 8003e3a:	697a      	ldr	r2, [r7, #20]
 8003e3c:	4313      	orrs	r3, r2
 8003e3e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003e40:	697b      	ldr	r3, [r7, #20]
 8003e42:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003e46:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	4a18      	ldr	r2, [pc, #96]	@ (8003eac <TIM_OC2_SetConfig+0xe8>)
 8003e4c:	4293      	cmp	r3, r2
 8003e4e:	d003      	beq.n	8003e58 <TIM_OC2_SetConfig+0x94>
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	4a17      	ldr	r2, [pc, #92]	@ (8003eb0 <TIM_OC2_SetConfig+0xec>)
 8003e54:	4293      	cmp	r3, r2
 8003e56:	d113      	bne.n	8003e80 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003e58:	693b      	ldr	r3, [r7, #16]
 8003e5a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003e5e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003e60:	693b      	ldr	r3, [r7, #16]
 8003e62:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003e66:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003e68:	683b      	ldr	r3, [r7, #0]
 8003e6a:	695b      	ldr	r3, [r3, #20]
 8003e6c:	009b      	lsls	r3, r3, #2
 8003e6e:	693a      	ldr	r2, [r7, #16]
 8003e70:	4313      	orrs	r3, r2
 8003e72:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003e74:	683b      	ldr	r3, [r7, #0]
 8003e76:	699b      	ldr	r3, [r3, #24]
 8003e78:	009b      	lsls	r3, r3, #2
 8003e7a:	693a      	ldr	r2, [r7, #16]
 8003e7c:	4313      	orrs	r3, r2
 8003e7e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	693a      	ldr	r2, [r7, #16]
 8003e84:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	68fa      	ldr	r2, [r7, #12]
 8003e8a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003e8c:	683b      	ldr	r3, [r7, #0]
 8003e8e:	685a      	ldr	r2, [r3, #4]
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	697a      	ldr	r2, [r7, #20]
 8003e98:	621a      	str	r2, [r3, #32]
}
 8003e9a:	bf00      	nop
 8003e9c:	371c      	adds	r7, #28
 8003e9e:	46bd      	mov	sp, r7
 8003ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ea4:	4770      	bx	lr
 8003ea6:	bf00      	nop
 8003ea8:	feff8fff 	.word	0xfeff8fff
 8003eac:	40010000 	.word	0x40010000
 8003eb0:	40010400 	.word	0x40010400

08003eb4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003eb4:	b480      	push	{r7}
 8003eb6:	b087      	sub	sp, #28
 8003eb8:	af00      	add	r7, sp, #0
 8003eba:	6078      	str	r0, [r7, #4]
 8003ebc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	6a1b      	ldr	r3, [r3, #32]
 8003ec2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	6a1b      	ldr	r3, [r3, #32]
 8003ec8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	685b      	ldr	r3, [r3, #4]
 8003ed4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	69db      	ldr	r3, [r3, #28]
 8003eda:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003edc:	68fa      	ldr	r2, [r7, #12]
 8003ede:	4b2d      	ldr	r3, [pc, #180]	@ (8003f94 <TIM_OC3_SetConfig+0xe0>)
 8003ee0:	4013      	ands	r3, r2
 8003ee2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	f023 0303 	bic.w	r3, r3, #3
 8003eea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003eec:	683b      	ldr	r3, [r7, #0]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	68fa      	ldr	r2, [r7, #12]
 8003ef2:	4313      	orrs	r3, r2
 8003ef4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003ef6:	697b      	ldr	r3, [r7, #20]
 8003ef8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003efc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003efe:	683b      	ldr	r3, [r7, #0]
 8003f00:	689b      	ldr	r3, [r3, #8]
 8003f02:	021b      	lsls	r3, r3, #8
 8003f04:	697a      	ldr	r2, [r7, #20]
 8003f06:	4313      	orrs	r3, r2
 8003f08:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	4a22      	ldr	r2, [pc, #136]	@ (8003f98 <TIM_OC3_SetConfig+0xe4>)
 8003f0e:	4293      	cmp	r3, r2
 8003f10:	d003      	beq.n	8003f1a <TIM_OC3_SetConfig+0x66>
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	4a21      	ldr	r2, [pc, #132]	@ (8003f9c <TIM_OC3_SetConfig+0xe8>)
 8003f16:	4293      	cmp	r3, r2
 8003f18:	d10d      	bne.n	8003f36 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003f1a:	697b      	ldr	r3, [r7, #20]
 8003f1c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003f20:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003f22:	683b      	ldr	r3, [r7, #0]
 8003f24:	68db      	ldr	r3, [r3, #12]
 8003f26:	021b      	lsls	r3, r3, #8
 8003f28:	697a      	ldr	r2, [r7, #20]
 8003f2a:	4313      	orrs	r3, r2
 8003f2c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003f2e:	697b      	ldr	r3, [r7, #20]
 8003f30:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003f34:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	4a17      	ldr	r2, [pc, #92]	@ (8003f98 <TIM_OC3_SetConfig+0xe4>)
 8003f3a:	4293      	cmp	r3, r2
 8003f3c:	d003      	beq.n	8003f46 <TIM_OC3_SetConfig+0x92>
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	4a16      	ldr	r2, [pc, #88]	@ (8003f9c <TIM_OC3_SetConfig+0xe8>)
 8003f42:	4293      	cmp	r3, r2
 8003f44:	d113      	bne.n	8003f6e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003f46:	693b      	ldr	r3, [r7, #16]
 8003f48:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003f4c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003f4e:	693b      	ldr	r3, [r7, #16]
 8003f50:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003f54:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003f56:	683b      	ldr	r3, [r7, #0]
 8003f58:	695b      	ldr	r3, [r3, #20]
 8003f5a:	011b      	lsls	r3, r3, #4
 8003f5c:	693a      	ldr	r2, [r7, #16]
 8003f5e:	4313      	orrs	r3, r2
 8003f60:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003f62:	683b      	ldr	r3, [r7, #0]
 8003f64:	699b      	ldr	r3, [r3, #24]
 8003f66:	011b      	lsls	r3, r3, #4
 8003f68:	693a      	ldr	r2, [r7, #16]
 8003f6a:	4313      	orrs	r3, r2
 8003f6c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	693a      	ldr	r2, [r7, #16]
 8003f72:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	68fa      	ldr	r2, [r7, #12]
 8003f78:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003f7a:	683b      	ldr	r3, [r7, #0]
 8003f7c:	685a      	ldr	r2, [r3, #4]
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	697a      	ldr	r2, [r7, #20]
 8003f86:	621a      	str	r2, [r3, #32]
}
 8003f88:	bf00      	nop
 8003f8a:	371c      	adds	r7, #28
 8003f8c:	46bd      	mov	sp, r7
 8003f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f92:	4770      	bx	lr
 8003f94:	fffeff8f 	.word	0xfffeff8f
 8003f98:	40010000 	.word	0x40010000
 8003f9c:	40010400 	.word	0x40010400

08003fa0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003fa0:	b480      	push	{r7}
 8003fa2:	b087      	sub	sp, #28
 8003fa4:	af00      	add	r7, sp, #0
 8003fa6:	6078      	str	r0, [r7, #4]
 8003fa8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	6a1b      	ldr	r3, [r3, #32]
 8003fae:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	6a1b      	ldr	r3, [r3, #32]
 8003fb4:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	685b      	ldr	r3, [r3, #4]
 8003fc0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	69db      	ldr	r3, [r3, #28]
 8003fc6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003fc8:	68fa      	ldr	r2, [r7, #12]
 8003fca:	4b1e      	ldr	r3, [pc, #120]	@ (8004044 <TIM_OC4_SetConfig+0xa4>)
 8003fcc:	4013      	ands	r3, r2
 8003fce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003fd6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003fd8:	683b      	ldr	r3, [r7, #0]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	021b      	lsls	r3, r3, #8
 8003fde:	68fa      	ldr	r2, [r7, #12]
 8003fe0:	4313      	orrs	r3, r2
 8003fe2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003fe4:	693b      	ldr	r3, [r7, #16]
 8003fe6:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003fea:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003fec:	683b      	ldr	r3, [r7, #0]
 8003fee:	689b      	ldr	r3, [r3, #8]
 8003ff0:	031b      	lsls	r3, r3, #12
 8003ff2:	693a      	ldr	r2, [r7, #16]
 8003ff4:	4313      	orrs	r3, r2
 8003ff6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	4a13      	ldr	r2, [pc, #76]	@ (8004048 <TIM_OC4_SetConfig+0xa8>)
 8003ffc:	4293      	cmp	r3, r2
 8003ffe:	d003      	beq.n	8004008 <TIM_OC4_SetConfig+0x68>
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	4a12      	ldr	r2, [pc, #72]	@ (800404c <TIM_OC4_SetConfig+0xac>)
 8004004:	4293      	cmp	r3, r2
 8004006:	d109      	bne.n	800401c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004008:	697b      	ldr	r3, [r7, #20]
 800400a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800400e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004010:	683b      	ldr	r3, [r7, #0]
 8004012:	695b      	ldr	r3, [r3, #20]
 8004014:	019b      	lsls	r3, r3, #6
 8004016:	697a      	ldr	r2, [r7, #20]
 8004018:	4313      	orrs	r3, r2
 800401a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	697a      	ldr	r2, [r7, #20]
 8004020:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	68fa      	ldr	r2, [r7, #12]
 8004026:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004028:	683b      	ldr	r3, [r7, #0]
 800402a:	685a      	ldr	r2, [r3, #4]
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	693a      	ldr	r2, [r7, #16]
 8004034:	621a      	str	r2, [r3, #32]
}
 8004036:	bf00      	nop
 8004038:	371c      	adds	r7, #28
 800403a:	46bd      	mov	sp, r7
 800403c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004040:	4770      	bx	lr
 8004042:	bf00      	nop
 8004044:	feff8fff 	.word	0xfeff8fff
 8004048:	40010000 	.word	0x40010000
 800404c:	40010400 	.word	0x40010400

08004050 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004050:	b480      	push	{r7}
 8004052:	b087      	sub	sp, #28
 8004054:	af00      	add	r7, sp, #0
 8004056:	6078      	str	r0, [r7, #4]
 8004058:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	6a1b      	ldr	r3, [r3, #32]
 800405e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	6a1b      	ldr	r3, [r3, #32]
 8004064:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	685b      	ldr	r3, [r3, #4]
 8004070:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004076:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8004078:	68fa      	ldr	r2, [r7, #12]
 800407a:	4b1b      	ldr	r3, [pc, #108]	@ (80040e8 <TIM_OC5_SetConfig+0x98>)
 800407c:	4013      	ands	r3, r2
 800407e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004080:	683b      	ldr	r3, [r7, #0]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	68fa      	ldr	r2, [r7, #12]
 8004086:	4313      	orrs	r3, r2
 8004088:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800408a:	693b      	ldr	r3, [r7, #16]
 800408c:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8004090:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8004092:	683b      	ldr	r3, [r7, #0]
 8004094:	689b      	ldr	r3, [r3, #8]
 8004096:	041b      	lsls	r3, r3, #16
 8004098:	693a      	ldr	r2, [r7, #16]
 800409a:	4313      	orrs	r3, r2
 800409c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	4a12      	ldr	r2, [pc, #72]	@ (80040ec <TIM_OC5_SetConfig+0x9c>)
 80040a2:	4293      	cmp	r3, r2
 80040a4:	d003      	beq.n	80040ae <TIM_OC5_SetConfig+0x5e>
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	4a11      	ldr	r2, [pc, #68]	@ (80040f0 <TIM_OC5_SetConfig+0xa0>)
 80040aa:	4293      	cmp	r3, r2
 80040ac:	d109      	bne.n	80040c2 <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80040ae:	697b      	ldr	r3, [r7, #20]
 80040b0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80040b4:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80040b6:	683b      	ldr	r3, [r7, #0]
 80040b8:	695b      	ldr	r3, [r3, #20]
 80040ba:	021b      	lsls	r3, r3, #8
 80040bc:	697a      	ldr	r2, [r7, #20]
 80040be:	4313      	orrs	r3, r2
 80040c0:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	697a      	ldr	r2, [r7, #20]
 80040c6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	68fa      	ldr	r2, [r7, #12]
 80040cc:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80040ce:	683b      	ldr	r3, [r7, #0]
 80040d0:	685a      	ldr	r2, [r3, #4]
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	693a      	ldr	r2, [r7, #16]
 80040da:	621a      	str	r2, [r3, #32]
}
 80040dc:	bf00      	nop
 80040de:	371c      	adds	r7, #28
 80040e0:	46bd      	mov	sp, r7
 80040e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040e6:	4770      	bx	lr
 80040e8:	fffeff8f 	.word	0xfffeff8f
 80040ec:	40010000 	.word	0x40010000
 80040f0:	40010400 	.word	0x40010400

080040f4 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80040f4:	b480      	push	{r7}
 80040f6:	b087      	sub	sp, #28
 80040f8:	af00      	add	r7, sp, #0
 80040fa:	6078      	str	r0, [r7, #4]
 80040fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	6a1b      	ldr	r3, [r3, #32]
 8004102:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	6a1b      	ldr	r3, [r3, #32]
 8004108:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	685b      	ldr	r3, [r3, #4]
 8004114:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800411a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800411c:	68fa      	ldr	r2, [r7, #12]
 800411e:	4b1c      	ldr	r3, [pc, #112]	@ (8004190 <TIM_OC6_SetConfig+0x9c>)
 8004120:	4013      	ands	r3, r2
 8004122:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004124:	683b      	ldr	r3, [r7, #0]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	021b      	lsls	r3, r3, #8
 800412a:	68fa      	ldr	r2, [r7, #12]
 800412c:	4313      	orrs	r3, r2
 800412e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8004130:	693b      	ldr	r3, [r7, #16]
 8004132:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8004136:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8004138:	683b      	ldr	r3, [r7, #0]
 800413a:	689b      	ldr	r3, [r3, #8]
 800413c:	051b      	lsls	r3, r3, #20
 800413e:	693a      	ldr	r2, [r7, #16]
 8004140:	4313      	orrs	r3, r2
 8004142:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	4a13      	ldr	r2, [pc, #76]	@ (8004194 <TIM_OC6_SetConfig+0xa0>)
 8004148:	4293      	cmp	r3, r2
 800414a:	d003      	beq.n	8004154 <TIM_OC6_SetConfig+0x60>
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	4a12      	ldr	r2, [pc, #72]	@ (8004198 <TIM_OC6_SetConfig+0xa4>)
 8004150:	4293      	cmp	r3, r2
 8004152:	d109      	bne.n	8004168 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8004154:	697b      	ldr	r3, [r7, #20]
 8004156:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800415a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800415c:	683b      	ldr	r3, [r7, #0]
 800415e:	695b      	ldr	r3, [r3, #20]
 8004160:	029b      	lsls	r3, r3, #10
 8004162:	697a      	ldr	r2, [r7, #20]
 8004164:	4313      	orrs	r3, r2
 8004166:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	697a      	ldr	r2, [r7, #20]
 800416c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	68fa      	ldr	r2, [r7, #12]
 8004172:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8004174:	683b      	ldr	r3, [r7, #0]
 8004176:	685a      	ldr	r2, [r3, #4]
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	693a      	ldr	r2, [r7, #16]
 8004180:	621a      	str	r2, [r3, #32]
}
 8004182:	bf00      	nop
 8004184:	371c      	adds	r7, #28
 8004186:	46bd      	mov	sp, r7
 8004188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800418c:	4770      	bx	lr
 800418e:	bf00      	nop
 8004190:	feff8fff 	.word	0xfeff8fff
 8004194:	40010000 	.word	0x40010000
 8004198:	40010400 	.word	0x40010400

0800419c <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 800419c:	b580      	push	{r7, lr}
 800419e:	b086      	sub	sp, #24
 80041a0:	af00      	add	r7, sp, #0
 80041a2:	6078      	str	r0, [r7, #4]
 80041a4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80041a6:	2300      	movs	r3, #0
 80041a8:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	689b      	ldr	r3, [r3, #8]
 80041b0:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80041b2:	693b      	ldr	r3, [r7, #16]
 80041b4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80041b8:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 80041ba:	683b      	ldr	r3, [r7, #0]
 80041bc:	685b      	ldr	r3, [r3, #4]
 80041be:	693a      	ldr	r2, [r7, #16]
 80041c0:	4313      	orrs	r3, r2
 80041c2:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 80041c4:	693a      	ldr	r2, [r7, #16]
 80041c6:	4b3e      	ldr	r3, [pc, #248]	@ (80042c0 <TIM_SlaveTimer_SetConfig+0x124>)
 80041c8:	4013      	ands	r3, r2
 80041ca:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 80041cc:	683b      	ldr	r3, [r7, #0]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	693a      	ldr	r2, [r7, #16]
 80041d2:	4313      	orrs	r3, r2
 80041d4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	693a      	ldr	r2, [r7, #16]
 80041dc:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 80041de:	683b      	ldr	r3, [r7, #0]
 80041e0:	685b      	ldr	r3, [r3, #4]
 80041e2:	2b70      	cmp	r3, #112	@ 0x70
 80041e4:	d01a      	beq.n	800421c <TIM_SlaveTimer_SetConfig+0x80>
 80041e6:	2b70      	cmp	r3, #112	@ 0x70
 80041e8:	d860      	bhi.n	80042ac <TIM_SlaveTimer_SetConfig+0x110>
 80041ea:	2b60      	cmp	r3, #96	@ 0x60
 80041ec:	d054      	beq.n	8004298 <TIM_SlaveTimer_SetConfig+0xfc>
 80041ee:	2b60      	cmp	r3, #96	@ 0x60
 80041f0:	d85c      	bhi.n	80042ac <TIM_SlaveTimer_SetConfig+0x110>
 80041f2:	2b50      	cmp	r3, #80	@ 0x50
 80041f4:	d046      	beq.n	8004284 <TIM_SlaveTimer_SetConfig+0xe8>
 80041f6:	2b50      	cmp	r3, #80	@ 0x50
 80041f8:	d858      	bhi.n	80042ac <TIM_SlaveTimer_SetConfig+0x110>
 80041fa:	2b40      	cmp	r3, #64	@ 0x40
 80041fc:	d019      	beq.n	8004232 <TIM_SlaveTimer_SetConfig+0x96>
 80041fe:	2b40      	cmp	r3, #64	@ 0x40
 8004200:	d854      	bhi.n	80042ac <TIM_SlaveTimer_SetConfig+0x110>
 8004202:	2b30      	cmp	r3, #48	@ 0x30
 8004204:	d055      	beq.n	80042b2 <TIM_SlaveTimer_SetConfig+0x116>
 8004206:	2b30      	cmp	r3, #48	@ 0x30
 8004208:	d850      	bhi.n	80042ac <TIM_SlaveTimer_SetConfig+0x110>
 800420a:	2b20      	cmp	r3, #32
 800420c:	d051      	beq.n	80042b2 <TIM_SlaveTimer_SetConfig+0x116>
 800420e:	2b20      	cmp	r3, #32
 8004210:	d84c      	bhi.n	80042ac <TIM_SlaveTimer_SetConfig+0x110>
 8004212:	2b00      	cmp	r3, #0
 8004214:	d04d      	beq.n	80042b2 <TIM_SlaveTimer_SetConfig+0x116>
 8004216:	2b10      	cmp	r3, #16
 8004218:	d04b      	beq.n	80042b2 <TIM_SlaveTimer_SetConfig+0x116>
 800421a:	e047      	b.n	80042ac <TIM_SlaveTimer_SetConfig+0x110>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	6818      	ldr	r0, [r3, #0]
                        sSlaveConfig->TriggerPrescaler,
 8004220:	683b      	ldr	r3, [r7, #0]
 8004222:	68d9      	ldr	r1, [r3, #12]
                        sSlaveConfig->TriggerPolarity,
 8004224:	683b      	ldr	r3, [r7, #0]
 8004226:	689a      	ldr	r2, [r3, #8]
                        sSlaveConfig->TriggerFilter);
 8004228:	683b      	ldr	r3, [r7, #0]
 800422a:	691b      	ldr	r3, [r3, #16]
      TIM_ETR_SetConfig(htim->Instance,
 800422c:	f000 f9ee 	bl	800460c <TIM_ETR_SetConfig>
      break;
 8004230:	e040      	b.n	80042b4 <TIM_SlaveTimer_SetConfig+0x118>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 8004232:	683b      	ldr	r3, [r7, #0]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	2b05      	cmp	r3, #5
 8004238:	d101      	bne.n	800423e <TIM_SlaveTimer_SetConfig+0xa2>
      {
        return HAL_ERROR;
 800423a:	2301      	movs	r3, #1
 800423c:	e03b      	b.n	80042b6 <TIM_SlaveTimer_SetConfig+0x11a>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	6a1b      	ldr	r3, [r3, #32]
 8004244:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	6a1a      	ldr	r2, [r3, #32]
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	f022 0201 	bic.w	r2, r2, #1
 8004254:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	699b      	ldr	r3, [r3, #24]
 800425c:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800425e:	68bb      	ldr	r3, [r7, #8]
 8004260:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004264:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8004266:	683b      	ldr	r3, [r7, #0]
 8004268:	691b      	ldr	r3, [r3, #16]
 800426a:	011b      	lsls	r3, r3, #4
 800426c:	68ba      	ldr	r2, [r7, #8]
 800426e:	4313      	orrs	r3, r2
 8004270:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	68ba      	ldr	r2, [r7, #8]
 8004278:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	68fa      	ldr	r2, [r7, #12]
 8004280:	621a      	str	r2, [r3, #32]
      break;
 8004282:	e017      	b.n	80042b4 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 8004288:	683b      	ldr	r3, [r7, #0]
 800428a:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 800428c:	683b      	ldr	r3, [r7, #0]
 800428e:	691b      	ldr	r3, [r3, #16]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004290:	461a      	mov	r2, r3
 8004292:	f000 f88b 	bl	80043ac <TIM_TI1_ConfigInputStage>
      break;
 8004296:	e00d      	b.n	80042b4 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 800429c:	683b      	ldr	r3, [r7, #0]
 800429e:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 80042a0:	683b      	ldr	r3, [r7, #0]
 80042a2:	691b      	ldr	r3, [r3, #16]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80042a4:	461a      	mov	r2, r3
 80042a6:	f000 f8ed 	bl	8004484 <TIM_TI2_ConfigInputStage>
      break;
 80042aa:	e003      	b.n	80042b4 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 80042ac:	2301      	movs	r3, #1
 80042ae:	75fb      	strb	r3, [r7, #23]
      break;
 80042b0:	e000      	b.n	80042b4 <TIM_SlaveTimer_SetConfig+0x118>
      break;
 80042b2:	bf00      	nop
  }

  return status;
 80042b4:	7dfb      	ldrb	r3, [r7, #23]
}
 80042b6:	4618      	mov	r0, r3
 80042b8:	3718      	adds	r7, #24
 80042ba:	46bd      	mov	sp, r7
 80042bc:	bd80      	pop	{r7, pc}
 80042be:	bf00      	nop
 80042c0:	fffefff8 	.word	0xfffefff8

080042c4 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 80042c4:	b480      	push	{r7}
 80042c6:	b087      	sub	sp, #28
 80042c8:	af00      	add	r7, sp, #0
 80042ca:	60f8      	str	r0, [r7, #12]
 80042cc:	60b9      	str	r1, [r7, #8]
 80042ce:	607a      	str	r2, [r7, #4]
 80042d0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	6a1b      	ldr	r3, [r3, #32]
 80042d6:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	6a1b      	ldr	r3, [r3, #32]
 80042dc:	f023 0201 	bic.w	r2, r3, #1
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	699b      	ldr	r3, [r3, #24]
 80042e8:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	4a28      	ldr	r2, [pc, #160]	@ (8004390 <TIM_TI1_SetConfig+0xcc>)
 80042ee:	4293      	cmp	r3, r2
 80042f0:	d01b      	beq.n	800432a <TIM_TI1_SetConfig+0x66>
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80042f8:	d017      	beq.n	800432a <TIM_TI1_SetConfig+0x66>
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	4a25      	ldr	r2, [pc, #148]	@ (8004394 <TIM_TI1_SetConfig+0xd0>)
 80042fe:	4293      	cmp	r3, r2
 8004300:	d013      	beq.n	800432a <TIM_TI1_SetConfig+0x66>
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	4a24      	ldr	r2, [pc, #144]	@ (8004398 <TIM_TI1_SetConfig+0xd4>)
 8004306:	4293      	cmp	r3, r2
 8004308:	d00f      	beq.n	800432a <TIM_TI1_SetConfig+0x66>
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	4a23      	ldr	r2, [pc, #140]	@ (800439c <TIM_TI1_SetConfig+0xd8>)
 800430e:	4293      	cmp	r3, r2
 8004310:	d00b      	beq.n	800432a <TIM_TI1_SetConfig+0x66>
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	4a22      	ldr	r2, [pc, #136]	@ (80043a0 <TIM_TI1_SetConfig+0xdc>)
 8004316:	4293      	cmp	r3, r2
 8004318:	d007      	beq.n	800432a <TIM_TI1_SetConfig+0x66>
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	4a21      	ldr	r2, [pc, #132]	@ (80043a4 <TIM_TI1_SetConfig+0xe0>)
 800431e:	4293      	cmp	r3, r2
 8004320:	d003      	beq.n	800432a <TIM_TI1_SetConfig+0x66>
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	4a20      	ldr	r2, [pc, #128]	@ (80043a8 <TIM_TI1_SetConfig+0xe4>)
 8004326:	4293      	cmp	r3, r2
 8004328:	d101      	bne.n	800432e <TIM_TI1_SetConfig+0x6a>
 800432a:	2301      	movs	r3, #1
 800432c:	e000      	b.n	8004330 <TIM_TI1_SetConfig+0x6c>
 800432e:	2300      	movs	r3, #0
 8004330:	2b00      	cmp	r3, #0
 8004332:	d008      	beq.n	8004346 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8004334:	697b      	ldr	r3, [r7, #20]
 8004336:	f023 0303 	bic.w	r3, r3, #3
 800433a:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 800433c:	697a      	ldr	r2, [r7, #20]
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	4313      	orrs	r3, r2
 8004342:	617b      	str	r3, [r7, #20]
 8004344:	e003      	b.n	800434e <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8004346:	697b      	ldr	r3, [r7, #20]
 8004348:	f043 0301 	orr.w	r3, r3, #1
 800434c:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800434e:	697b      	ldr	r3, [r7, #20]
 8004350:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004354:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8004356:	683b      	ldr	r3, [r7, #0]
 8004358:	011b      	lsls	r3, r3, #4
 800435a:	b2db      	uxtb	r3, r3
 800435c:	697a      	ldr	r2, [r7, #20]
 800435e:	4313      	orrs	r3, r2
 8004360:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004362:	693b      	ldr	r3, [r7, #16]
 8004364:	f023 030a 	bic.w	r3, r3, #10
 8004368:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800436a:	68bb      	ldr	r3, [r7, #8]
 800436c:	f003 030a 	and.w	r3, r3, #10
 8004370:	693a      	ldr	r2, [r7, #16]
 8004372:	4313      	orrs	r3, r2
 8004374:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	697a      	ldr	r2, [r7, #20]
 800437a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	693a      	ldr	r2, [r7, #16]
 8004380:	621a      	str	r2, [r3, #32]
}
 8004382:	bf00      	nop
 8004384:	371c      	adds	r7, #28
 8004386:	46bd      	mov	sp, r7
 8004388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800438c:	4770      	bx	lr
 800438e:	bf00      	nop
 8004390:	40010000 	.word	0x40010000
 8004394:	40000400 	.word	0x40000400
 8004398:	40000800 	.word	0x40000800
 800439c:	40000c00 	.word	0x40000c00
 80043a0:	40010400 	.word	0x40010400
 80043a4:	40014000 	.word	0x40014000
 80043a8:	40001800 	.word	0x40001800

080043ac <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80043ac:	b480      	push	{r7}
 80043ae:	b087      	sub	sp, #28
 80043b0:	af00      	add	r7, sp, #0
 80043b2:	60f8      	str	r0, [r7, #12]
 80043b4:	60b9      	str	r1, [r7, #8]
 80043b6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	6a1b      	ldr	r3, [r3, #32]
 80043bc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	6a1b      	ldr	r3, [r3, #32]
 80043c2:	f023 0201 	bic.w	r2, r3, #1
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	699b      	ldr	r3, [r3, #24]
 80043ce:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80043d0:	693b      	ldr	r3, [r7, #16]
 80043d2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80043d6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	011b      	lsls	r3, r3, #4
 80043dc:	693a      	ldr	r2, [r7, #16]
 80043de:	4313      	orrs	r3, r2
 80043e0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80043e2:	697b      	ldr	r3, [r7, #20]
 80043e4:	f023 030a 	bic.w	r3, r3, #10
 80043e8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80043ea:	697a      	ldr	r2, [r7, #20]
 80043ec:	68bb      	ldr	r3, [r7, #8]
 80043ee:	4313      	orrs	r3, r2
 80043f0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	693a      	ldr	r2, [r7, #16]
 80043f6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	697a      	ldr	r2, [r7, #20]
 80043fc:	621a      	str	r2, [r3, #32]
}
 80043fe:	bf00      	nop
 8004400:	371c      	adds	r7, #28
 8004402:	46bd      	mov	sp, r7
 8004404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004408:	4770      	bx	lr

0800440a <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800440a:	b480      	push	{r7}
 800440c:	b087      	sub	sp, #28
 800440e:	af00      	add	r7, sp, #0
 8004410:	60f8      	str	r0, [r7, #12]
 8004412:	60b9      	str	r1, [r7, #8]
 8004414:	607a      	str	r2, [r7, #4]
 8004416:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	6a1b      	ldr	r3, [r3, #32]
 800441c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	6a1b      	ldr	r3, [r3, #32]
 8004422:	f023 0210 	bic.w	r2, r3, #16
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	699b      	ldr	r3, [r3, #24]
 800442e:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8004430:	693b      	ldr	r3, [r7, #16]
 8004432:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004436:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	021b      	lsls	r3, r3, #8
 800443c:	693a      	ldr	r2, [r7, #16]
 800443e:	4313      	orrs	r3, r2
 8004440:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004442:	693b      	ldr	r3, [r7, #16]
 8004444:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004448:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800444a:	683b      	ldr	r3, [r7, #0]
 800444c:	031b      	lsls	r3, r3, #12
 800444e:	b29b      	uxth	r3, r3
 8004450:	693a      	ldr	r2, [r7, #16]
 8004452:	4313      	orrs	r3, r2
 8004454:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004456:	697b      	ldr	r3, [r7, #20]
 8004458:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800445c:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800445e:	68bb      	ldr	r3, [r7, #8]
 8004460:	011b      	lsls	r3, r3, #4
 8004462:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 8004466:	697a      	ldr	r2, [r7, #20]
 8004468:	4313      	orrs	r3, r2
 800446a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	693a      	ldr	r2, [r7, #16]
 8004470:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	697a      	ldr	r2, [r7, #20]
 8004476:	621a      	str	r2, [r3, #32]
}
 8004478:	bf00      	nop
 800447a:	371c      	adds	r7, #28
 800447c:	46bd      	mov	sp, r7
 800447e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004482:	4770      	bx	lr

08004484 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004484:	b480      	push	{r7}
 8004486:	b087      	sub	sp, #28
 8004488:	af00      	add	r7, sp, #0
 800448a:	60f8      	str	r0, [r7, #12]
 800448c:	60b9      	str	r1, [r7, #8]
 800448e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	6a1b      	ldr	r3, [r3, #32]
 8004494:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	6a1b      	ldr	r3, [r3, #32]
 800449a:	f023 0210 	bic.w	r2, r3, #16
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	699b      	ldr	r3, [r3, #24]
 80044a6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80044a8:	693b      	ldr	r3, [r7, #16]
 80044aa:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80044ae:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	031b      	lsls	r3, r3, #12
 80044b4:	693a      	ldr	r2, [r7, #16]
 80044b6:	4313      	orrs	r3, r2
 80044b8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80044ba:	697b      	ldr	r3, [r7, #20]
 80044bc:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80044c0:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80044c2:	68bb      	ldr	r3, [r7, #8]
 80044c4:	011b      	lsls	r3, r3, #4
 80044c6:	697a      	ldr	r2, [r7, #20]
 80044c8:	4313      	orrs	r3, r2
 80044ca:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	693a      	ldr	r2, [r7, #16]
 80044d0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	697a      	ldr	r2, [r7, #20]
 80044d6:	621a      	str	r2, [r3, #32]
}
 80044d8:	bf00      	nop
 80044da:	371c      	adds	r7, #28
 80044dc:	46bd      	mov	sp, r7
 80044de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044e2:	4770      	bx	lr

080044e4 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80044e4:	b480      	push	{r7}
 80044e6:	b087      	sub	sp, #28
 80044e8:	af00      	add	r7, sp, #0
 80044ea:	60f8      	str	r0, [r7, #12]
 80044ec:	60b9      	str	r1, [r7, #8]
 80044ee:	607a      	str	r2, [r7, #4]
 80044f0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	6a1b      	ldr	r3, [r3, #32]
 80044f6:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	6a1b      	ldr	r3, [r3, #32]
 80044fc:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	69db      	ldr	r3, [r3, #28]
 8004508:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800450a:	693b      	ldr	r3, [r7, #16]
 800450c:	f023 0303 	bic.w	r3, r3, #3
 8004510:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 8004512:	693a      	ldr	r2, [r7, #16]
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	4313      	orrs	r3, r2
 8004518:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800451a:	693b      	ldr	r3, [r7, #16]
 800451c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004520:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8004522:	683b      	ldr	r3, [r7, #0]
 8004524:	011b      	lsls	r3, r3, #4
 8004526:	b2db      	uxtb	r3, r3
 8004528:	693a      	ldr	r2, [r7, #16]
 800452a:	4313      	orrs	r3, r2
 800452c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800452e:	697b      	ldr	r3, [r7, #20]
 8004530:	f423 6320 	bic.w	r3, r3, #2560	@ 0xa00
 8004534:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8004536:	68bb      	ldr	r3, [r7, #8]
 8004538:	021b      	lsls	r3, r3, #8
 800453a:	f403 6320 	and.w	r3, r3, #2560	@ 0xa00
 800453e:	697a      	ldr	r2, [r7, #20]
 8004540:	4313      	orrs	r3, r2
 8004542:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	693a      	ldr	r2, [r7, #16]
 8004548:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	697a      	ldr	r2, [r7, #20]
 800454e:	621a      	str	r2, [r3, #32]
}
 8004550:	bf00      	nop
 8004552:	371c      	adds	r7, #28
 8004554:	46bd      	mov	sp, r7
 8004556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800455a:	4770      	bx	lr

0800455c <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800455c:	b480      	push	{r7}
 800455e:	b087      	sub	sp, #28
 8004560:	af00      	add	r7, sp, #0
 8004562:	60f8      	str	r0, [r7, #12]
 8004564:	60b9      	str	r1, [r7, #8]
 8004566:	607a      	str	r2, [r7, #4]
 8004568:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	6a1b      	ldr	r3, [r3, #32]
 800456e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	6a1b      	ldr	r3, [r3, #32]
 8004574:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	69db      	ldr	r3, [r3, #28]
 8004580:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8004582:	693b      	ldr	r3, [r7, #16]
 8004584:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004588:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	021b      	lsls	r3, r3, #8
 800458e:	693a      	ldr	r2, [r7, #16]
 8004590:	4313      	orrs	r3, r2
 8004592:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8004594:	693b      	ldr	r3, [r7, #16]
 8004596:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800459a:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 800459c:	683b      	ldr	r3, [r7, #0]
 800459e:	031b      	lsls	r3, r3, #12
 80045a0:	b29b      	uxth	r3, r3
 80045a2:	693a      	ldr	r2, [r7, #16]
 80045a4:	4313      	orrs	r3, r2
 80045a6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 80045a8:	697b      	ldr	r3, [r7, #20]
 80045aa:	f423 4320 	bic.w	r3, r3, #40960	@ 0xa000
 80045ae:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 80045b0:	68bb      	ldr	r3, [r7, #8]
 80045b2:	031b      	lsls	r3, r3, #12
 80045b4:	f403 4320 	and.w	r3, r3, #40960	@ 0xa000
 80045b8:	697a      	ldr	r2, [r7, #20]
 80045ba:	4313      	orrs	r3, r2
 80045bc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	693a      	ldr	r2, [r7, #16]
 80045c2:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	697a      	ldr	r2, [r7, #20]
 80045c8:	621a      	str	r2, [r3, #32]
}
 80045ca:	bf00      	nop
 80045cc:	371c      	adds	r7, #28
 80045ce:	46bd      	mov	sp, r7
 80045d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045d4:	4770      	bx	lr

080045d6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80045d6:	b480      	push	{r7}
 80045d8:	b085      	sub	sp, #20
 80045da:	af00      	add	r7, sp, #0
 80045dc:	6078      	str	r0, [r7, #4]
 80045de:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	689b      	ldr	r3, [r3, #8]
 80045e4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80045ec:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80045ee:	683a      	ldr	r2, [r7, #0]
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	4313      	orrs	r3, r2
 80045f4:	f043 0307 	orr.w	r3, r3, #7
 80045f8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	68fa      	ldr	r2, [r7, #12]
 80045fe:	609a      	str	r2, [r3, #8]
}
 8004600:	bf00      	nop
 8004602:	3714      	adds	r7, #20
 8004604:	46bd      	mov	sp, r7
 8004606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800460a:	4770      	bx	lr

0800460c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800460c:	b480      	push	{r7}
 800460e:	b087      	sub	sp, #28
 8004610:	af00      	add	r7, sp, #0
 8004612:	60f8      	str	r0, [r7, #12]
 8004614:	60b9      	str	r1, [r7, #8]
 8004616:	607a      	str	r2, [r7, #4]
 8004618:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	689b      	ldr	r3, [r3, #8]
 800461e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004620:	697b      	ldr	r3, [r7, #20]
 8004622:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004626:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004628:	683b      	ldr	r3, [r7, #0]
 800462a:	021a      	lsls	r2, r3, #8
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	431a      	orrs	r2, r3
 8004630:	68bb      	ldr	r3, [r7, #8]
 8004632:	4313      	orrs	r3, r2
 8004634:	697a      	ldr	r2, [r7, #20]
 8004636:	4313      	orrs	r3, r2
 8004638:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	697a      	ldr	r2, [r7, #20]
 800463e:	609a      	str	r2, [r3, #8]
}
 8004640:	bf00      	nop
 8004642:	371c      	adds	r7, #28
 8004644:	46bd      	mov	sp, r7
 8004646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800464a:	4770      	bx	lr

0800464c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800464c:	b480      	push	{r7}
 800464e:	b087      	sub	sp, #28
 8004650:	af00      	add	r7, sp, #0
 8004652:	60f8      	str	r0, [r7, #12]
 8004654:	60b9      	str	r1, [r7, #8]
 8004656:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004658:	68bb      	ldr	r3, [r7, #8]
 800465a:	f003 031f 	and.w	r3, r3, #31
 800465e:	2201      	movs	r2, #1
 8004660:	fa02 f303 	lsl.w	r3, r2, r3
 8004664:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	6a1a      	ldr	r2, [r3, #32]
 800466a:	697b      	ldr	r3, [r7, #20]
 800466c:	43db      	mvns	r3, r3
 800466e:	401a      	ands	r2, r3
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	6a1a      	ldr	r2, [r3, #32]
 8004678:	68bb      	ldr	r3, [r7, #8]
 800467a:	f003 031f 	and.w	r3, r3, #31
 800467e:	6879      	ldr	r1, [r7, #4]
 8004680:	fa01 f303 	lsl.w	r3, r1, r3
 8004684:	431a      	orrs	r2, r3
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	621a      	str	r2, [r3, #32]
}
 800468a:	bf00      	nop
 800468c:	371c      	adds	r7, #28
 800468e:	46bd      	mov	sp, r7
 8004690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004694:	4770      	bx	lr
	...

08004698 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004698:	b480      	push	{r7}
 800469a:	b085      	sub	sp, #20
 800469c:	af00      	add	r7, sp, #0
 800469e:	6078      	str	r0, [r7, #4]
 80046a0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80046a8:	2b01      	cmp	r3, #1
 80046aa:	d101      	bne.n	80046b0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80046ac:	2302      	movs	r3, #2
 80046ae:	e06d      	b.n	800478c <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	2201      	movs	r2, #1
 80046b4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	2202      	movs	r2, #2
 80046bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	685b      	ldr	r3, [r3, #4]
 80046c6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	689b      	ldr	r3, [r3, #8]
 80046ce:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	4a30      	ldr	r2, [pc, #192]	@ (8004798 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80046d6:	4293      	cmp	r3, r2
 80046d8:	d004      	beq.n	80046e4 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	4a2f      	ldr	r2, [pc, #188]	@ (800479c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80046e0:	4293      	cmp	r3, r2
 80046e2:	d108      	bne.n	80046f6 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80046ea:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80046ec:	683b      	ldr	r3, [r7, #0]
 80046ee:	685b      	ldr	r3, [r3, #4]
 80046f0:	68fa      	ldr	r2, [r7, #12]
 80046f2:	4313      	orrs	r3, r2
 80046f4:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80046fc:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80046fe:	683b      	ldr	r3, [r7, #0]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	68fa      	ldr	r2, [r7, #12]
 8004704:	4313      	orrs	r3, r2
 8004706:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	68fa      	ldr	r2, [r7, #12]
 800470e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	4a20      	ldr	r2, [pc, #128]	@ (8004798 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8004716:	4293      	cmp	r3, r2
 8004718:	d022      	beq.n	8004760 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004722:	d01d      	beq.n	8004760 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	4a1d      	ldr	r2, [pc, #116]	@ (80047a0 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800472a:	4293      	cmp	r3, r2
 800472c:	d018      	beq.n	8004760 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	4a1c      	ldr	r2, [pc, #112]	@ (80047a4 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8004734:	4293      	cmp	r3, r2
 8004736:	d013      	beq.n	8004760 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	4a1a      	ldr	r2, [pc, #104]	@ (80047a8 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800473e:	4293      	cmp	r3, r2
 8004740:	d00e      	beq.n	8004760 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	4a15      	ldr	r2, [pc, #84]	@ (800479c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8004748:	4293      	cmp	r3, r2
 800474a:	d009      	beq.n	8004760 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	4a16      	ldr	r2, [pc, #88]	@ (80047ac <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8004752:	4293      	cmp	r3, r2
 8004754:	d004      	beq.n	8004760 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	4a15      	ldr	r2, [pc, #84]	@ (80047b0 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800475c:	4293      	cmp	r3, r2
 800475e:	d10c      	bne.n	800477a <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004760:	68bb      	ldr	r3, [r7, #8]
 8004762:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004766:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004768:	683b      	ldr	r3, [r7, #0]
 800476a:	689b      	ldr	r3, [r3, #8]
 800476c:	68ba      	ldr	r2, [r7, #8]
 800476e:	4313      	orrs	r3, r2
 8004770:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	68ba      	ldr	r2, [r7, #8]
 8004778:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	2201      	movs	r2, #1
 800477e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	2200      	movs	r2, #0
 8004786:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800478a:	2300      	movs	r3, #0
}
 800478c:	4618      	mov	r0, r3
 800478e:	3714      	adds	r7, #20
 8004790:	46bd      	mov	sp, r7
 8004792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004796:	4770      	bx	lr
 8004798:	40010000 	.word	0x40010000
 800479c:	40010400 	.word	0x40010400
 80047a0:	40000400 	.word	0x40000400
 80047a4:	40000800 	.word	0x40000800
 80047a8:	40000c00 	.word	0x40000c00
 80047ac:	40014000 	.word	0x40014000
 80047b0:	40001800 	.word	0x40001800

080047b4 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80047b4:	b480      	push	{r7}
 80047b6:	b083      	sub	sp, #12
 80047b8:	af00      	add	r7, sp, #0
 80047ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80047bc:	bf00      	nop
 80047be:	370c      	adds	r7, #12
 80047c0:	46bd      	mov	sp, r7
 80047c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047c6:	4770      	bx	lr

080047c8 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80047c8:	b480      	push	{r7}
 80047ca:	b083      	sub	sp, #12
 80047cc:	af00      	add	r7, sp, #0
 80047ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80047d0:	bf00      	nop
 80047d2:	370c      	adds	r7, #12
 80047d4:	46bd      	mov	sp, r7
 80047d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047da:	4770      	bx	lr

080047dc <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80047dc:	b480      	push	{r7}
 80047de:	b083      	sub	sp, #12
 80047e0:	af00      	add	r7, sp, #0
 80047e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80047e4:	bf00      	nop
 80047e6:	370c      	adds	r7, #12
 80047e8:	46bd      	mov	sp, r7
 80047ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ee:	4770      	bx	lr

080047f0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80047f0:	b580      	push	{r7, lr}
 80047f2:	b082      	sub	sp, #8
 80047f4:	af00      	add	r7, sp, #0
 80047f6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d101      	bne.n	8004802 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80047fe:	2301      	movs	r3, #1
 8004800:	e040      	b.n	8004884 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004806:	2b00      	cmp	r3, #0
 8004808:	d106      	bne.n	8004818 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	2200      	movs	r2, #0
 800480e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004812:	6878      	ldr	r0, [r7, #4]
 8004814:	f7fc fcf0 	bl	80011f8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	2224      	movs	r2, #36	@ 0x24
 800481c:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	681a      	ldr	r2, [r3, #0]
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	f022 0201 	bic.w	r2, r2, #1
 800482c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004832:	2b00      	cmp	r3, #0
 8004834:	d002      	beq.n	800483c <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8004836:	6878      	ldr	r0, [r7, #4]
 8004838:	f000 fb16 	bl	8004e68 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800483c:	6878      	ldr	r0, [r7, #4]
 800483e:	f000 f8af 	bl	80049a0 <UART_SetConfig>
 8004842:	4603      	mov	r3, r0
 8004844:	2b01      	cmp	r3, #1
 8004846:	d101      	bne.n	800484c <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8004848:	2301      	movs	r3, #1
 800484a:	e01b      	b.n	8004884 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	685a      	ldr	r2, [r3, #4]
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800485a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	689a      	ldr	r2, [r3, #8]
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800486a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	681a      	ldr	r2, [r3, #0]
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	f042 0201 	orr.w	r2, r2, #1
 800487a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800487c:	6878      	ldr	r0, [r7, #4]
 800487e:	f000 fb95 	bl	8004fac <UART_CheckIdleState>
 8004882:	4603      	mov	r3, r0
}
 8004884:	4618      	mov	r0, r3
 8004886:	3708      	adds	r7, #8
 8004888:	46bd      	mov	sp, r7
 800488a:	bd80      	pop	{r7, pc}

0800488c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800488c:	b580      	push	{r7, lr}
 800488e:	b08a      	sub	sp, #40	@ 0x28
 8004890:	af02      	add	r7, sp, #8
 8004892:	60f8      	str	r0, [r7, #12]
 8004894:	60b9      	str	r1, [r7, #8]
 8004896:	603b      	str	r3, [r7, #0]
 8004898:	4613      	mov	r3, r2
 800489a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80048a0:	2b20      	cmp	r3, #32
 80048a2:	d177      	bne.n	8004994 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 80048a4:	68bb      	ldr	r3, [r7, #8]
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d002      	beq.n	80048b0 <HAL_UART_Transmit+0x24>
 80048aa:	88fb      	ldrh	r3, [r7, #6]
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d101      	bne.n	80048b4 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 80048b0:	2301      	movs	r3, #1
 80048b2:	e070      	b.n	8004996 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	2200      	movs	r2, #0
 80048b8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	2221      	movs	r2, #33	@ 0x21
 80048c0:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80048c2:	f7fc fd73 	bl	80013ac <HAL_GetTick>
 80048c6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	88fa      	ldrh	r2, [r7, #6]
 80048cc:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	88fa      	ldrh	r2, [r7, #6]
 80048d4:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	689b      	ldr	r3, [r3, #8]
 80048dc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80048e0:	d108      	bne.n	80048f4 <HAL_UART_Transmit+0x68>
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	691b      	ldr	r3, [r3, #16]
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d104      	bne.n	80048f4 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 80048ea:	2300      	movs	r3, #0
 80048ec:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80048ee:	68bb      	ldr	r3, [r7, #8]
 80048f0:	61bb      	str	r3, [r7, #24]
 80048f2:	e003      	b.n	80048fc <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 80048f4:	68bb      	ldr	r3, [r7, #8]
 80048f6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80048f8:	2300      	movs	r3, #0
 80048fa:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80048fc:	e02f      	b.n	800495e <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80048fe:	683b      	ldr	r3, [r7, #0]
 8004900:	9300      	str	r3, [sp, #0]
 8004902:	697b      	ldr	r3, [r7, #20]
 8004904:	2200      	movs	r2, #0
 8004906:	2180      	movs	r1, #128	@ 0x80
 8004908:	68f8      	ldr	r0, [r7, #12]
 800490a:	f000 fbf7 	bl	80050fc <UART_WaitOnFlagUntilTimeout>
 800490e:	4603      	mov	r3, r0
 8004910:	2b00      	cmp	r3, #0
 8004912:	d004      	beq.n	800491e <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	2220      	movs	r2, #32
 8004918:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 800491a:	2303      	movs	r3, #3
 800491c:	e03b      	b.n	8004996 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 800491e:	69fb      	ldr	r3, [r7, #28]
 8004920:	2b00      	cmp	r3, #0
 8004922:	d10b      	bne.n	800493c <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004924:	69bb      	ldr	r3, [r7, #24]
 8004926:	881b      	ldrh	r3, [r3, #0]
 8004928:	461a      	mov	r2, r3
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004932:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8004934:	69bb      	ldr	r3, [r7, #24]
 8004936:	3302      	adds	r3, #2
 8004938:	61bb      	str	r3, [r7, #24]
 800493a:	e007      	b.n	800494c <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800493c:	69fb      	ldr	r3, [r7, #28]
 800493e:	781a      	ldrb	r2, [r3, #0]
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8004946:	69fb      	ldr	r3, [r7, #28]
 8004948:	3301      	adds	r3, #1
 800494a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8004952:	b29b      	uxth	r3, r3
 8004954:	3b01      	subs	r3, #1
 8004956:	b29a      	uxth	r2, r3
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8004964:	b29b      	uxth	r3, r3
 8004966:	2b00      	cmp	r3, #0
 8004968:	d1c9      	bne.n	80048fe <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800496a:	683b      	ldr	r3, [r7, #0]
 800496c:	9300      	str	r3, [sp, #0]
 800496e:	697b      	ldr	r3, [r7, #20]
 8004970:	2200      	movs	r2, #0
 8004972:	2140      	movs	r1, #64	@ 0x40
 8004974:	68f8      	ldr	r0, [r7, #12]
 8004976:	f000 fbc1 	bl	80050fc <UART_WaitOnFlagUntilTimeout>
 800497a:	4603      	mov	r3, r0
 800497c:	2b00      	cmp	r3, #0
 800497e:	d004      	beq.n	800498a <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	2220      	movs	r2, #32
 8004984:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8004986:	2303      	movs	r3, #3
 8004988:	e005      	b.n	8004996 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	2220      	movs	r2, #32
 800498e:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8004990:	2300      	movs	r3, #0
 8004992:	e000      	b.n	8004996 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8004994:	2302      	movs	r3, #2
  }
}
 8004996:	4618      	mov	r0, r3
 8004998:	3720      	adds	r7, #32
 800499a:	46bd      	mov	sp, r7
 800499c:	bd80      	pop	{r7, pc}
	...

080049a0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80049a0:	b580      	push	{r7, lr}
 80049a2:	b088      	sub	sp, #32
 80049a4:	af00      	add	r7, sp, #0
 80049a6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80049a8:	2300      	movs	r3, #0
 80049aa:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	689a      	ldr	r2, [r3, #8]
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	691b      	ldr	r3, [r3, #16]
 80049b4:	431a      	orrs	r2, r3
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	695b      	ldr	r3, [r3, #20]
 80049ba:	431a      	orrs	r2, r3
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	69db      	ldr	r3, [r3, #28]
 80049c0:	4313      	orrs	r3, r2
 80049c2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	681a      	ldr	r2, [r3, #0]
 80049ca:	4ba6      	ldr	r3, [pc, #664]	@ (8004c64 <UART_SetConfig+0x2c4>)
 80049cc:	4013      	ands	r3, r2
 80049ce:	687a      	ldr	r2, [r7, #4]
 80049d0:	6812      	ldr	r2, [r2, #0]
 80049d2:	6979      	ldr	r1, [r7, #20]
 80049d4:	430b      	orrs	r3, r1
 80049d6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	685b      	ldr	r3, [r3, #4]
 80049de:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	68da      	ldr	r2, [r3, #12]
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	430a      	orrs	r2, r1
 80049ec:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	699b      	ldr	r3, [r3, #24]
 80049f2:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	6a1b      	ldr	r3, [r3, #32]
 80049f8:	697a      	ldr	r2, [r7, #20]
 80049fa:	4313      	orrs	r3, r2
 80049fc:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	689b      	ldr	r3, [r3, #8]
 8004a04:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	697a      	ldr	r2, [r7, #20]
 8004a0e:	430a      	orrs	r2, r1
 8004a10:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	4a94      	ldr	r2, [pc, #592]	@ (8004c68 <UART_SetConfig+0x2c8>)
 8004a18:	4293      	cmp	r3, r2
 8004a1a:	d120      	bne.n	8004a5e <UART_SetConfig+0xbe>
 8004a1c:	4b93      	ldr	r3, [pc, #588]	@ (8004c6c <UART_SetConfig+0x2cc>)
 8004a1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004a22:	f003 0303 	and.w	r3, r3, #3
 8004a26:	2b03      	cmp	r3, #3
 8004a28:	d816      	bhi.n	8004a58 <UART_SetConfig+0xb8>
 8004a2a:	a201      	add	r2, pc, #4	@ (adr r2, 8004a30 <UART_SetConfig+0x90>)
 8004a2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a30:	08004a41 	.word	0x08004a41
 8004a34:	08004a4d 	.word	0x08004a4d
 8004a38:	08004a47 	.word	0x08004a47
 8004a3c:	08004a53 	.word	0x08004a53
 8004a40:	2301      	movs	r3, #1
 8004a42:	77fb      	strb	r3, [r7, #31]
 8004a44:	e150      	b.n	8004ce8 <UART_SetConfig+0x348>
 8004a46:	2302      	movs	r3, #2
 8004a48:	77fb      	strb	r3, [r7, #31]
 8004a4a:	e14d      	b.n	8004ce8 <UART_SetConfig+0x348>
 8004a4c:	2304      	movs	r3, #4
 8004a4e:	77fb      	strb	r3, [r7, #31]
 8004a50:	e14a      	b.n	8004ce8 <UART_SetConfig+0x348>
 8004a52:	2308      	movs	r3, #8
 8004a54:	77fb      	strb	r3, [r7, #31]
 8004a56:	e147      	b.n	8004ce8 <UART_SetConfig+0x348>
 8004a58:	2310      	movs	r3, #16
 8004a5a:	77fb      	strb	r3, [r7, #31]
 8004a5c:	e144      	b.n	8004ce8 <UART_SetConfig+0x348>
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	4a83      	ldr	r2, [pc, #524]	@ (8004c70 <UART_SetConfig+0x2d0>)
 8004a64:	4293      	cmp	r3, r2
 8004a66:	d132      	bne.n	8004ace <UART_SetConfig+0x12e>
 8004a68:	4b80      	ldr	r3, [pc, #512]	@ (8004c6c <UART_SetConfig+0x2cc>)
 8004a6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004a6e:	f003 030c 	and.w	r3, r3, #12
 8004a72:	2b0c      	cmp	r3, #12
 8004a74:	d828      	bhi.n	8004ac8 <UART_SetConfig+0x128>
 8004a76:	a201      	add	r2, pc, #4	@ (adr r2, 8004a7c <UART_SetConfig+0xdc>)
 8004a78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a7c:	08004ab1 	.word	0x08004ab1
 8004a80:	08004ac9 	.word	0x08004ac9
 8004a84:	08004ac9 	.word	0x08004ac9
 8004a88:	08004ac9 	.word	0x08004ac9
 8004a8c:	08004abd 	.word	0x08004abd
 8004a90:	08004ac9 	.word	0x08004ac9
 8004a94:	08004ac9 	.word	0x08004ac9
 8004a98:	08004ac9 	.word	0x08004ac9
 8004a9c:	08004ab7 	.word	0x08004ab7
 8004aa0:	08004ac9 	.word	0x08004ac9
 8004aa4:	08004ac9 	.word	0x08004ac9
 8004aa8:	08004ac9 	.word	0x08004ac9
 8004aac:	08004ac3 	.word	0x08004ac3
 8004ab0:	2300      	movs	r3, #0
 8004ab2:	77fb      	strb	r3, [r7, #31]
 8004ab4:	e118      	b.n	8004ce8 <UART_SetConfig+0x348>
 8004ab6:	2302      	movs	r3, #2
 8004ab8:	77fb      	strb	r3, [r7, #31]
 8004aba:	e115      	b.n	8004ce8 <UART_SetConfig+0x348>
 8004abc:	2304      	movs	r3, #4
 8004abe:	77fb      	strb	r3, [r7, #31]
 8004ac0:	e112      	b.n	8004ce8 <UART_SetConfig+0x348>
 8004ac2:	2308      	movs	r3, #8
 8004ac4:	77fb      	strb	r3, [r7, #31]
 8004ac6:	e10f      	b.n	8004ce8 <UART_SetConfig+0x348>
 8004ac8:	2310      	movs	r3, #16
 8004aca:	77fb      	strb	r3, [r7, #31]
 8004acc:	e10c      	b.n	8004ce8 <UART_SetConfig+0x348>
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	4a68      	ldr	r2, [pc, #416]	@ (8004c74 <UART_SetConfig+0x2d4>)
 8004ad4:	4293      	cmp	r3, r2
 8004ad6:	d120      	bne.n	8004b1a <UART_SetConfig+0x17a>
 8004ad8:	4b64      	ldr	r3, [pc, #400]	@ (8004c6c <UART_SetConfig+0x2cc>)
 8004ada:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004ade:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8004ae2:	2b30      	cmp	r3, #48	@ 0x30
 8004ae4:	d013      	beq.n	8004b0e <UART_SetConfig+0x16e>
 8004ae6:	2b30      	cmp	r3, #48	@ 0x30
 8004ae8:	d814      	bhi.n	8004b14 <UART_SetConfig+0x174>
 8004aea:	2b20      	cmp	r3, #32
 8004aec:	d009      	beq.n	8004b02 <UART_SetConfig+0x162>
 8004aee:	2b20      	cmp	r3, #32
 8004af0:	d810      	bhi.n	8004b14 <UART_SetConfig+0x174>
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d002      	beq.n	8004afc <UART_SetConfig+0x15c>
 8004af6:	2b10      	cmp	r3, #16
 8004af8:	d006      	beq.n	8004b08 <UART_SetConfig+0x168>
 8004afa:	e00b      	b.n	8004b14 <UART_SetConfig+0x174>
 8004afc:	2300      	movs	r3, #0
 8004afe:	77fb      	strb	r3, [r7, #31]
 8004b00:	e0f2      	b.n	8004ce8 <UART_SetConfig+0x348>
 8004b02:	2302      	movs	r3, #2
 8004b04:	77fb      	strb	r3, [r7, #31]
 8004b06:	e0ef      	b.n	8004ce8 <UART_SetConfig+0x348>
 8004b08:	2304      	movs	r3, #4
 8004b0a:	77fb      	strb	r3, [r7, #31]
 8004b0c:	e0ec      	b.n	8004ce8 <UART_SetConfig+0x348>
 8004b0e:	2308      	movs	r3, #8
 8004b10:	77fb      	strb	r3, [r7, #31]
 8004b12:	e0e9      	b.n	8004ce8 <UART_SetConfig+0x348>
 8004b14:	2310      	movs	r3, #16
 8004b16:	77fb      	strb	r3, [r7, #31]
 8004b18:	e0e6      	b.n	8004ce8 <UART_SetConfig+0x348>
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	4a56      	ldr	r2, [pc, #344]	@ (8004c78 <UART_SetConfig+0x2d8>)
 8004b20:	4293      	cmp	r3, r2
 8004b22:	d120      	bne.n	8004b66 <UART_SetConfig+0x1c6>
 8004b24:	4b51      	ldr	r3, [pc, #324]	@ (8004c6c <UART_SetConfig+0x2cc>)
 8004b26:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004b2a:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8004b2e:	2bc0      	cmp	r3, #192	@ 0xc0
 8004b30:	d013      	beq.n	8004b5a <UART_SetConfig+0x1ba>
 8004b32:	2bc0      	cmp	r3, #192	@ 0xc0
 8004b34:	d814      	bhi.n	8004b60 <UART_SetConfig+0x1c0>
 8004b36:	2b80      	cmp	r3, #128	@ 0x80
 8004b38:	d009      	beq.n	8004b4e <UART_SetConfig+0x1ae>
 8004b3a:	2b80      	cmp	r3, #128	@ 0x80
 8004b3c:	d810      	bhi.n	8004b60 <UART_SetConfig+0x1c0>
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d002      	beq.n	8004b48 <UART_SetConfig+0x1a8>
 8004b42:	2b40      	cmp	r3, #64	@ 0x40
 8004b44:	d006      	beq.n	8004b54 <UART_SetConfig+0x1b4>
 8004b46:	e00b      	b.n	8004b60 <UART_SetConfig+0x1c0>
 8004b48:	2300      	movs	r3, #0
 8004b4a:	77fb      	strb	r3, [r7, #31]
 8004b4c:	e0cc      	b.n	8004ce8 <UART_SetConfig+0x348>
 8004b4e:	2302      	movs	r3, #2
 8004b50:	77fb      	strb	r3, [r7, #31]
 8004b52:	e0c9      	b.n	8004ce8 <UART_SetConfig+0x348>
 8004b54:	2304      	movs	r3, #4
 8004b56:	77fb      	strb	r3, [r7, #31]
 8004b58:	e0c6      	b.n	8004ce8 <UART_SetConfig+0x348>
 8004b5a:	2308      	movs	r3, #8
 8004b5c:	77fb      	strb	r3, [r7, #31]
 8004b5e:	e0c3      	b.n	8004ce8 <UART_SetConfig+0x348>
 8004b60:	2310      	movs	r3, #16
 8004b62:	77fb      	strb	r3, [r7, #31]
 8004b64:	e0c0      	b.n	8004ce8 <UART_SetConfig+0x348>
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	4a44      	ldr	r2, [pc, #272]	@ (8004c7c <UART_SetConfig+0x2dc>)
 8004b6c:	4293      	cmp	r3, r2
 8004b6e:	d125      	bne.n	8004bbc <UART_SetConfig+0x21c>
 8004b70:	4b3e      	ldr	r3, [pc, #248]	@ (8004c6c <UART_SetConfig+0x2cc>)
 8004b72:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004b76:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004b7a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004b7e:	d017      	beq.n	8004bb0 <UART_SetConfig+0x210>
 8004b80:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004b84:	d817      	bhi.n	8004bb6 <UART_SetConfig+0x216>
 8004b86:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004b8a:	d00b      	beq.n	8004ba4 <UART_SetConfig+0x204>
 8004b8c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004b90:	d811      	bhi.n	8004bb6 <UART_SetConfig+0x216>
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d003      	beq.n	8004b9e <UART_SetConfig+0x1fe>
 8004b96:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004b9a:	d006      	beq.n	8004baa <UART_SetConfig+0x20a>
 8004b9c:	e00b      	b.n	8004bb6 <UART_SetConfig+0x216>
 8004b9e:	2300      	movs	r3, #0
 8004ba0:	77fb      	strb	r3, [r7, #31]
 8004ba2:	e0a1      	b.n	8004ce8 <UART_SetConfig+0x348>
 8004ba4:	2302      	movs	r3, #2
 8004ba6:	77fb      	strb	r3, [r7, #31]
 8004ba8:	e09e      	b.n	8004ce8 <UART_SetConfig+0x348>
 8004baa:	2304      	movs	r3, #4
 8004bac:	77fb      	strb	r3, [r7, #31]
 8004bae:	e09b      	b.n	8004ce8 <UART_SetConfig+0x348>
 8004bb0:	2308      	movs	r3, #8
 8004bb2:	77fb      	strb	r3, [r7, #31]
 8004bb4:	e098      	b.n	8004ce8 <UART_SetConfig+0x348>
 8004bb6:	2310      	movs	r3, #16
 8004bb8:	77fb      	strb	r3, [r7, #31]
 8004bba:	e095      	b.n	8004ce8 <UART_SetConfig+0x348>
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	4a2f      	ldr	r2, [pc, #188]	@ (8004c80 <UART_SetConfig+0x2e0>)
 8004bc2:	4293      	cmp	r3, r2
 8004bc4:	d125      	bne.n	8004c12 <UART_SetConfig+0x272>
 8004bc6:	4b29      	ldr	r3, [pc, #164]	@ (8004c6c <UART_SetConfig+0x2cc>)
 8004bc8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004bcc:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8004bd0:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004bd4:	d017      	beq.n	8004c06 <UART_SetConfig+0x266>
 8004bd6:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004bda:	d817      	bhi.n	8004c0c <UART_SetConfig+0x26c>
 8004bdc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004be0:	d00b      	beq.n	8004bfa <UART_SetConfig+0x25a>
 8004be2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004be6:	d811      	bhi.n	8004c0c <UART_SetConfig+0x26c>
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d003      	beq.n	8004bf4 <UART_SetConfig+0x254>
 8004bec:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004bf0:	d006      	beq.n	8004c00 <UART_SetConfig+0x260>
 8004bf2:	e00b      	b.n	8004c0c <UART_SetConfig+0x26c>
 8004bf4:	2301      	movs	r3, #1
 8004bf6:	77fb      	strb	r3, [r7, #31]
 8004bf8:	e076      	b.n	8004ce8 <UART_SetConfig+0x348>
 8004bfa:	2302      	movs	r3, #2
 8004bfc:	77fb      	strb	r3, [r7, #31]
 8004bfe:	e073      	b.n	8004ce8 <UART_SetConfig+0x348>
 8004c00:	2304      	movs	r3, #4
 8004c02:	77fb      	strb	r3, [r7, #31]
 8004c04:	e070      	b.n	8004ce8 <UART_SetConfig+0x348>
 8004c06:	2308      	movs	r3, #8
 8004c08:	77fb      	strb	r3, [r7, #31]
 8004c0a:	e06d      	b.n	8004ce8 <UART_SetConfig+0x348>
 8004c0c:	2310      	movs	r3, #16
 8004c0e:	77fb      	strb	r3, [r7, #31]
 8004c10:	e06a      	b.n	8004ce8 <UART_SetConfig+0x348>
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	4a1b      	ldr	r2, [pc, #108]	@ (8004c84 <UART_SetConfig+0x2e4>)
 8004c18:	4293      	cmp	r3, r2
 8004c1a:	d138      	bne.n	8004c8e <UART_SetConfig+0x2ee>
 8004c1c:	4b13      	ldr	r3, [pc, #76]	@ (8004c6c <UART_SetConfig+0x2cc>)
 8004c1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004c22:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8004c26:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8004c2a:	d017      	beq.n	8004c5c <UART_SetConfig+0x2bc>
 8004c2c:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8004c30:	d82a      	bhi.n	8004c88 <UART_SetConfig+0x2e8>
 8004c32:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004c36:	d00b      	beq.n	8004c50 <UART_SetConfig+0x2b0>
 8004c38:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004c3c:	d824      	bhi.n	8004c88 <UART_SetConfig+0x2e8>
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d003      	beq.n	8004c4a <UART_SetConfig+0x2aa>
 8004c42:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004c46:	d006      	beq.n	8004c56 <UART_SetConfig+0x2b6>
 8004c48:	e01e      	b.n	8004c88 <UART_SetConfig+0x2e8>
 8004c4a:	2300      	movs	r3, #0
 8004c4c:	77fb      	strb	r3, [r7, #31]
 8004c4e:	e04b      	b.n	8004ce8 <UART_SetConfig+0x348>
 8004c50:	2302      	movs	r3, #2
 8004c52:	77fb      	strb	r3, [r7, #31]
 8004c54:	e048      	b.n	8004ce8 <UART_SetConfig+0x348>
 8004c56:	2304      	movs	r3, #4
 8004c58:	77fb      	strb	r3, [r7, #31]
 8004c5a:	e045      	b.n	8004ce8 <UART_SetConfig+0x348>
 8004c5c:	2308      	movs	r3, #8
 8004c5e:	77fb      	strb	r3, [r7, #31]
 8004c60:	e042      	b.n	8004ce8 <UART_SetConfig+0x348>
 8004c62:	bf00      	nop
 8004c64:	efff69f3 	.word	0xefff69f3
 8004c68:	40011000 	.word	0x40011000
 8004c6c:	40023800 	.word	0x40023800
 8004c70:	40004400 	.word	0x40004400
 8004c74:	40004800 	.word	0x40004800
 8004c78:	40004c00 	.word	0x40004c00
 8004c7c:	40005000 	.word	0x40005000
 8004c80:	40011400 	.word	0x40011400
 8004c84:	40007800 	.word	0x40007800
 8004c88:	2310      	movs	r3, #16
 8004c8a:	77fb      	strb	r3, [r7, #31]
 8004c8c:	e02c      	b.n	8004ce8 <UART_SetConfig+0x348>
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	4a72      	ldr	r2, [pc, #456]	@ (8004e5c <UART_SetConfig+0x4bc>)
 8004c94:	4293      	cmp	r3, r2
 8004c96:	d125      	bne.n	8004ce4 <UART_SetConfig+0x344>
 8004c98:	4b71      	ldr	r3, [pc, #452]	@ (8004e60 <UART_SetConfig+0x4c0>)
 8004c9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004c9e:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8004ca2:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8004ca6:	d017      	beq.n	8004cd8 <UART_SetConfig+0x338>
 8004ca8:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8004cac:	d817      	bhi.n	8004cde <UART_SetConfig+0x33e>
 8004cae:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004cb2:	d00b      	beq.n	8004ccc <UART_SetConfig+0x32c>
 8004cb4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004cb8:	d811      	bhi.n	8004cde <UART_SetConfig+0x33e>
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d003      	beq.n	8004cc6 <UART_SetConfig+0x326>
 8004cbe:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004cc2:	d006      	beq.n	8004cd2 <UART_SetConfig+0x332>
 8004cc4:	e00b      	b.n	8004cde <UART_SetConfig+0x33e>
 8004cc6:	2300      	movs	r3, #0
 8004cc8:	77fb      	strb	r3, [r7, #31]
 8004cca:	e00d      	b.n	8004ce8 <UART_SetConfig+0x348>
 8004ccc:	2302      	movs	r3, #2
 8004cce:	77fb      	strb	r3, [r7, #31]
 8004cd0:	e00a      	b.n	8004ce8 <UART_SetConfig+0x348>
 8004cd2:	2304      	movs	r3, #4
 8004cd4:	77fb      	strb	r3, [r7, #31]
 8004cd6:	e007      	b.n	8004ce8 <UART_SetConfig+0x348>
 8004cd8:	2308      	movs	r3, #8
 8004cda:	77fb      	strb	r3, [r7, #31]
 8004cdc:	e004      	b.n	8004ce8 <UART_SetConfig+0x348>
 8004cde:	2310      	movs	r3, #16
 8004ce0:	77fb      	strb	r3, [r7, #31]
 8004ce2:	e001      	b.n	8004ce8 <UART_SetConfig+0x348>
 8004ce4:	2310      	movs	r3, #16
 8004ce6:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	69db      	ldr	r3, [r3, #28]
 8004cec:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004cf0:	d15b      	bne.n	8004daa <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8004cf2:	7ffb      	ldrb	r3, [r7, #31]
 8004cf4:	2b08      	cmp	r3, #8
 8004cf6:	d828      	bhi.n	8004d4a <UART_SetConfig+0x3aa>
 8004cf8:	a201      	add	r2, pc, #4	@ (adr r2, 8004d00 <UART_SetConfig+0x360>)
 8004cfa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004cfe:	bf00      	nop
 8004d00:	08004d25 	.word	0x08004d25
 8004d04:	08004d2d 	.word	0x08004d2d
 8004d08:	08004d35 	.word	0x08004d35
 8004d0c:	08004d4b 	.word	0x08004d4b
 8004d10:	08004d3b 	.word	0x08004d3b
 8004d14:	08004d4b 	.word	0x08004d4b
 8004d18:	08004d4b 	.word	0x08004d4b
 8004d1c:	08004d4b 	.word	0x08004d4b
 8004d20:	08004d43 	.word	0x08004d43
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004d24:	f7fd fb56 	bl	80023d4 <HAL_RCC_GetPCLK1Freq>
 8004d28:	61b8      	str	r0, [r7, #24]
        break;
 8004d2a:	e013      	b.n	8004d54 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004d2c:	f7fd fb66 	bl	80023fc <HAL_RCC_GetPCLK2Freq>
 8004d30:	61b8      	str	r0, [r7, #24]
        break;
 8004d32:	e00f      	b.n	8004d54 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004d34:	4b4b      	ldr	r3, [pc, #300]	@ (8004e64 <UART_SetConfig+0x4c4>)
 8004d36:	61bb      	str	r3, [r7, #24]
        break;
 8004d38:	e00c      	b.n	8004d54 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004d3a:	f7fd fa39 	bl	80021b0 <HAL_RCC_GetSysClockFreq>
 8004d3e:	61b8      	str	r0, [r7, #24]
        break;
 8004d40:	e008      	b.n	8004d54 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004d42:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004d46:	61bb      	str	r3, [r7, #24]
        break;
 8004d48:	e004      	b.n	8004d54 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8004d4a:	2300      	movs	r3, #0
 8004d4c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004d4e:	2301      	movs	r3, #1
 8004d50:	77bb      	strb	r3, [r7, #30]
        break;
 8004d52:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004d54:	69bb      	ldr	r3, [r7, #24]
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d074      	beq.n	8004e44 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004d5a:	69bb      	ldr	r3, [r7, #24]
 8004d5c:	005a      	lsls	r2, r3, #1
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	685b      	ldr	r3, [r3, #4]
 8004d62:	085b      	lsrs	r3, r3, #1
 8004d64:	441a      	add	r2, r3
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	685b      	ldr	r3, [r3, #4]
 8004d6a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d6e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004d70:	693b      	ldr	r3, [r7, #16]
 8004d72:	2b0f      	cmp	r3, #15
 8004d74:	d916      	bls.n	8004da4 <UART_SetConfig+0x404>
 8004d76:	693b      	ldr	r3, [r7, #16]
 8004d78:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004d7c:	d212      	bcs.n	8004da4 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004d7e:	693b      	ldr	r3, [r7, #16]
 8004d80:	b29b      	uxth	r3, r3
 8004d82:	f023 030f 	bic.w	r3, r3, #15
 8004d86:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004d88:	693b      	ldr	r3, [r7, #16]
 8004d8a:	085b      	lsrs	r3, r3, #1
 8004d8c:	b29b      	uxth	r3, r3
 8004d8e:	f003 0307 	and.w	r3, r3, #7
 8004d92:	b29a      	uxth	r2, r3
 8004d94:	89fb      	ldrh	r3, [r7, #14]
 8004d96:	4313      	orrs	r3, r2
 8004d98:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	89fa      	ldrh	r2, [r7, #14]
 8004da0:	60da      	str	r2, [r3, #12]
 8004da2:	e04f      	b.n	8004e44 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8004da4:	2301      	movs	r3, #1
 8004da6:	77bb      	strb	r3, [r7, #30]
 8004da8:	e04c      	b.n	8004e44 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004daa:	7ffb      	ldrb	r3, [r7, #31]
 8004dac:	2b08      	cmp	r3, #8
 8004dae:	d828      	bhi.n	8004e02 <UART_SetConfig+0x462>
 8004db0:	a201      	add	r2, pc, #4	@ (adr r2, 8004db8 <UART_SetConfig+0x418>)
 8004db2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004db6:	bf00      	nop
 8004db8:	08004ddd 	.word	0x08004ddd
 8004dbc:	08004de5 	.word	0x08004de5
 8004dc0:	08004ded 	.word	0x08004ded
 8004dc4:	08004e03 	.word	0x08004e03
 8004dc8:	08004df3 	.word	0x08004df3
 8004dcc:	08004e03 	.word	0x08004e03
 8004dd0:	08004e03 	.word	0x08004e03
 8004dd4:	08004e03 	.word	0x08004e03
 8004dd8:	08004dfb 	.word	0x08004dfb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004ddc:	f7fd fafa 	bl	80023d4 <HAL_RCC_GetPCLK1Freq>
 8004de0:	61b8      	str	r0, [r7, #24]
        break;
 8004de2:	e013      	b.n	8004e0c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004de4:	f7fd fb0a 	bl	80023fc <HAL_RCC_GetPCLK2Freq>
 8004de8:	61b8      	str	r0, [r7, #24]
        break;
 8004dea:	e00f      	b.n	8004e0c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004dec:	4b1d      	ldr	r3, [pc, #116]	@ (8004e64 <UART_SetConfig+0x4c4>)
 8004dee:	61bb      	str	r3, [r7, #24]
        break;
 8004df0:	e00c      	b.n	8004e0c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004df2:	f7fd f9dd 	bl	80021b0 <HAL_RCC_GetSysClockFreq>
 8004df6:	61b8      	str	r0, [r7, #24]
        break;
 8004df8:	e008      	b.n	8004e0c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004dfa:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004dfe:	61bb      	str	r3, [r7, #24]
        break;
 8004e00:	e004      	b.n	8004e0c <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8004e02:	2300      	movs	r3, #0
 8004e04:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004e06:	2301      	movs	r3, #1
 8004e08:	77bb      	strb	r3, [r7, #30]
        break;
 8004e0a:	bf00      	nop
    }

    if (pclk != 0U)
 8004e0c:	69bb      	ldr	r3, [r7, #24]
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d018      	beq.n	8004e44 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	685b      	ldr	r3, [r3, #4]
 8004e16:	085a      	lsrs	r2, r3, #1
 8004e18:	69bb      	ldr	r3, [r7, #24]
 8004e1a:	441a      	add	r2, r3
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	685b      	ldr	r3, [r3, #4]
 8004e20:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e24:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004e26:	693b      	ldr	r3, [r7, #16]
 8004e28:	2b0f      	cmp	r3, #15
 8004e2a:	d909      	bls.n	8004e40 <UART_SetConfig+0x4a0>
 8004e2c:	693b      	ldr	r3, [r7, #16]
 8004e2e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004e32:	d205      	bcs.n	8004e40 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004e34:	693b      	ldr	r3, [r7, #16]
 8004e36:	b29a      	uxth	r2, r3
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	60da      	str	r2, [r3, #12]
 8004e3e:	e001      	b.n	8004e44 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8004e40:	2301      	movs	r3, #1
 8004e42:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	2200      	movs	r2, #0
 8004e48:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	2200      	movs	r2, #0
 8004e4e:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8004e50:	7fbb      	ldrb	r3, [r7, #30]
}
 8004e52:	4618      	mov	r0, r3
 8004e54:	3720      	adds	r7, #32
 8004e56:	46bd      	mov	sp, r7
 8004e58:	bd80      	pop	{r7, pc}
 8004e5a:	bf00      	nop
 8004e5c:	40007c00 	.word	0x40007c00
 8004e60:	40023800 	.word	0x40023800
 8004e64:	00f42400 	.word	0x00f42400

08004e68 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004e68:	b480      	push	{r7}
 8004e6a:	b083      	sub	sp, #12
 8004e6c:	af00      	add	r7, sp, #0
 8004e6e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e74:	f003 0308 	and.w	r3, r3, #8
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	d00a      	beq.n	8004e92 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	685b      	ldr	r3, [r3, #4]
 8004e82:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	430a      	orrs	r2, r1
 8004e90:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e96:	f003 0301 	and.w	r3, r3, #1
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d00a      	beq.n	8004eb4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	685b      	ldr	r3, [r3, #4]
 8004ea4:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	430a      	orrs	r2, r1
 8004eb2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004eb8:	f003 0302 	and.w	r3, r3, #2
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d00a      	beq.n	8004ed6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	685b      	ldr	r3, [r3, #4]
 8004ec6:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	430a      	orrs	r2, r1
 8004ed4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004eda:	f003 0304 	and.w	r3, r3, #4
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d00a      	beq.n	8004ef8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	685b      	ldr	r3, [r3, #4]
 8004ee8:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	430a      	orrs	r2, r1
 8004ef6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004efc:	f003 0310 	and.w	r3, r3, #16
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d00a      	beq.n	8004f1a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	689b      	ldr	r3, [r3, #8]
 8004f0a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	430a      	orrs	r2, r1
 8004f18:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f1e:	f003 0320 	and.w	r3, r3, #32
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d00a      	beq.n	8004f3c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	689b      	ldr	r3, [r3, #8]
 8004f2c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	430a      	orrs	r2, r1
 8004f3a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f40:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d01a      	beq.n	8004f7e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	685b      	ldr	r3, [r3, #4]
 8004f4e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	430a      	orrs	r2, r1
 8004f5c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f62:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004f66:	d10a      	bne.n	8004f7e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	685b      	ldr	r3, [r3, #4]
 8004f6e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	430a      	orrs	r2, r1
 8004f7c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f82:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d00a      	beq.n	8004fa0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	685b      	ldr	r3, [r3, #4]
 8004f90:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	430a      	orrs	r2, r1
 8004f9e:	605a      	str	r2, [r3, #4]
  }
}
 8004fa0:	bf00      	nop
 8004fa2:	370c      	adds	r7, #12
 8004fa4:	46bd      	mov	sp, r7
 8004fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004faa:	4770      	bx	lr

08004fac <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004fac:	b580      	push	{r7, lr}
 8004fae:	b098      	sub	sp, #96	@ 0x60
 8004fb0:	af02      	add	r7, sp, #8
 8004fb2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	2200      	movs	r2, #0
 8004fb8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004fbc:	f7fc f9f6 	bl	80013ac <HAL_GetTick>
 8004fc0:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	f003 0308 	and.w	r3, r3, #8
 8004fcc:	2b08      	cmp	r3, #8
 8004fce:	d12e      	bne.n	800502e <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004fd0:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004fd4:	9300      	str	r3, [sp, #0]
 8004fd6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004fd8:	2200      	movs	r2, #0
 8004fda:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8004fde:	6878      	ldr	r0, [r7, #4]
 8004fe0:	f000 f88c 	bl	80050fc <UART_WaitOnFlagUntilTimeout>
 8004fe4:	4603      	mov	r3, r0
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d021      	beq.n	800502e <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ff0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004ff2:	e853 3f00 	ldrex	r3, [r3]
 8004ff6:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004ff8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004ffa:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004ffe:	653b      	str	r3, [r7, #80]	@ 0x50
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	461a      	mov	r2, r3
 8005006:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005008:	647b      	str	r3, [r7, #68]	@ 0x44
 800500a:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800500c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800500e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005010:	e841 2300 	strex	r3, r2, [r1]
 8005014:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005016:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005018:	2b00      	cmp	r3, #0
 800501a:	d1e6      	bne.n	8004fea <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	2220      	movs	r2, #32
 8005020:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	2200      	movs	r2, #0
 8005026:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800502a:	2303      	movs	r3, #3
 800502c:	e062      	b.n	80050f4 <UART_CheckIdleState+0x148>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	f003 0304 	and.w	r3, r3, #4
 8005038:	2b04      	cmp	r3, #4
 800503a:	d149      	bne.n	80050d0 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800503c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005040:	9300      	str	r3, [sp, #0]
 8005042:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005044:	2200      	movs	r2, #0
 8005046:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800504a:	6878      	ldr	r0, [r7, #4]
 800504c:	f000 f856 	bl	80050fc <UART_WaitOnFlagUntilTimeout>
 8005050:	4603      	mov	r3, r0
 8005052:	2b00      	cmp	r3, #0
 8005054:	d03c      	beq.n	80050d0 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800505c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800505e:	e853 3f00 	ldrex	r3, [r3]
 8005062:	623b      	str	r3, [r7, #32]
   return(result);
 8005064:	6a3b      	ldr	r3, [r7, #32]
 8005066:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800506a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	461a      	mov	r2, r3
 8005072:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005074:	633b      	str	r3, [r7, #48]	@ 0x30
 8005076:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005078:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800507a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800507c:	e841 2300 	strex	r3, r2, [r1]
 8005080:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005082:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005084:	2b00      	cmp	r3, #0
 8005086:	d1e6      	bne.n	8005056 <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	3308      	adds	r3, #8
 800508e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005090:	693b      	ldr	r3, [r7, #16]
 8005092:	e853 3f00 	ldrex	r3, [r3]
 8005096:	60fb      	str	r3, [r7, #12]
   return(result);
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	f023 0301 	bic.w	r3, r3, #1
 800509e:	64bb      	str	r3, [r7, #72]	@ 0x48
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	3308      	adds	r3, #8
 80050a6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80050a8:	61fa      	str	r2, [r7, #28]
 80050aa:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050ac:	69b9      	ldr	r1, [r7, #24]
 80050ae:	69fa      	ldr	r2, [r7, #28]
 80050b0:	e841 2300 	strex	r3, r2, [r1]
 80050b4:	617b      	str	r3, [r7, #20]
   return(result);
 80050b6:	697b      	ldr	r3, [r7, #20]
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d1e5      	bne.n	8005088 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	2220      	movs	r2, #32
 80050c0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	2200      	movs	r2, #0
 80050c8:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80050cc:	2303      	movs	r3, #3
 80050ce:	e011      	b.n	80050f4 <UART_CheckIdleState+0x148>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	2220      	movs	r2, #32
 80050d4:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	2220      	movs	r2, #32
 80050da:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	2200      	movs	r2, #0
 80050e2:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	2200      	movs	r2, #0
 80050e8:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	2200      	movs	r2, #0
 80050ee:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 80050f2:	2300      	movs	r3, #0
}
 80050f4:	4618      	mov	r0, r3
 80050f6:	3758      	adds	r7, #88	@ 0x58
 80050f8:	46bd      	mov	sp, r7
 80050fa:	bd80      	pop	{r7, pc}

080050fc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80050fc:	b580      	push	{r7, lr}
 80050fe:	b084      	sub	sp, #16
 8005100:	af00      	add	r7, sp, #0
 8005102:	60f8      	str	r0, [r7, #12]
 8005104:	60b9      	str	r1, [r7, #8]
 8005106:	603b      	str	r3, [r7, #0]
 8005108:	4613      	mov	r3, r2
 800510a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800510c:	e04f      	b.n	80051ae <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800510e:	69bb      	ldr	r3, [r7, #24]
 8005110:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005114:	d04b      	beq.n	80051ae <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005116:	f7fc f949 	bl	80013ac <HAL_GetTick>
 800511a:	4602      	mov	r2, r0
 800511c:	683b      	ldr	r3, [r7, #0]
 800511e:	1ad3      	subs	r3, r2, r3
 8005120:	69ba      	ldr	r2, [r7, #24]
 8005122:	429a      	cmp	r2, r3
 8005124:	d302      	bcc.n	800512c <UART_WaitOnFlagUntilTimeout+0x30>
 8005126:	69bb      	ldr	r3, [r7, #24]
 8005128:	2b00      	cmp	r3, #0
 800512a:	d101      	bne.n	8005130 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800512c:	2303      	movs	r3, #3
 800512e:	e04e      	b.n	80051ce <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	f003 0304 	and.w	r3, r3, #4
 800513a:	2b00      	cmp	r3, #0
 800513c:	d037      	beq.n	80051ae <UART_WaitOnFlagUntilTimeout+0xb2>
 800513e:	68bb      	ldr	r3, [r7, #8]
 8005140:	2b80      	cmp	r3, #128	@ 0x80
 8005142:	d034      	beq.n	80051ae <UART_WaitOnFlagUntilTimeout+0xb2>
 8005144:	68bb      	ldr	r3, [r7, #8]
 8005146:	2b40      	cmp	r3, #64	@ 0x40
 8005148:	d031      	beq.n	80051ae <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	69db      	ldr	r3, [r3, #28]
 8005150:	f003 0308 	and.w	r3, r3, #8
 8005154:	2b08      	cmp	r3, #8
 8005156:	d110      	bne.n	800517a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	2208      	movs	r2, #8
 800515e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005160:	68f8      	ldr	r0, [r7, #12]
 8005162:	f000 f838 	bl	80051d6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	2208      	movs	r2, #8
 800516a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	2200      	movs	r2, #0
 8005172:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8005176:	2301      	movs	r3, #1
 8005178:	e029      	b.n	80051ce <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	69db      	ldr	r3, [r3, #28]
 8005180:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005184:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005188:	d111      	bne.n	80051ae <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005192:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005194:	68f8      	ldr	r0, [r7, #12]
 8005196:	f000 f81e 	bl	80051d6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	2220      	movs	r2, #32
 800519e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	2200      	movs	r2, #0
 80051a6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 80051aa:	2303      	movs	r3, #3
 80051ac:	e00f      	b.n	80051ce <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	69da      	ldr	r2, [r3, #28]
 80051b4:	68bb      	ldr	r3, [r7, #8]
 80051b6:	4013      	ands	r3, r2
 80051b8:	68ba      	ldr	r2, [r7, #8]
 80051ba:	429a      	cmp	r2, r3
 80051bc:	bf0c      	ite	eq
 80051be:	2301      	moveq	r3, #1
 80051c0:	2300      	movne	r3, #0
 80051c2:	b2db      	uxtb	r3, r3
 80051c4:	461a      	mov	r2, r3
 80051c6:	79fb      	ldrb	r3, [r7, #7]
 80051c8:	429a      	cmp	r2, r3
 80051ca:	d0a0      	beq.n	800510e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80051cc:	2300      	movs	r3, #0
}
 80051ce:	4618      	mov	r0, r3
 80051d0:	3710      	adds	r7, #16
 80051d2:	46bd      	mov	sp, r7
 80051d4:	bd80      	pop	{r7, pc}

080051d6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80051d6:	b480      	push	{r7}
 80051d8:	b095      	sub	sp, #84	@ 0x54
 80051da:	af00      	add	r7, sp, #0
 80051dc:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051e4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80051e6:	e853 3f00 	ldrex	r3, [r3]
 80051ea:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80051ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80051ee:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80051f2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	461a      	mov	r2, r3
 80051fa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80051fc:	643b      	str	r3, [r7, #64]	@ 0x40
 80051fe:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005200:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005202:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005204:	e841 2300 	strex	r3, r2, [r1]
 8005208:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800520a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800520c:	2b00      	cmp	r3, #0
 800520e:	d1e6      	bne.n	80051de <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	3308      	adds	r3, #8
 8005216:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005218:	6a3b      	ldr	r3, [r7, #32]
 800521a:	e853 3f00 	ldrex	r3, [r3]
 800521e:	61fb      	str	r3, [r7, #28]
   return(result);
 8005220:	69fb      	ldr	r3, [r7, #28]
 8005222:	f023 0301 	bic.w	r3, r3, #1
 8005226:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	3308      	adds	r3, #8
 800522e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005230:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005232:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005234:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005236:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005238:	e841 2300 	strex	r3, r2, [r1]
 800523c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800523e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005240:	2b00      	cmp	r3, #0
 8005242:	d1e5      	bne.n	8005210 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005248:	2b01      	cmp	r3, #1
 800524a:	d118      	bne.n	800527e <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	e853 3f00 	ldrex	r3, [r3]
 8005258:	60bb      	str	r3, [r7, #8]
   return(result);
 800525a:	68bb      	ldr	r3, [r7, #8]
 800525c:	f023 0310 	bic.w	r3, r3, #16
 8005260:	647b      	str	r3, [r7, #68]	@ 0x44
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	461a      	mov	r2, r3
 8005268:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800526a:	61bb      	str	r3, [r7, #24]
 800526c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800526e:	6979      	ldr	r1, [r7, #20]
 8005270:	69ba      	ldr	r2, [r7, #24]
 8005272:	e841 2300 	strex	r3, r2, [r1]
 8005276:	613b      	str	r3, [r7, #16]
   return(result);
 8005278:	693b      	ldr	r3, [r7, #16]
 800527a:	2b00      	cmp	r3, #0
 800527c:	d1e6      	bne.n	800524c <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	2220      	movs	r2, #32
 8005282:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	2200      	movs	r2, #0
 800528a:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	2200      	movs	r2, #0
 8005290:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8005292:	bf00      	nop
 8005294:	3754      	adds	r7, #84	@ 0x54
 8005296:	46bd      	mov	sp, r7
 8005298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800529c:	4770      	bx	lr
	...

080052a0 <siprintf>:
 80052a0:	b40e      	push	{r1, r2, r3}
 80052a2:	b500      	push	{lr}
 80052a4:	b09c      	sub	sp, #112	@ 0x70
 80052a6:	ab1d      	add	r3, sp, #116	@ 0x74
 80052a8:	9002      	str	r0, [sp, #8]
 80052aa:	9006      	str	r0, [sp, #24]
 80052ac:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80052b0:	4809      	ldr	r0, [pc, #36]	@ (80052d8 <siprintf+0x38>)
 80052b2:	9107      	str	r1, [sp, #28]
 80052b4:	9104      	str	r1, [sp, #16]
 80052b6:	4909      	ldr	r1, [pc, #36]	@ (80052dc <siprintf+0x3c>)
 80052b8:	f853 2b04 	ldr.w	r2, [r3], #4
 80052bc:	9105      	str	r1, [sp, #20]
 80052be:	6800      	ldr	r0, [r0, #0]
 80052c0:	9301      	str	r3, [sp, #4]
 80052c2:	a902      	add	r1, sp, #8
 80052c4:	f000 f994 	bl	80055f0 <_svfiprintf_r>
 80052c8:	9b02      	ldr	r3, [sp, #8]
 80052ca:	2200      	movs	r2, #0
 80052cc:	701a      	strb	r2, [r3, #0]
 80052ce:	b01c      	add	sp, #112	@ 0x70
 80052d0:	f85d eb04 	ldr.w	lr, [sp], #4
 80052d4:	b003      	add	sp, #12
 80052d6:	4770      	bx	lr
 80052d8:	2000000c 	.word	0x2000000c
 80052dc:	ffff0208 	.word	0xffff0208

080052e0 <memset>:
 80052e0:	4402      	add	r2, r0
 80052e2:	4603      	mov	r3, r0
 80052e4:	4293      	cmp	r3, r2
 80052e6:	d100      	bne.n	80052ea <memset+0xa>
 80052e8:	4770      	bx	lr
 80052ea:	f803 1b01 	strb.w	r1, [r3], #1
 80052ee:	e7f9      	b.n	80052e4 <memset+0x4>

080052f0 <__errno>:
 80052f0:	4b01      	ldr	r3, [pc, #4]	@ (80052f8 <__errno+0x8>)
 80052f2:	6818      	ldr	r0, [r3, #0]
 80052f4:	4770      	bx	lr
 80052f6:	bf00      	nop
 80052f8:	2000000c 	.word	0x2000000c

080052fc <__libc_init_array>:
 80052fc:	b570      	push	{r4, r5, r6, lr}
 80052fe:	4d0d      	ldr	r5, [pc, #52]	@ (8005334 <__libc_init_array+0x38>)
 8005300:	4c0d      	ldr	r4, [pc, #52]	@ (8005338 <__libc_init_array+0x3c>)
 8005302:	1b64      	subs	r4, r4, r5
 8005304:	10a4      	asrs	r4, r4, #2
 8005306:	2600      	movs	r6, #0
 8005308:	42a6      	cmp	r6, r4
 800530a:	d109      	bne.n	8005320 <__libc_init_array+0x24>
 800530c:	4d0b      	ldr	r5, [pc, #44]	@ (800533c <__libc_init_array+0x40>)
 800530e:	4c0c      	ldr	r4, [pc, #48]	@ (8005340 <__libc_init_array+0x44>)
 8005310:	f000 fc66 	bl	8005be0 <_init>
 8005314:	1b64      	subs	r4, r4, r5
 8005316:	10a4      	asrs	r4, r4, #2
 8005318:	2600      	movs	r6, #0
 800531a:	42a6      	cmp	r6, r4
 800531c:	d105      	bne.n	800532a <__libc_init_array+0x2e>
 800531e:	bd70      	pop	{r4, r5, r6, pc}
 8005320:	f855 3b04 	ldr.w	r3, [r5], #4
 8005324:	4798      	blx	r3
 8005326:	3601      	adds	r6, #1
 8005328:	e7ee      	b.n	8005308 <__libc_init_array+0xc>
 800532a:	f855 3b04 	ldr.w	r3, [r5], #4
 800532e:	4798      	blx	r3
 8005330:	3601      	adds	r6, #1
 8005332:	e7f2      	b.n	800531a <__libc_init_array+0x1e>
 8005334:	08005c58 	.word	0x08005c58
 8005338:	08005c58 	.word	0x08005c58
 800533c:	08005c58 	.word	0x08005c58
 8005340:	08005c5c 	.word	0x08005c5c

08005344 <__retarget_lock_acquire_recursive>:
 8005344:	4770      	bx	lr

08005346 <__retarget_lock_release_recursive>:
 8005346:	4770      	bx	lr

08005348 <_free_r>:
 8005348:	b538      	push	{r3, r4, r5, lr}
 800534a:	4605      	mov	r5, r0
 800534c:	2900      	cmp	r1, #0
 800534e:	d041      	beq.n	80053d4 <_free_r+0x8c>
 8005350:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005354:	1f0c      	subs	r4, r1, #4
 8005356:	2b00      	cmp	r3, #0
 8005358:	bfb8      	it	lt
 800535a:	18e4      	addlt	r4, r4, r3
 800535c:	f000 f8e0 	bl	8005520 <__malloc_lock>
 8005360:	4a1d      	ldr	r2, [pc, #116]	@ (80053d8 <_free_r+0x90>)
 8005362:	6813      	ldr	r3, [r2, #0]
 8005364:	b933      	cbnz	r3, 8005374 <_free_r+0x2c>
 8005366:	6063      	str	r3, [r4, #4]
 8005368:	6014      	str	r4, [r2, #0]
 800536a:	4628      	mov	r0, r5
 800536c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005370:	f000 b8dc 	b.w	800552c <__malloc_unlock>
 8005374:	42a3      	cmp	r3, r4
 8005376:	d908      	bls.n	800538a <_free_r+0x42>
 8005378:	6820      	ldr	r0, [r4, #0]
 800537a:	1821      	adds	r1, r4, r0
 800537c:	428b      	cmp	r3, r1
 800537e:	bf01      	itttt	eq
 8005380:	6819      	ldreq	r1, [r3, #0]
 8005382:	685b      	ldreq	r3, [r3, #4]
 8005384:	1809      	addeq	r1, r1, r0
 8005386:	6021      	streq	r1, [r4, #0]
 8005388:	e7ed      	b.n	8005366 <_free_r+0x1e>
 800538a:	461a      	mov	r2, r3
 800538c:	685b      	ldr	r3, [r3, #4]
 800538e:	b10b      	cbz	r3, 8005394 <_free_r+0x4c>
 8005390:	42a3      	cmp	r3, r4
 8005392:	d9fa      	bls.n	800538a <_free_r+0x42>
 8005394:	6811      	ldr	r1, [r2, #0]
 8005396:	1850      	adds	r0, r2, r1
 8005398:	42a0      	cmp	r0, r4
 800539a:	d10b      	bne.n	80053b4 <_free_r+0x6c>
 800539c:	6820      	ldr	r0, [r4, #0]
 800539e:	4401      	add	r1, r0
 80053a0:	1850      	adds	r0, r2, r1
 80053a2:	4283      	cmp	r3, r0
 80053a4:	6011      	str	r1, [r2, #0]
 80053a6:	d1e0      	bne.n	800536a <_free_r+0x22>
 80053a8:	6818      	ldr	r0, [r3, #0]
 80053aa:	685b      	ldr	r3, [r3, #4]
 80053ac:	6053      	str	r3, [r2, #4]
 80053ae:	4408      	add	r0, r1
 80053b0:	6010      	str	r0, [r2, #0]
 80053b2:	e7da      	b.n	800536a <_free_r+0x22>
 80053b4:	d902      	bls.n	80053bc <_free_r+0x74>
 80053b6:	230c      	movs	r3, #12
 80053b8:	602b      	str	r3, [r5, #0]
 80053ba:	e7d6      	b.n	800536a <_free_r+0x22>
 80053bc:	6820      	ldr	r0, [r4, #0]
 80053be:	1821      	adds	r1, r4, r0
 80053c0:	428b      	cmp	r3, r1
 80053c2:	bf04      	itt	eq
 80053c4:	6819      	ldreq	r1, [r3, #0]
 80053c6:	685b      	ldreq	r3, [r3, #4]
 80053c8:	6063      	str	r3, [r4, #4]
 80053ca:	bf04      	itt	eq
 80053cc:	1809      	addeq	r1, r1, r0
 80053ce:	6021      	streq	r1, [r4, #0]
 80053d0:	6054      	str	r4, [r2, #4]
 80053d2:	e7ca      	b.n	800536a <_free_r+0x22>
 80053d4:	bd38      	pop	{r3, r4, r5, pc}
 80053d6:	bf00      	nop
 80053d8:	2000034c 	.word	0x2000034c

080053dc <sbrk_aligned>:
 80053dc:	b570      	push	{r4, r5, r6, lr}
 80053de:	4e0f      	ldr	r6, [pc, #60]	@ (800541c <sbrk_aligned+0x40>)
 80053e0:	460c      	mov	r4, r1
 80053e2:	6831      	ldr	r1, [r6, #0]
 80053e4:	4605      	mov	r5, r0
 80053e6:	b911      	cbnz	r1, 80053ee <sbrk_aligned+0x12>
 80053e8:	f000 fba6 	bl	8005b38 <_sbrk_r>
 80053ec:	6030      	str	r0, [r6, #0]
 80053ee:	4621      	mov	r1, r4
 80053f0:	4628      	mov	r0, r5
 80053f2:	f000 fba1 	bl	8005b38 <_sbrk_r>
 80053f6:	1c43      	adds	r3, r0, #1
 80053f8:	d103      	bne.n	8005402 <sbrk_aligned+0x26>
 80053fa:	f04f 34ff 	mov.w	r4, #4294967295
 80053fe:	4620      	mov	r0, r4
 8005400:	bd70      	pop	{r4, r5, r6, pc}
 8005402:	1cc4      	adds	r4, r0, #3
 8005404:	f024 0403 	bic.w	r4, r4, #3
 8005408:	42a0      	cmp	r0, r4
 800540a:	d0f8      	beq.n	80053fe <sbrk_aligned+0x22>
 800540c:	1a21      	subs	r1, r4, r0
 800540e:	4628      	mov	r0, r5
 8005410:	f000 fb92 	bl	8005b38 <_sbrk_r>
 8005414:	3001      	adds	r0, #1
 8005416:	d1f2      	bne.n	80053fe <sbrk_aligned+0x22>
 8005418:	e7ef      	b.n	80053fa <sbrk_aligned+0x1e>
 800541a:	bf00      	nop
 800541c:	20000348 	.word	0x20000348

08005420 <_malloc_r>:
 8005420:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005424:	1ccd      	adds	r5, r1, #3
 8005426:	f025 0503 	bic.w	r5, r5, #3
 800542a:	3508      	adds	r5, #8
 800542c:	2d0c      	cmp	r5, #12
 800542e:	bf38      	it	cc
 8005430:	250c      	movcc	r5, #12
 8005432:	2d00      	cmp	r5, #0
 8005434:	4606      	mov	r6, r0
 8005436:	db01      	blt.n	800543c <_malloc_r+0x1c>
 8005438:	42a9      	cmp	r1, r5
 800543a:	d904      	bls.n	8005446 <_malloc_r+0x26>
 800543c:	230c      	movs	r3, #12
 800543e:	6033      	str	r3, [r6, #0]
 8005440:	2000      	movs	r0, #0
 8005442:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005446:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800551c <_malloc_r+0xfc>
 800544a:	f000 f869 	bl	8005520 <__malloc_lock>
 800544e:	f8d8 3000 	ldr.w	r3, [r8]
 8005452:	461c      	mov	r4, r3
 8005454:	bb44      	cbnz	r4, 80054a8 <_malloc_r+0x88>
 8005456:	4629      	mov	r1, r5
 8005458:	4630      	mov	r0, r6
 800545a:	f7ff ffbf 	bl	80053dc <sbrk_aligned>
 800545e:	1c43      	adds	r3, r0, #1
 8005460:	4604      	mov	r4, r0
 8005462:	d158      	bne.n	8005516 <_malloc_r+0xf6>
 8005464:	f8d8 4000 	ldr.w	r4, [r8]
 8005468:	4627      	mov	r7, r4
 800546a:	2f00      	cmp	r7, #0
 800546c:	d143      	bne.n	80054f6 <_malloc_r+0xd6>
 800546e:	2c00      	cmp	r4, #0
 8005470:	d04b      	beq.n	800550a <_malloc_r+0xea>
 8005472:	6823      	ldr	r3, [r4, #0]
 8005474:	4639      	mov	r1, r7
 8005476:	4630      	mov	r0, r6
 8005478:	eb04 0903 	add.w	r9, r4, r3
 800547c:	f000 fb5c 	bl	8005b38 <_sbrk_r>
 8005480:	4581      	cmp	r9, r0
 8005482:	d142      	bne.n	800550a <_malloc_r+0xea>
 8005484:	6821      	ldr	r1, [r4, #0]
 8005486:	1a6d      	subs	r5, r5, r1
 8005488:	4629      	mov	r1, r5
 800548a:	4630      	mov	r0, r6
 800548c:	f7ff ffa6 	bl	80053dc <sbrk_aligned>
 8005490:	3001      	adds	r0, #1
 8005492:	d03a      	beq.n	800550a <_malloc_r+0xea>
 8005494:	6823      	ldr	r3, [r4, #0]
 8005496:	442b      	add	r3, r5
 8005498:	6023      	str	r3, [r4, #0]
 800549a:	f8d8 3000 	ldr.w	r3, [r8]
 800549e:	685a      	ldr	r2, [r3, #4]
 80054a0:	bb62      	cbnz	r2, 80054fc <_malloc_r+0xdc>
 80054a2:	f8c8 7000 	str.w	r7, [r8]
 80054a6:	e00f      	b.n	80054c8 <_malloc_r+0xa8>
 80054a8:	6822      	ldr	r2, [r4, #0]
 80054aa:	1b52      	subs	r2, r2, r5
 80054ac:	d420      	bmi.n	80054f0 <_malloc_r+0xd0>
 80054ae:	2a0b      	cmp	r2, #11
 80054b0:	d917      	bls.n	80054e2 <_malloc_r+0xc2>
 80054b2:	1961      	adds	r1, r4, r5
 80054b4:	42a3      	cmp	r3, r4
 80054b6:	6025      	str	r5, [r4, #0]
 80054b8:	bf18      	it	ne
 80054ba:	6059      	strne	r1, [r3, #4]
 80054bc:	6863      	ldr	r3, [r4, #4]
 80054be:	bf08      	it	eq
 80054c0:	f8c8 1000 	streq.w	r1, [r8]
 80054c4:	5162      	str	r2, [r4, r5]
 80054c6:	604b      	str	r3, [r1, #4]
 80054c8:	4630      	mov	r0, r6
 80054ca:	f000 f82f 	bl	800552c <__malloc_unlock>
 80054ce:	f104 000b 	add.w	r0, r4, #11
 80054d2:	1d23      	adds	r3, r4, #4
 80054d4:	f020 0007 	bic.w	r0, r0, #7
 80054d8:	1ac2      	subs	r2, r0, r3
 80054da:	bf1c      	itt	ne
 80054dc:	1a1b      	subne	r3, r3, r0
 80054de:	50a3      	strne	r3, [r4, r2]
 80054e0:	e7af      	b.n	8005442 <_malloc_r+0x22>
 80054e2:	6862      	ldr	r2, [r4, #4]
 80054e4:	42a3      	cmp	r3, r4
 80054e6:	bf0c      	ite	eq
 80054e8:	f8c8 2000 	streq.w	r2, [r8]
 80054ec:	605a      	strne	r2, [r3, #4]
 80054ee:	e7eb      	b.n	80054c8 <_malloc_r+0xa8>
 80054f0:	4623      	mov	r3, r4
 80054f2:	6864      	ldr	r4, [r4, #4]
 80054f4:	e7ae      	b.n	8005454 <_malloc_r+0x34>
 80054f6:	463c      	mov	r4, r7
 80054f8:	687f      	ldr	r7, [r7, #4]
 80054fa:	e7b6      	b.n	800546a <_malloc_r+0x4a>
 80054fc:	461a      	mov	r2, r3
 80054fe:	685b      	ldr	r3, [r3, #4]
 8005500:	42a3      	cmp	r3, r4
 8005502:	d1fb      	bne.n	80054fc <_malloc_r+0xdc>
 8005504:	2300      	movs	r3, #0
 8005506:	6053      	str	r3, [r2, #4]
 8005508:	e7de      	b.n	80054c8 <_malloc_r+0xa8>
 800550a:	230c      	movs	r3, #12
 800550c:	6033      	str	r3, [r6, #0]
 800550e:	4630      	mov	r0, r6
 8005510:	f000 f80c 	bl	800552c <__malloc_unlock>
 8005514:	e794      	b.n	8005440 <_malloc_r+0x20>
 8005516:	6005      	str	r5, [r0, #0]
 8005518:	e7d6      	b.n	80054c8 <_malloc_r+0xa8>
 800551a:	bf00      	nop
 800551c:	2000034c 	.word	0x2000034c

08005520 <__malloc_lock>:
 8005520:	4801      	ldr	r0, [pc, #4]	@ (8005528 <__malloc_lock+0x8>)
 8005522:	f7ff bf0f 	b.w	8005344 <__retarget_lock_acquire_recursive>
 8005526:	bf00      	nop
 8005528:	20000344 	.word	0x20000344

0800552c <__malloc_unlock>:
 800552c:	4801      	ldr	r0, [pc, #4]	@ (8005534 <__malloc_unlock+0x8>)
 800552e:	f7ff bf0a 	b.w	8005346 <__retarget_lock_release_recursive>
 8005532:	bf00      	nop
 8005534:	20000344 	.word	0x20000344

08005538 <__ssputs_r>:
 8005538:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800553c:	688e      	ldr	r6, [r1, #8]
 800553e:	461f      	mov	r7, r3
 8005540:	42be      	cmp	r6, r7
 8005542:	680b      	ldr	r3, [r1, #0]
 8005544:	4682      	mov	sl, r0
 8005546:	460c      	mov	r4, r1
 8005548:	4690      	mov	r8, r2
 800554a:	d82d      	bhi.n	80055a8 <__ssputs_r+0x70>
 800554c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8005550:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8005554:	d026      	beq.n	80055a4 <__ssputs_r+0x6c>
 8005556:	6965      	ldr	r5, [r4, #20]
 8005558:	6909      	ldr	r1, [r1, #16]
 800555a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800555e:	eba3 0901 	sub.w	r9, r3, r1
 8005562:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005566:	1c7b      	adds	r3, r7, #1
 8005568:	444b      	add	r3, r9
 800556a:	106d      	asrs	r5, r5, #1
 800556c:	429d      	cmp	r5, r3
 800556e:	bf38      	it	cc
 8005570:	461d      	movcc	r5, r3
 8005572:	0553      	lsls	r3, r2, #21
 8005574:	d527      	bpl.n	80055c6 <__ssputs_r+0x8e>
 8005576:	4629      	mov	r1, r5
 8005578:	f7ff ff52 	bl	8005420 <_malloc_r>
 800557c:	4606      	mov	r6, r0
 800557e:	b360      	cbz	r0, 80055da <__ssputs_r+0xa2>
 8005580:	6921      	ldr	r1, [r4, #16]
 8005582:	464a      	mov	r2, r9
 8005584:	f000 fae8 	bl	8005b58 <memcpy>
 8005588:	89a3      	ldrh	r3, [r4, #12]
 800558a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800558e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005592:	81a3      	strh	r3, [r4, #12]
 8005594:	6126      	str	r6, [r4, #16]
 8005596:	6165      	str	r5, [r4, #20]
 8005598:	444e      	add	r6, r9
 800559a:	eba5 0509 	sub.w	r5, r5, r9
 800559e:	6026      	str	r6, [r4, #0]
 80055a0:	60a5      	str	r5, [r4, #8]
 80055a2:	463e      	mov	r6, r7
 80055a4:	42be      	cmp	r6, r7
 80055a6:	d900      	bls.n	80055aa <__ssputs_r+0x72>
 80055a8:	463e      	mov	r6, r7
 80055aa:	6820      	ldr	r0, [r4, #0]
 80055ac:	4632      	mov	r2, r6
 80055ae:	4641      	mov	r1, r8
 80055b0:	f000 faa8 	bl	8005b04 <memmove>
 80055b4:	68a3      	ldr	r3, [r4, #8]
 80055b6:	1b9b      	subs	r3, r3, r6
 80055b8:	60a3      	str	r3, [r4, #8]
 80055ba:	6823      	ldr	r3, [r4, #0]
 80055bc:	4433      	add	r3, r6
 80055be:	6023      	str	r3, [r4, #0]
 80055c0:	2000      	movs	r0, #0
 80055c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80055c6:	462a      	mov	r2, r5
 80055c8:	f000 fad4 	bl	8005b74 <_realloc_r>
 80055cc:	4606      	mov	r6, r0
 80055ce:	2800      	cmp	r0, #0
 80055d0:	d1e0      	bne.n	8005594 <__ssputs_r+0x5c>
 80055d2:	6921      	ldr	r1, [r4, #16]
 80055d4:	4650      	mov	r0, sl
 80055d6:	f7ff feb7 	bl	8005348 <_free_r>
 80055da:	230c      	movs	r3, #12
 80055dc:	f8ca 3000 	str.w	r3, [sl]
 80055e0:	89a3      	ldrh	r3, [r4, #12]
 80055e2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80055e6:	81a3      	strh	r3, [r4, #12]
 80055e8:	f04f 30ff 	mov.w	r0, #4294967295
 80055ec:	e7e9      	b.n	80055c2 <__ssputs_r+0x8a>
	...

080055f0 <_svfiprintf_r>:
 80055f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80055f4:	4698      	mov	r8, r3
 80055f6:	898b      	ldrh	r3, [r1, #12]
 80055f8:	061b      	lsls	r3, r3, #24
 80055fa:	b09d      	sub	sp, #116	@ 0x74
 80055fc:	4607      	mov	r7, r0
 80055fe:	460d      	mov	r5, r1
 8005600:	4614      	mov	r4, r2
 8005602:	d510      	bpl.n	8005626 <_svfiprintf_r+0x36>
 8005604:	690b      	ldr	r3, [r1, #16]
 8005606:	b973      	cbnz	r3, 8005626 <_svfiprintf_r+0x36>
 8005608:	2140      	movs	r1, #64	@ 0x40
 800560a:	f7ff ff09 	bl	8005420 <_malloc_r>
 800560e:	6028      	str	r0, [r5, #0]
 8005610:	6128      	str	r0, [r5, #16]
 8005612:	b930      	cbnz	r0, 8005622 <_svfiprintf_r+0x32>
 8005614:	230c      	movs	r3, #12
 8005616:	603b      	str	r3, [r7, #0]
 8005618:	f04f 30ff 	mov.w	r0, #4294967295
 800561c:	b01d      	add	sp, #116	@ 0x74
 800561e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005622:	2340      	movs	r3, #64	@ 0x40
 8005624:	616b      	str	r3, [r5, #20]
 8005626:	2300      	movs	r3, #0
 8005628:	9309      	str	r3, [sp, #36]	@ 0x24
 800562a:	2320      	movs	r3, #32
 800562c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8005630:	f8cd 800c 	str.w	r8, [sp, #12]
 8005634:	2330      	movs	r3, #48	@ 0x30
 8005636:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80057d4 <_svfiprintf_r+0x1e4>
 800563a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800563e:	f04f 0901 	mov.w	r9, #1
 8005642:	4623      	mov	r3, r4
 8005644:	469a      	mov	sl, r3
 8005646:	f813 2b01 	ldrb.w	r2, [r3], #1
 800564a:	b10a      	cbz	r2, 8005650 <_svfiprintf_r+0x60>
 800564c:	2a25      	cmp	r2, #37	@ 0x25
 800564e:	d1f9      	bne.n	8005644 <_svfiprintf_r+0x54>
 8005650:	ebba 0b04 	subs.w	fp, sl, r4
 8005654:	d00b      	beq.n	800566e <_svfiprintf_r+0x7e>
 8005656:	465b      	mov	r3, fp
 8005658:	4622      	mov	r2, r4
 800565a:	4629      	mov	r1, r5
 800565c:	4638      	mov	r0, r7
 800565e:	f7ff ff6b 	bl	8005538 <__ssputs_r>
 8005662:	3001      	adds	r0, #1
 8005664:	f000 80a7 	beq.w	80057b6 <_svfiprintf_r+0x1c6>
 8005668:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800566a:	445a      	add	r2, fp
 800566c:	9209      	str	r2, [sp, #36]	@ 0x24
 800566e:	f89a 3000 	ldrb.w	r3, [sl]
 8005672:	2b00      	cmp	r3, #0
 8005674:	f000 809f 	beq.w	80057b6 <_svfiprintf_r+0x1c6>
 8005678:	2300      	movs	r3, #0
 800567a:	f04f 32ff 	mov.w	r2, #4294967295
 800567e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005682:	f10a 0a01 	add.w	sl, sl, #1
 8005686:	9304      	str	r3, [sp, #16]
 8005688:	9307      	str	r3, [sp, #28]
 800568a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800568e:	931a      	str	r3, [sp, #104]	@ 0x68
 8005690:	4654      	mov	r4, sl
 8005692:	2205      	movs	r2, #5
 8005694:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005698:	484e      	ldr	r0, [pc, #312]	@ (80057d4 <_svfiprintf_r+0x1e4>)
 800569a:	f7fa fdd1 	bl	8000240 <memchr>
 800569e:	9a04      	ldr	r2, [sp, #16]
 80056a0:	b9d8      	cbnz	r0, 80056da <_svfiprintf_r+0xea>
 80056a2:	06d0      	lsls	r0, r2, #27
 80056a4:	bf44      	itt	mi
 80056a6:	2320      	movmi	r3, #32
 80056a8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80056ac:	0711      	lsls	r1, r2, #28
 80056ae:	bf44      	itt	mi
 80056b0:	232b      	movmi	r3, #43	@ 0x2b
 80056b2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80056b6:	f89a 3000 	ldrb.w	r3, [sl]
 80056ba:	2b2a      	cmp	r3, #42	@ 0x2a
 80056bc:	d015      	beq.n	80056ea <_svfiprintf_r+0xfa>
 80056be:	9a07      	ldr	r2, [sp, #28]
 80056c0:	4654      	mov	r4, sl
 80056c2:	2000      	movs	r0, #0
 80056c4:	f04f 0c0a 	mov.w	ip, #10
 80056c8:	4621      	mov	r1, r4
 80056ca:	f811 3b01 	ldrb.w	r3, [r1], #1
 80056ce:	3b30      	subs	r3, #48	@ 0x30
 80056d0:	2b09      	cmp	r3, #9
 80056d2:	d94b      	bls.n	800576c <_svfiprintf_r+0x17c>
 80056d4:	b1b0      	cbz	r0, 8005704 <_svfiprintf_r+0x114>
 80056d6:	9207      	str	r2, [sp, #28]
 80056d8:	e014      	b.n	8005704 <_svfiprintf_r+0x114>
 80056da:	eba0 0308 	sub.w	r3, r0, r8
 80056de:	fa09 f303 	lsl.w	r3, r9, r3
 80056e2:	4313      	orrs	r3, r2
 80056e4:	9304      	str	r3, [sp, #16]
 80056e6:	46a2      	mov	sl, r4
 80056e8:	e7d2      	b.n	8005690 <_svfiprintf_r+0xa0>
 80056ea:	9b03      	ldr	r3, [sp, #12]
 80056ec:	1d19      	adds	r1, r3, #4
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	9103      	str	r1, [sp, #12]
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	bfbb      	ittet	lt
 80056f6:	425b      	neglt	r3, r3
 80056f8:	f042 0202 	orrlt.w	r2, r2, #2
 80056fc:	9307      	strge	r3, [sp, #28]
 80056fe:	9307      	strlt	r3, [sp, #28]
 8005700:	bfb8      	it	lt
 8005702:	9204      	strlt	r2, [sp, #16]
 8005704:	7823      	ldrb	r3, [r4, #0]
 8005706:	2b2e      	cmp	r3, #46	@ 0x2e
 8005708:	d10a      	bne.n	8005720 <_svfiprintf_r+0x130>
 800570a:	7863      	ldrb	r3, [r4, #1]
 800570c:	2b2a      	cmp	r3, #42	@ 0x2a
 800570e:	d132      	bne.n	8005776 <_svfiprintf_r+0x186>
 8005710:	9b03      	ldr	r3, [sp, #12]
 8005712:	1d1a      	adds	r2, r3, #4
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	9203      	str	r2, [sp, #12]
 8005718:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800571c:	3402      	adds	r4, #2
 800571e:	9305      	str	r3, [sp, #20]
 8005720:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80057e4 <_svfiprintf_r+0x1f4>
 8005724:	7821      	ldrb	r1, [r4, #0]
 8005726:	2203      	movs	r2, #3
 8005728:	4650      	mov	r0, sl
 800572a:	f7fa fd89 	bl	8000240 <memchr>
 800572e:	b138      	cbz	r0, 8005740 <_svfiprintf_r+0x150>
 8005730:	9b04      	ldr	r3, [sp, #16]
 8005732:	eba0 000a 	sub.w	r0, r0, sl
 8005736:	2240      	movs	r2, #64	@ 0x40
 8005738:	4082      	lsls	r2, r0
 800573a:	4313      	orrs	r3, r2
 800573c:	3401      	adds	r4, #1
 800573e:	9304      	str	r3, [sp, #16]
 8005740:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005744:	4824      	ldr	r0, [pc, #144]	@ (80057d8 <_svfiprintf_r+0x1e8>)
 8005746:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800574a:	2206      	movs	r2, #6
 800574c:	f7fa fd78 	bl	8000240 <memchr>
 8005750:	2800      	cmp	r0, #0
 8005752:	d036      	beq.n	80057c2 <_svfiprintf_r+0x1d2>
 8005754:	4b21      	ldr	r3, [pc, #132]	@ (80057dc <_svfiprintf_r+0x1ec>)
 8005756:	bb1b      	cbnz	r3, 80057a0 <_svfiprintf_r+0x1b0>
 8005758:	9b03      	ldr	r3, [sp, #12]
 800575a:	3307      	adds	r3, #7
 800575c:	f023 0307 	bic.w	r3, r3, #7
 8005760:	3308      	adds	r3, #8
 8005762:	9303      	str	r3, [sp, #12]
 8005764:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005766:	4433      	add	r3, r6
 8005768:	9309      	str	r3, [sp, #36]	@ 0x24
 800576a:	e76a      	b.n	8005642 <_svfiprintf_r+0x52>
 800576c:	fb0c 3202 	mla	r2, ip, r2, r3
 8005770:	460c      	mov	r4, r1
 8005772:	2001      	movs	r0, #1
 8005774:	e7a8      	b.n	80056c8 <_svfiprintf_r+0xd8>
 8005776:	2300      	movs	r3, #0
 8005778:	3401      	adds	r4, #1
 800577a:	9305      	str	r3, [sp, #20]
 800577c:	4619      	mov	r1, r3
 800577e:	f04f 0c0a 	mov.w	ip, #10
 8005782:	4620      	mov	r0, r4
 8005784:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005788:	3a30      	subs	r2, #48	@ 0x30
 800578a:	2a09      	cmp	r2, #9
 800578c:	d903      	bls.n	8005796 <_svfiprintf_r+0x1a6>
 800578e:	2b00      	cmp	r3, #0
 8005790:	d0c6      	beq.n	8005720 <_svfiprintf_r+0x130>
 8005792:	9105      	str	r1, [sp, #20]
 8005794:	e7c4      	b.n	8005720 <_svfiprintf_r+0x130>
 8005796:	fb0c 2101 	mla	r1, ip, r1, r2
 800579a:	4604      	mov	r4, r0
 800579c:	2301      	movs	r3, #1
 800579e:	e7f0      	b.n	8005782 <_svfiprintf_r+0x192>
 80057a0:	ab03      	add	r3, sp, #12
 80057a2:	9300      	str	r3, [sp, #0]
 80057a4:	462a      	mov	r2, r5
 80057a6:	4b0e      	ldr	r3, [pc, #56]	@ (80057e0 <_svfiprintf_r+0x1f0>)
 80057a8:	a904      	add	r1, sp, #16
 80057aa:	4638      	mov	r0, r7
 80057ac:	f3af 8000 	nop.w
 80057b0:	1c42      	adds	r2, r0, #1
 80057b2:	4606      	mov	r6, r0
 80057b4:	d1d6      	bne.n	8005764 <_svfiprintf_r+0x174>
 80057b6:	89ab      	ldrh	r3, [r5, #12]
 80057b8:	065b      	lsls	r3, r3, #25
 80057ba:	f53f af2d 	bmi.w	8005618 <_svfiprintf_r+0x28>
 80057be:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80057c0:	e72c      	b.n	800561c <_svfiprintf_r+0x2c>
 80057c2:	ab03      	add	r3, sp, #12
 80057c4:	9300      	str	r3, [sp, #0]
 80057c6:	462a      	mov	r2, r5
 80057c8:	4b05      	ldr	r3, [pc, #20]	@ (80057e0 <_svfiprintf_r+0x1f0>)
 80057ca:	a904      	add	r1, sp, #16
 80057cc:	4638      	mov	r0, r7
 80057ce:	f000 f879 	bl	80058c4 <_printf_i>
 80057d2:	e7ed      	b.n	80057b0 <_svfiprintf_r+0x1c0>
 80057d4:	08005c1c 	.word	0x08005c1c
 80057d8:	08005c26 	.word	0x08005c26
 80057dc:	00000000 	.word	0x00000000
 80057e0:	08005539 	.word	0x08005539
 80057e4:	08005c22 	.word	0x08005c22

080057e8 <_printf_common>:
 80057e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80057ec:	4616      	mov	r6, r2
 80057ee:	4698      	mov	r8, r3
 80057f0:	688a      	ldr	r2, [r1, #8]
 80057f2:	690b      	ldr	r3, [r1, #16]
 80057f4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80057f8:	4293      	cmp	r3, r2
 80057fa:	bfb8      	it	lt
 80057fc:	4613      	movlt	r3, r2
 80057fe:	6033      	str	r3, [r6, #0]
 8005800:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8005804:	4607      	mov	r7, r0
 8005806:	460c      	mov	r4, r1
 8005808:	b10a      	cbz	r2, 800580e <_printf_common+0x26>
 800580a:	3301      	adds	r3, #1
 800580c:	6033      	str	r3, [r6, #0]
 800580e:	6823      	ldr	r3, [r4, #0]
 8005810:	0699      	lsls	r1, r3, #26
 8005812:	bf42      	ittt	mi
 8005814:	6833      	ldrmi	r3, [r6, #0]
 8005816:	3302      	addmi	r3, #2
 8005818:	6033      	strmi	r3, [r6, #0]
 800581a:	6825      	ldr	r5, [r4, #0]
 800581c:	f015 0506 	ands.w	r5, r5, #6
 8005820:	d106      	bne.n	8005830 <_printf_common+0x48>
 8005822:	f104 0a19 	add.w	sl, r4, #25
 8005826:	68e3      	ldr	r3, [r4, #12]
 8005828:	6832      	ldr	r2, [r6, #0]
 800582a:	1a9b      	subs	r3, r3, r2
 800582c:	42ab      	cmp	r3, r5
 800582e:	dc26      	bgt.n	800587e <_printf_common+0x96>
 8005830:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8005834:	6822      	ldr	r2, [r4, #0]
 8005836:	3b00      	subs	r3, #0
 8005838:	bf18      	it	ne
 800583a:	2301      	movne	r3, #1
 800583c:	0692      	lsls	r2, r2, #26
 800583e:	d42b      	bmi.n	8005898 <_printf_common+0xb0>
 8005840:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8005844:	4641      	mov	r1, r8
 8005846:	4638      	mov	r0, r7
 8005848:	47c8      	blx	r9
 800584a:	3001      	adds	r0, #1
 800584c:	d01e      	beq.n	800588c <_printf_common+0xa4>
 800584e:	6823      	ldr	r3, [r4, #0]
 8005850:	6922      	ldr	r2, [r4, #16]
 8005852:	f003 0306 	and.w	r3, r3, #6
 8005856:	2b04      	cmp	r3, #4
 8005858:	bf02      	ittt	eq
 800585a:	68e5      	ldreq	r5, [r4, #12]
 800585c:	6833      	ldreq	r3, [r6, #0]
 800585e:	1aed      	subeq	r5, r5, r3
 8005860:	68a3      	ldr	r3, [r4, #8]
 8005862:	bf0c      	ite	eq
 8005864:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005868:	2500      	movne	r5, #0
 800586a:	4293      	cmp	r3, r2
 800586c:	bfc4      	itt	gt
 800586e:	1a9b      	subgt	r3, r3, r2
 8005870:	18ed      	addgt	r5, r5, r3
 8005872:	2600      	movs	r6, #0
 8005874:	341a      	adds	r4, #26
 8005876:	42b5      	cmp	r5, r6
 8005878:	d11a      	bne.n	80058b0 <_printf_common+0xc8>
 800587a:	2000      	movs	r0, #0
 800587c:	e008      	b.n	8005890 <_printf_common+0xa8>
 800587e:	2301      	movs	r3, #1
 8005880:	4652      	mov	r2, sl
 8005882:	4641      	mov	r1, r8
 8005884:	4638      	mov	r0, r7
 8005886:	47c8      	blx	r9
 8005888:	3001      	adds	r0, #1
 800588a:	d103      	bne.n	8005894 <_printf_common+0xac>
 800588c:	f04f 30ff 	mov.w	r0, #4294967295
 8005890:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005894:	3501      	adds	r5, #1
 8005896:	e7c6      	b.n	8005826 <_printf_common+0x3e>
 8005898:	18e1      	adds	r1, r4, r3
 800589a:	1c5a      	adds	r2, r3, #1
 800589c:	2030      	movs	r0, #48	@ 0x30
 800589e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80058a2:	4422      	add	r2, r4
 80058a4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80058a8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80058ac:	3302      	adds	r3, #2
 80058ae:	e7c7      	b.n	8005840 <_printf_common+0x58>
 80058b0:	2301      	movs	r3, #1
 80058b2:	4622      	mov	r2, r4
 80058b4:	4641      	mov	r1, r8
 80058b6:	4638      	mov	r0, r7
 80058b8:	47c8      	blx	r9
 80058ba:	3001      	adds	r0, #1
 80058bc:	d0e6      	beq.n	800588c <_printf_common+0xa4>
 80058be:	3601      	adds	r6, #1
 80058c0:	e7d9      	b.n	8005876 <_printf_common+0x8e>
	...

080058c4 <_printf_i>:
 80058c4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80058c8:	7e0f      	ldrb	r7, [r1, #24]
 80058ca:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80058cc:	2f78      	cmp	r7, #120	@ 0x78
 80058ce:	4691      	mov	r9, r2
 80058d0:	4680      	mov	r8, r0
 80058d2:	460c      	mov	r4, r1
 80058d4:	469a      	mov	sl, r3
 80058d6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80058da:	d807      	bhi.n	80058ec <_printf_i+0x28>
 80058dc:	2f62      	cmp	r7, #98	@ 0x62
 80058de:	d80a      	bhi.n	80058f6 <_printf_i+0x32>
 80058e0:	2f00      	cmp	r7, #0
 80058e2:	f000 80d2 	beq.w	8005a8a <_printf_i+0x1c6>
 80058e6:	2f58      	cmp	r7, #88	@ 0x58
 80058e8:	f000 80b9 	beq.w	8005a5e <_printf_i+0x19a>
 80058ec:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80058f0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80058f4:	e03a      	b.n	800596c <_printf_i+0xa8>
 80058f6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80058fa:	2b15      	cmp	r3, #21
 80058fc:	d8f6      	bhi.n	80058ec <_printf_i+0x28>
 80058fe:	a101      	add	r1, pc, #4	@ (adr r1, 8005904 <_printf_i+0x40>)
 8005900:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005904:	0800595d 	.word	0x0800595d
 8005908:	08005971 	.word	0x08005971
 800590c:	080058ed 	.word	0x080058ed
 8005910:	080058ed 	.word	0x080058ed
 8005914:	080058ed 	.word	0x080058ed
 8005918:	080058ed 	.word	0x080058ed
 800591c:	08005971 	.word	0x08005971
 8005920:	080058ed 	.word	0x080058ed
 8005924:	080058ed 	.word	0x080058ed
 8005928:	080058ed 	.word	0x080058ed
 800592c:	080058ed 	.word	0x080058ed
 8005930:	08005a71 	.word	0x08005a71
 8005934:	0800599b 	.word	0x0800599b
 8005938:	08005a2b 	.word	0x08005a2b
 800593c:	080058ed 	.word	0x080058ed
 8005940:	080058ed 	.word	0x080058ed
 8005944:	08005a93 	.word	0x08005a93
 8005948:	080058ed 	.word	0x080058ed
 800594c:	0800599b 	.word	0x0800599b
 8005950:	080058ed 	.word	0x080058ed
 8005954:	080058ed 	.word	0x080058ed
 8005958:	08005a33 	.word	0x08005a33
 800595c:	6833      	ldr	r3, [r6, #0]
 800595e:	1d1a      	adds	r2, r3, #4
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	6032      	str	r2, [r6, #0]
 8005964:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005968:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800596c:	2301      	movs	r3, #1
 800596e:	e09d      	b.n	8005aac <_printf_i+0x1e8>
 8005970:	6833      	ldr	r3, [r6, #0]
 8005972:	6820      	ldr	r0, [r4, #0]
 8005974:	1d19      	adds	r1, r3, #4
 8005976:	6031      	str	r1, [r6, #0]
 8005978:	0606      	lsls	r6, r0, #24
 800597a:	d501      	bpl.n	8005980 <_printf_i+0xbc>
 800597c:	681d      	ldr	r5, [r3, #0]
 800597e:	e003      	b.n	8005988 <_printf_i+0xc4>
 8005980:	0645      	lsls	r5, r0, #25
 8005982:	d5fb      	bpl.n	800597c <_printf_i+0xb8>
 8005984:	f9b3 5000 	ldrsh.w	r5, [r3]
 8005988:	2d00      	cmp	r5, #0
 800598a:	da03      	bge.n	8005994 <_printf_i+0xd0>
 800598c:	232d      	movs	r3, #45	@ 0x2d
 800598e:	426d      	negs	r5, r5
 8005990:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005994:	4859      	ldr	r0, [pc, #356]	@ (8005afc <_printf_i+0x238>)
 8005996:	230a      	movs	r3, #10
 8005998:	e011      	b.n	80059be <_printf_i+0xfa>
 800599a:	6821      	ldr	r1, [r4, #0]
 800599c:	6833      	ldr	r3, [r6, #0]
 800599e:	0608      	lsls	r0, r1, #24
 80059a0:	f853 5b04 	ldr.w	r5, [r3], #4
 80059a4:	d402      	bmi.n	80059ac <_printf_i+0xe8>
 80059a6:	0649      	lsls	r1, r1, #25
 80059a8:	bf48      	it	mi
 80059aa:	b2ad      	uxthmi	r5, r5
 80059ac:	2f6f      	cmp	r7, #111	@ 0x6f
 80059ae:	4853      	ldr	r0, [pc, #332]	@ (8005afc <_printf_i+0x238>)
 80059b0:	6033      	str	r3, [r6, #0]
 80059b2:	bf14      	ite	ne
 80059b4:	230a      	movne	r3, #10
 80059b6:	2308      	moveq	r3, #8
 80059b8:	2100      	movs	r1, #0
 80059ba:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80059be:	6866      	ldr	r6, [r4, #4]
 80059c0:	60a6      	str	r6, [r4, #8]
 80059c2:	2e00      	cmp	r6, #0
 80059c4:	bfa2      	ittt	ge
 80059c6:	6821      	ldrge	r1, [r4, #0]
 80059c8:	f021 0104 	bicge.w	r1, r1, #4
 80059cc:	6021      	strge	r1, [r4, #0]
 80059ce:	b90d      	cbnz	r5, 80059d4 <_printf_i+0x110>
 80059d0:	2e00      	cmp	r6, #0
 80059d2:	d04b      	beq.n	8005a6c <_printf_i+0x1a8>
 80059d4:	4616      	mov	r6, r2
 80059d6:	fbb5 f1f3 	udiv	r1, r5, r3
 80059da:	fb03 5711 	mls	r7, r3, r1, r5
 80059de:	5dc7      	ldrb	r7, [r0, r7]
 80059e0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80059e4:	462f      	mov	r7, r5
 80059e6:	42bb      	cmp	r3, r7
 80059e8:	460d      	mov	r5, r1
 80059ea:	d9f4      	bls.n	80059d6 <_printf_i+0x112>
 80059ec:	2b08      	cmp	r3, #8
 80059ee:	d10b      	bne.n	8005a08 <_printf_i+0x144>
 80059f0:	6823      	ldr	r3, [r4, #0]
 80059f2:	07df      	lsls	r7, r3, #31
 80059f4:	d508      	bpl.n	8005a08 <_printf_i+0x144>
 80059f6:	6923      	ldr	r3, [r4, #16]
 80059f8:	6861      	ldr	r1, [r4, #4]
 80059fa:	4299      	cmp	r1, r3
 80059fc:	bfde      	ittt	le
 80059fe:	2330      	movle	r3, #48	@ 0x30
 8005a00:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005a04:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005a08:	1b92      	subs	r2, r2, r6
 8005a0a:	6122      	str	r2, [r4, #16]
 8005a0c:	f8cd a000 	str.w	sl, [sp]
 8005a10:	464b      	mov	r3, r9
 8005a12:	aa03      	add	r2, sp, #12
 8005a14:	4621      	mov	r1, r4
 8005a16:	4640      	mov	r0, r8
 8005a18:	f7ff fee6 	bl	80057e8 <_printf_common>
 8005a1c:	3001      	adds	r0, #1
 8005a1e:	d14a      	bne.n	8005ab6 <_printf_i+0x1f2>
 8005a20:	f04f 30ff 	mov.w	r0, #4294967295
 8005a24:	b004      	add	sp, #16
 8005a26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005a2a:	6823      	ldr	r3, [r4, #0]
 8005a2c:	f043 0320 	orr.w	r3, r3, #32
 8005a30:	6023      	str	r3, [r4, #0]
 8005a32:	4833      	ldr	r0, [pc, #204]	@ (8005b00 <_printf_i+0x23c>)
 8005a34:	2778      	movs	r7, #120	@ 0x78
 8005a36:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8005a3a:	6823      	ldr	r3, [r4, #0]
 8005a3c:	6831      	ldr	r1, [r6, #0]
 8005a3e:	061f      	lsls	r7, r3, #24
 8005a40:	f851 5b04 	ldr.w	r5, [r1], #4
 8005a44:	d402      	bmi.n	8005a4c <_printf_i+0x188>
 8005a46:	065f      	lsls	r7, r3, #25
 8005a48:	bf48      	it	mi
 8005a4a:	b2ad      	uxthmi	r5, r5
 8005a4c:	6031      	str	r1, [r6, #0]
 8005a4e:	07d9      	lsls	r1, r3, #31
 8005a50:	bf44      	itt	mi
 8005a52:	f043 0320 	orrmi.w	r3, r3, #32
 8005a56:	6023      	strmi	r3, [r4, #0]
 8005a58:	b11d      	cbz	r5, 8005a62 <_printf_i+0x19e>
 8005a5a:	2310      	movs	r3, #16
 8005a5c:	e7ac      	b.n	80059b8 <_printf_i+0xf4>
 8005a5e:	4827      	ldr	r0, [pc, #156]	@ (8005afc <_printf_i+0x238>)
 8005a60:	e7e9      	b.n	8005a36 <_printf_i+0x172>
 8005a62:	6823      	ldr	r3, [r4, #0]
 8005a64:	f023 0320 	bic.w	r3, r3, #32
 8005a68:	6023      	str	r3, [r4, #0]
 8005a6a:	e7f6      	b.n	8005a5a <_printf_i+0x196>
 8005a6c:	4616      	mov	r6, r2
 8005a6e:	e7bd      	b.n	80059ec <_printf_i+0x128>
 8005a70:	6833      	ldr	r3, [r6, #0]
 8005a72:	6825      	ldr	r5, [r4, #0]
 8005a74:	6961      	ldr	r1, [r4, #20]
 8005a76:	1d18      	adds	r0, r3, #4
 8005a78:	6030      	str	r0, [r6, #0]
 8005a7a:	062e      	lsls	r6, r5, #24
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	d501      	bpl.n	8005a84 <_printf_i+0x1c0>
 8005a80:	6019      	str	r1, [r3, #0]
 8005a82:	e002      	b.n	8005a8a <_printf_i+0x1c6>
 8005a84:	0668      	lsls	r0, r5, #25
 8005a86:	d5fb      	bpl.n	8005a80 <_printf_i+0x1bc>
 8005a88:	8019      	strh	r1, [r3, #0]
 8005a8a:	2300      	movs	r3, #0
 8005a8c:	6123      	str	r3, [r4, #16]
 8005a8e:	4616      	mov	r6, r2
 8005a90:	e7bc      	b.n	8005a0c <_printf_i+0x148>
 8005a92:	6833      	ldr	r3, [r6, #0]
 8005a94:	1d1a      	adds	r2, r3, #4
 8005a96:	6032      	str	r2, [r6, #0]
 8005a98:	681e      	ldr	r6, [r3, #0]
 8005a9a:	6862      	ldr	r2, [r4, #4]
 8005a9c:	2100      	movs	r1, #0
 8005a9e:	4630      	mov	r0, r6
 8005aa0:	f7fa fbce 	bl	8000240 <memchr>
 8005aa4:	b108      	cbz	r0, 8005aaa <_printf_i+0x1e6>
 8005aa6:	1b80      	subs	r0, r0, r6
 8005aa8:	6060      	str	r0, [r4, #4]
 8005aaa:	6863      	ldr	r3, [r4, #4]
 8005aac:	6123      	str	r3, [r4, #16]
 8005aae:	2300      	movs	r3, #0
 8005ab0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005ab4:	e7aa      	b.n	8005a0c <_printf_i+0x148>
 8005ab6:	6923      	ldr	r3, [r4, #16]
 8005ab8:	4632      	mov	r2, r6
 8005aba:	4649      	mov	r1, r9
 8005abc:	4640      	mov	r0, r8
 8005abe:	47d0      	blx	sl
 8005ac0:	3001      	adds	r0, #1
 8005ac2:	d0ad      	beq.n	8005a20 <_printf_i+0x15c>
 8005ac4:	6823      	ldr	r3, [r4, #0]
 8005ac6:	079b      	lsls	r3, r3, #30
 8005ac8:	d413      	bmi.n	8005af2 <_printf_i+0x22e>
 8005aca:	68e0      	ldr	r0, [r4, #12]
 8005acc:	9b03      	ldr	r3, [sp, #12]
 8005ace:	4298      	cmp	r0, r3
 8005ad0:	bfb8      	it	lt
 8005ad2:	4618      	movlt	r0, r3
 8005ad4:	e7a6      	b.n	8005a24 <_printf_i+0x160>
 8005ad6:	2301      	movs	r3, #1
 8005ad8:	4632      	mov	r2, r6
 8005ada:	4649      	mov	r1, r9
 8005adc:	4640      	mov	r0, r8
 8005ade:	47d0      	blx	sl
 8005ae0:	3001      	adds	r0, #1
 8005ae2:	d09d      	beq.n	8005a20 <_printf_i+0x15c>
 8005ae4:	3501      	adds	r5, #1
 8005ae6:	68e3      	ldr	r3, [r4, #12]
 8005ae8:	9903      	ldr	r1, [sp, #12]
 8005aea:	1a5b      	subs	r3, r3, r1
 8005aec:	42ab      	cmp	r3, r5
 8005aee:	dcf2      	bgt.n	8005ad6 <_printf_i+0x212>
 8005af0:	e7eb      	b.n	8005aca <_printf_i+0x206>
 8005af2:	2500      	movs	r5, #0
 8005af4:	f104 0619 	add.w	r6, r4, #25
 8005af8:	e7f5      	b.n	8005ae6 <_printf_i+0x222>
 8005afa:	bf00      	nop
 8005afc:	08005c2d 	.word	0x08005c2d
 8005b00:	08005c3e 	.word	0x08005c3e

08005b04 <memmove>:
 8005b04:	4288      	cmp	r0, r1
 8005b06:	b510      	push	{r4, lr}
 8005b08:	eb01 0402 	add.w	r4, r1, r2
 8005b0c:	d902      	bls.n	8005b14 <memmove+0x10>
 8005b0e:	4284      	cmp	r4, r0
 8005b10:	4623      	mov	r3, r4
 8005b12:	d807      	bhi.n	8005b24 <memmove+0x20>
 8005b14:	1e43      	subs	r3, r0, #1
 8005b16:	42a1      	cmp	r1, r4
 8005b18:	d008      	beq.n	8005b2c <memmove+0x28>
 8005b1a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005b1e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005b22:	e7f8      	b.n	8005b16 <memmove+0x12>
 8005b24:	4402      	add	r2, r0
 8005b26:	4601      	mov	r1, r0
 8005b28:	428a      	cmp	r2, r1
 8005b2a:	d100      	bne.n	8005b2e <memmove+0x2a>
 8005b2c:	bd10      	pop	{r4, pc}
 8005b2e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005b32:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005b36:	e7f7      	b.n	8005b28 <memmove+0x24>

08005b38 <_sbrk_r>:
 8005b38:	b538      	push	{r3, r4, r5, lr}
 8005b3a:	4d06      	ldr	r5, [pc, #24]	@ (8005b54 <_sbrk_r+0x1c>)
 8005b3c:	2300      	movs	r3, #0
 8005b3e:	4604      	mov	r4, r0
 8005b40:	4608      	mov	r0, r1
 8005b42:	602b      	str	r3, [r5, #0]
 8005b44:	f7fb f8aa 	bl	8000c9c <_sbrk>
 8005b48:	1c43      	adds	r3, r0, #1
 8005b4a:	d102      	bne.n	8005b52 <_sbrk_r+0x1a>
 8005b4c:	682b      	ldr	r3, [r5, #0]
 8005b4e:	b103      	cbz	r3, 8005b52 <_sbrk_r+0x1a>
 8005b50:	6023      	str	r3, [r4, #0]
 8005b52:	bd38      	pop	{r3, r4, r5, pc}
 8005b54:	20000340 	.word	0x20000340

08005b58 <memcpy>:
 8005b58:	440a      	add	r2, r1
 8005b5a:	4291      	cmp	r1, r2
 8005b5c:	f100 33ff 	add.w	r3, r0, #4294967295
 8005b60:	d100      	bne.n	8005b64 <memcpy+0xc>
 8005b62:	4770      	bx	lr
 8005b64:	b510      	push	{r4, lr}
 8005b66:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005b6a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005b6e:	4291      	cmp	r1, r2
 8005b70:	d1f9      	bne.n	8005b66 <memcpy+0xe>
 8005b72:	bd10      	pop	{r4, pc}

08005b74 <_realloc_r>:
 8005b74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005b78:	4680      	mov	r8, r0
 8005b7a:	4615      	mov	r5, r2
 8005b7c:	460c      	mov	r4, r1
 8005b7e:	b921      	cbnz	r1, 8005b8a <_realloc_r+0x16>
 8005b80:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005b84:	4611      	mov	r1, r2
 8005b86:	f7ff bc4b 	b.w	8005420 <_malloc_r>
 8005b8a:	b92a      	cbnz	r2, 8005b98 <_realloc_r+0x24>
 8005b8c:	f7ff fbdc 	bl	8005348 <_free_r>
 8005b90:	2400      	movs	r4, #0
 8005b92:	4620      	mov	r0, r4
 8005b94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005b98:	f000 f81a 	bl	8005bd0 <_malloc_usable_size_r>
 8005b9c:	4285      	cmp	r5, r0
 8005b9e:	4606      	mov	r6, r0
 8005ba0:	d802      	bhi.n	8005ba8 <_realloc_r+0x34>
 8005ba2:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8005ba6:	d8f4      	bhi.n	8005b92 <_realloc_r+0x1e>
 8005ba8:	4629      	mov	r1, r5
 8005baa:	4640      	mov	r0, r8
 8005bac:	f7ff fc38 	bl	8005420 <_malloc_r>
 8005bb0:	4607      	mov	r7, r0
 8005bb2:	2800      	cmp	r0, #0
 8005bb4:	d0ec      	beq.n	8005b90 <_realloc_r+0x1c>
 8005bb6:	42b5      	cmp	r5, r6
 8005bb8:	462a      	mov	r2, r5
 8005bba:	4621      	mov	r1, r4
 8005bbc:	bf28      	it	cs
 8005bbe:	4632      	movcs	r2, r6
 8005bc0:	f7ff ffca 	bl	8005b58 <memcpy>
 8005bc4:	4621      	mov	r1, r4
 8005bc6:	4640      	mov	r0, r8
 8005bc8:	f7ff fbbe 	bl	8005348 <_free_r>
 8005bcc:	463c      	mov	r4, r7
 8005bce:	e7e0      	b.n	8005b92 <_realloc_r+0x1e>

08005bd0 <_malloc_usable_size_r>:
 8005bd0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005bd4:	1f18      	subs	r0, r3, #4
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	bfbc      	itt	lt
 8005bda:	580b      	ldrlt	r3, [r1, r0]
 8005bdc:	18c0      	addlt	r0, r0, r3
 8005bde:	4770      	bx	lr

08005be0 <_init>:
 8005be0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005be2:	bf00      	nop
 8005be4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005be6:	bc08      	pop	{r3}
 8005be8:	469e      	mov	lr, r3
 8005bea:	4770      	bx	lr

08005bec <_fini>:
 8005bec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005bee:	bf00      	nop
 8005bf0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005bf2:	bc08      	pop	{r3}
 8005bf4:	469e      	mov	lr, r3
 8005bf6:	4770      	bx	lr
