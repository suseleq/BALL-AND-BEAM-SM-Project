
ball_and_beam.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005dd4  08000200  08000200  00001200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000058  08005fd4  08005fd4  00006fd4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800602c  0800602c  00008074  2**0
                  CONTENTS
  4 .ARM          00000008  0800602c  0800602c  0000702c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006034  08006034  00008074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006034  08006034  00007034  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006038  08006038  00007038  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000074  20000000  0800603c  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000368  20000074  080060b0  00008074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200003dc  080060b0  000083dc  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00008074  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011855  00000000  00000000  000080a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002856  00000000  00000000  000198f7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e78  00000000  00000000  0001c150  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000b31  00000000  00000000  0001cfc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00028bb4  00000000  00000000  0001daf9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001354f  00000000  00000000  000466ad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000fc0b3  00000000  00000000  00059bfc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00155caf  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003fc8  00000000  00000000  00155cf4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000068  00000000  00000000  00159cbc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	@ (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	@ (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	@ (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000074 	.word	0x20000074
 800021c:	00000000 	.word	0x00000000
 8000220:	08005fbc 	.word	0x08005fbc

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	@ (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	@ (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	@ (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000078 	.word	0x20000078
 800023c:	08005fbc 	.word	0x08005fbc

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <__aeabi_uldivmod>:
 80002e0:	b953      	cbnz	r3, 80002f8 <__aeabi_uldivmod+0x18>
 80002e2:	b94a      	cbnz	r2, 80002f8 <__aeabi_uldivmod+0x18>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bf08      	it	eq
 80002e8:	2800      	cmpeq	r0, #0
 80002ea:	bf1c      	itt	ne
 80002ec:	f04f 31ff 	movne.w	r1, #4294967295
 80002f0:	f04f 30ff 	movne.w	r0, #4294967295
 80002f4:	f000 b96a 	b.w	80005cc <__aeabi_idiv0>
 80002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000300:	f000 f806 	bl	8000310 <__udivmoddi4>
 8000304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	9d08      	ldr	r5, [sp, #32]
 8000316:	460c      	mov	r4, r1
 8000318:	2b00      	cmp	r3, #0
 800031a:	d14e      	bne.n	80003ba <__udivmoddi4+0xaa>
 800031c:	4694      	mov	ip, r2
 800031e:	458c      	cmp	ip, r1
 8000320:	4686      	mov	lr, r0
 8000322:	fab2 f282 	clz	r2, r2
 8000326:	d962      	bls.n	80003ee <__udivmoddi4+0xde>
 8000328:	b14a      	cbz	r2, 800033e <__udivmoddi4+0x2e>
 800032a:	f1c2 0320 	rsb	r3, r2, #32
 800032e:	4091      	lsls	r1, r2
 8000330:	fa20 f303 	lsr.w	r3, r0, r3
 8000334:	fa0c fc02 	lsl.w	ip, ip, r2
 8000338:	4319      	orrs	r1, r3
 800033a:	fa00 fe02 	lsl.w	lr, r0, r2
 800033e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000342:	fa1f f68c 	uxth.w	r6, ip
 8000346:	fbb1 f4f7 	udiv	r4, r1, r7
 800034a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800034e:	fb07 1114 	mls	r1, r7, r4, r1
 8000352:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000356:	fb04 f106 	mul.w	r1, r4, r6
 800035a:	4299      	cmp	r1, r3
 800035c:	d90a      	bls.n	8000374 <__udivmoddi4+0x64>
 800035e:	eb1c 0303 	adds.w	r3, ip, r3
 8000362:	f104 30ff 	add.w	r0, r4, #4294967295
 8000366:	f080 8112 	bcs.w	800058e <__udivmoddi4+0x27e>
 800036a:	4299      	cmp	r1, r3
 800036c:	f240 810f 	bls.w	800058e <__udivmoddi4+0x27e>
 8000370:	3c02      	subs	r4, #2
 8000372:	4463      	add	r3, ip
 8000374:	1a59      	subs	r1, r3, r1
 8000376:	fa1f f38e 	uxth.w	r3, lr
 800037a:	fbb1 f0f7 	udiv	r0, r1, r7
 800037e:	fb07 1110 	mls	r1, r7, r0, r1
 8000382:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000386:	fb00 f606 	mul.w	r6, r0, r6
 800038a:	429e      	cmp	r6, r3
 800038c:	d90a      	bls.n	80003a4 <__udivmoddi4+0x94>
 800038e:	eb1c 0303 	adds.w	r3, ip, r3
 8000392:	f100 31ff 	add.w	r1, r0, #4294967295
 8000396:	f080 80fc 	bcs.w	8000592 <__udivmoddi4+0x282>
 800039a:	429e      	cmp	r6, r3
 800039c:	f240 80f9 	bls.w	8000592 <__udivmoddi4+0x282>
 80003a0:	4463      	add	r3, ip
 80003a2:	3802      	subs	r0, #2
 80003a4:	1b9b      	subs	r3, r3, r6
 80003a6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80003aa:	2100      	movs	r1, #0
 80003ac:	b11d      	cbz	r5, 80003b6 <__udivmoddi4+0xa6>
 80003ae:	40d3      	lsrs	r3, r2
 80003b0:	2200      	movs	r2, #0
 80003b2:	e9c5 3200 	strd	r3, r2, [r5]
 80003b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ba:	428b      	cmp	r3, r1
 80003bc:	d905      	bls.n	80003ca <__udivmoddi4+0xba>
 80003be:	b10d      	cbz	r5, 80003c4 <__udivmoddi4+0xb4>
 80003c0:	e9c5 0100 	strd	r0, r1, [r5]
 80003c4:	2100      	movs	r1, #0
 80003c6:	4608      	mov	r0, r1
 80003c8:	e7f5      	b.n	80003b6 <__udivmoddi4+0xa6>
 80003ca:	fab3 f183 	clz	r1, r3
 80003ce:	2900      	cmp	r1, #0
 80003d0:	d146      	bne.n	8000460 <__udivmoddi4+0x150>
 80003d2:	42a3      	cmp	r3, r4
 80003d4:	d302      	bcc.n	80003dc <__udivmoddi4+0xcc>
 80003d6:	4290      	cmp	r0, r2
 80003d8:	f0c0 80f0 	bcc.w	80005bc <__udivmoddi4+0x2ac>
 80003dc:	1a86      	subs	r6, r0, r2
 80003de:	eb64 0303 	sbc.w	r3, r4, r3
 80003e2:	2001      	movs	r0, #1
 80003e4:	2d00      	cmp	r5, #0
 80003e6:	d0e6      	beq.n	80003b6 <__udivmoddi4+0xa6>
 80003e8:	e9c5 6300 	strd	r6, r3, [r5]
 80003ec:	e7e3      	b.n	80003b6 <__udivmoddi4+0xa6>
 80003ee:	2a00      	cmp	r2, #0
 80003f0:	f040 8090 	bne.w	8000514 <__udivmoddi4+0x204>
 80003f4:	eba1 040c 	sub.w	r4, r1, ip
 80003f8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003fc:	fa1f f78c 	uxth.w	r7, ip
 8000400:	2101      	movs	r1, #1
 8000402:	fbb4 f6f8 	udiv	r6, r4, r8
 8000406:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800040a:	fb08 4416 	mls	r4, r8, r6, r4
 800040e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000412:	fb07 f006 	mul.w	r0, r7, r6
 8000416:	4298      	cmp	r0, r3
 8000418:	d908      	bls.n	800042c <__udivmoddi4+0x11c>
 800041a:	eb1c 0303 	adds.w	r3, ip, r3
 800041e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000422:	d202      	bcs.n	800042a <__udivmoddi4+0x11a>
 8000424:	4298      	cmp	r0, r3
 8000426:	f200 80cd 	bhi.w	80005c4 <__udivmoddi4+0x2b4>
 800042a:	4626      	mov	r6, r4
 800042c:	1a1c      	subs	r4, r3, r0
 800042e:	fa1f f38e 	uxth.w	r3, lr
 8000432:	fbb4 f0f8 	udiv	r0, r4, r8
 8000436:	fb08 4410 	mls	r4, r8, r0, r4
 800043a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800043e:	fb00 f707 	mul.w	r7, r0, r7
 8000442:	429f      	cmp	r7, r3
 8000444:	d908      	bls.n	8000458 <__udivmoddi4+0x148>
 8000446:	eb1c 0303 	adds.w	r3, ip, r3
 800044a:	f100 34ff 	add.w	r4, r0, #4294967295
 800044e:	d202      	bcs.n	8000456 <__udivmoddi4+0x146>
 8000450:	429f      	cmp	r7, r3
 8000452:	f200 80b0 	bhi.w	80005b6 <__udivmoddi4+0x2a6>
 8000456:	4620      	mov	r0, r4
 8000458:	1bdb      	subs	r3, r3, r7
 800045a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800045e:	e7a5      	b.n	80003ac <__udivmoddi4+0x9c>
 8000460:	f1c1 0620 	rsb	r6, r1, #32
 8000464:	408b      	lsls	r3, r1
 8000466:	fa22 f706 	lsr.w	r7, r2, r6
 800046a:	431f      	orrs	r7, r3
 800046c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000470:	fa04 f301 	lsl.w	r3, r4, r1
 8000474:	ea43 030c 	orr.w	r3, r3, ip
 8000478:	40f4      	lsrs	r4, r6
 800047a:	fa00 f801 	lsl.w	r8, r0, r1
 800047e:	0c38      	lsrs	r0, r7, #16
 8000480:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000484:	fbb4 fef0 	udiv	lr, r4, r0
 8000488:	fa1f fc87 	uxth.w	ip, r7
 800048c:	fb00 441e 	mls	r4, r0, lr, r4
 8000490:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000494:	fb0e f90c 	mul.w	r9, lr, ip
 8000498:	45a1      	cmp	r9, r4
 800049a:	fa02 f201 	lsl.w	r2, r2, r1
 800049e:	d90a      	bls.n	80004b6 <__udivmoddi4+0x1a6>
 80004a0:	193c      	adds	r4, r7, r4
 80004a2:	f10e 3aff 	add.w	sl, lr, #4294967295
 80004a6:	f080 8084 	bcs.w	80005b2 <__udivmoddi4+0x2a2>
 80004aa:	45a1      	cmp	r9, r4
 80004ac:	f240 8081 	bls.w	80005b2 <__udivmoddi4+0x2a2>
 80004b0:	f1ae 0e02 	sub.w	lr, lr, #2
 80004b4:	443c      	add	r4, r7
 80004b6:	eba4 0409 	sub.w	r4, r4, r9
 80004ba:	fa1f f983 	uxth.w	r9, r3
 80004be:	fbb4 f3f0 	udiv	r3, r4, r0
 80004c2:	fb00 4413 	mls	r4, r0, r3, r4
 80004c6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004ca:	fb03 fc0c 	mul.w	ip, r3, ip
 80004ce:	45a4      	cmp	ip, r4
 80004d0:	d907      	bls.n	80004e2 <__udivmoddi4+0x1d2>
 80004d2:	193c      	adds	r4, r7, r4
 80004d4:	f103 30ff 	add.w	r0, r3, #4294967295
 80004d8:	d267      	bcs.n	80005aa <__udivmoddi4+0x29a>
 80004da:	45a4      	cmp	ip, r4
 80004dc:	d965      	bls.n	80005aa <__udivmoddi4+0x29a>
 80004de:	3b02      	subs	r3, #2
 80004e0:	443c      	add	r4, r7
 80004e2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004e6:	fba0 9302 	umull	r9, r3, r0, r2
 80004ea:	eba4 040c 	sub.w	r4, r4, ip
 80004ee:	429c      	cmp	r4, r3
 80004f0:	46ce      	mov	lr, r9
 80004f2:	469c      	mov	ip, r3
 80004f4:	d351      	bcc.n	800059a <__udivmoddi4+0x28a>
 80004f6:	d04e      	beq.n	8000596 <__udivmoddi4+0x286>
 80004f8:	b155      	cbz	r5, 8000510 <__udivmoddi4+0x200>
 80004fa:	ebb8 030e 	subs.w	r3, r8, lr
 80004fe:	eb64 040c 	sbc.w	r4, r4, ip
 8000502:	fa04 f606 	lsl.w	r6, r4, r6
 8000506:	40cb      	lsrs	r3, r1
 8000508:	431e      	orrs	r6, r3
 800050a:	40cc      	lsrs	r4, r1
 800050c:	e9c5 6400 	strd	r6, r4, [r5]
 8000510:	2100      	movs	r1, #0
 8000512:	e750      	b.n	80003b6 <__udivmoddi4+0xa6>
 8000514:	f1c2 0320 	rsb	r3, r2, #32
 8000518:	fa20 f103 	lsr.w	r1, r0, r3
 800051c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000520:	fa24 f303 	lsr.w	r3, r4, r3
 8000524:	4094      	lsls	r4, r2
 8000526:	430c      	orrs	r4, r1
 8000528:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800052c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000530:	fa1f f78c 	uxth.w	r7, ip
 8000534:	fbb3 f0f8 	udiv	r0, r3, r8
 8000538:	fb08 3110 	mls	r1, r8, r0, r3
 800053c:	0c23      	lsrs	r3, r4, #16
 800053e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000542:	fb00 f107 	mul.w	r1, r0, r7
 8000546:	4299      	cmp	r1, r3
 8000548:	d908      	bls.n	800055c <__udivmoddi4+0x24c>
 800054a:	eb1c 0303 	adds.w	r3, ip, r3
 800054e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000552:	d22c      	bcs.n	80005ae <__udivmoddi4+0x29e>
 8000554:	4299      	cmp	r1, r3
 8000556:	d92a      	bls.n	80005ae <__udivmoddi4+0x29e>
 8000558:	3802      	subs	r0, #2
 800055a:	4463      	add	r3, ip
 800055c:	1a5b      	subs	r3, r3, r1
 800055e:	b2a4      	uxth	r4, r4
 8000560:	fbb3 f1f8 	udiv	r1, r3, r8
 8000564:	fb08 3311 	mls	r3, r8, r1, r3
 8000568:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800056c:	fb01 f307 	mul.w	r3, r1, r7
 8000570:	42a3      	cmp	r3, r4
 8000572:	d908      	bls.n	8000586 <__udivmoddi4+0x276>
 8000574:	eb1c 0404 	adds.w	r4, ip, r4
 8000578:	f101 36ff 	add.w	r6, r1, #4294967295
 800057c:	d213      	bcs.n	80005a6 <__udivmoddi4+0x296>
 800057e:	42a3      	cmp	r3, r4
 8000580:	d911      	bls.n	80005a6 <__udivmoddi4+0x296>
 8000582:	3902      	subs	r1, #2
 8000584:	4464      	add	r4, ip
 8000586:	1ae4      	subs	r4, r4, r3
 8000588:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800058c:	e739      	b.n	8000402 <__udivmoddi4+0xf2>
 800058e:	4604      	mov	r4, r0
 8000590:	e6f0      	b.n	8000374 <__udivmoddi4+0x64>
 8000592:	4608      	mov	r0, r1
 8000594:	e706      	b.n	80003a4 <__udivmoddi4+0x94>
 8000596:	45c8      	cmp	r8, r9
 8000598:	d2ae      	bcs.n	80004f8 <__udivmoddi4+0x1e8>
 800059a:	ebb9 0e02 	subs.w	lr, r9, r2
 800059e:	eb63 0c07 	sbc.w	ip, r3, r7
 80005a2:	3801      	subs	r0, #1
 80005a4:	e7a8      	b.n	80004f8 <__udivmoddi4+0x1e8>
 80005a6:	4631      	mov	r1, r6
 80005a8:	e7ed      	b.n	8000586 <__udivmoddi4+0x276>
 80005aa:	4603      	mov	r3, r0
 80005ac:	e799      	b.n	80004e2 <__udivmoddi4+0x1d2>
 80005ae:	4630      	mov	r0, r6
 80005b0:	e7d4      	b.n	800055c <__udivmoddi4+0x24c>
 80005b2:	46d6      	mov	lr, sl
 80005b4:	e77f      	b.n	80004b6 <__udivmoddi4+0x1a6>
 80005b6:	4463      	add	r3, ip
 80005b8:	3802      	subs	r0, #2
 80005ba:	e74d      	b.n	8000458 <__udivmoddi4+0x148>
 80005bc:	4606      	mov	r6, r0
 80005be:	4623      	mov	r3, r4
 80005c0:	4608      	mov	r0, r1
 80005c2:	e70f      	b.n	80003e4 <__udivmoddi4+0xd4>
 80005c4:	3e02      	subs	r6, #2
 80005c6:	4463      	add	r3, ip
 80005c8:	e730      	b.n	800042c <__udivmoddi4+0x11c>
 80005ca:	bf00      	nop

080005cc <__aeabi_idiv0>:
 80005cc:	4770      	bx	lr
 80005ce:	bf00      	nop

080005d0 <MX_GPIO_Init>:
     PA12   ------> USB_OTG_FS_DP
     PG11   ------> ETH_TX_EN
     PG13   ------> ETH_TXD0
*/
void MX_GPIO_Init(void)
{
 80005d0:	b580      	push	{r7, lr}
 80005d2:	b08c      	sub	sp, #48	@ 0x30
 80005d4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005d6:	f107 031c 	add.w	r3, r7, #28
 80005da:	2200      	movs	r2, #0
 80005dc:	601a      	str	r2, [r3, #0]
 80005de:	605a      	str	r2, [r3, #4]
 80005e0:	609a      	str	r2, [r3, #8]
 80005e2:	60da      	str	r2, [r3, #12]
 80005e4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80005e6:	4b7d      	ldr	r3, [pc, #500]	@ (80007dc <MX_GPIO_Init+0x20c>)
 80005e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005ea:	4a7c      	ldr	r2, [pc, #496]	@ (80007dc <MX_GPIO_Init+0x20c>)
 80005ec:	f043 0304 	orr.w	r3, r3, #4
 80005f0:	6313      	str	r3, [r2, #48]	@ 0x30
 80005f2:	4b7a      	ldr	r3, [pc, #488]	@ (80007dc <MX_GPIO_Init+0x20c>)
 80005f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005f6:	f003 0304 	and.w	r3, r3, #4
 80005fa:	61bb      	str	r3, [r7, #24]
 80005fc:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80005fe:	4b77      	ldr	r3, [pc, #476]	@ (80007dc <MX_GPIO_Init+0x20c>)
 8000600:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000602:	4a76      	ldr	r2, [pc, #472]	@ (80007dc <MX_GPIO_Init+0x20c>)
 8000604:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000608:	6313      	str	r3, [r2, #48]	@ 0x30
 800060a:	4b74      	ldr	r3, [pc, #464]	@ (80007dc <MX_GPIO_Init+0x20c>)
 800060c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800060e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000612:	617b      	str	r3, [r7, #20]
 8000614:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000616:	4b71      	ldr	r3, [pc, #452]	@ (80007dc <MX_GPIO_Init+0x20c>)
 8000618:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800061a:	4a70      	ldr	r2, [pc, #448]	@ (80007dc <MX_GPIO_Init+0x20c>)
 800061c:	f043 0301 	orr.w	r3, r3, #1
 8000620:	6313      	str	r3, [r2, #48]	@ 0x30
 8000622:	4b6e      	ldr	r3, [pc, #440]	@ (80007dc <MX_GPIO_Init+0x20c>)
 8000624:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000626:	f003 0301 	and.w	r3, r3, #1
 800062a:	613b      	str	r3, [r7, #16]
 800062c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800062e:	4b6b      	ldr	r3, [pc, #428]	@ (80007dc <MX_GPIO_Init+0x20c>)
 8000630:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000632:	4a6a      	ldr	r2, [pc, #424]	@ (80007dc <MX_GPIO_Init+0x20c>)
 8000634:	f043 0302 	orr.w	r3, r3, #2
 8000638:	6313      	str	r3, [r2, #48]	@ 0x30
 800063a:	4b68      	ldr	r3, [pc, #416]	@ (80007dc <MX_GPIO_Init+0x20c>)
 800063c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800063e:	f003 0302 	and.w	r3, r3, #2
 8000642:	60fb      	str	r3, [r7, #12]
 8000644:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000646:	4b65      	ldr	r3, [pc, #404]	@ (80007dc <MX_GPIO_Init+0x20c>)
 8000648:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800064a:	4a64      	ldr	r2, [pc, #400]	@ (80007dc <MX_GPIO_Init+0x20c>)
 800064c:	f043 0310 	orr.w	r3, r3, #16
 8000650:	6313      	str	r3, [r2, #48]	@ 0x30
 8000652:	4b62      	ldr	r3, [pc, #392]	@ (80007dc <MX_GPIO_Init+0x20c>)
 8000654:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000656:	f003 0310 	and.w	r3, r3, #16
 800065a:	60bb      	str	r3, [r7, #8]
 800065c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800065e:	4b5f      	ldr	r3, [pc, #380]	@ (80007dc <MX_GPIO_Init+0x20c>)
 8000660:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000662:	4a5e      	ldr	r2, [pc, #376]	@ (80007dc <MX_GPIO_Init+0x20c>)
 8000664:	f043 0308 	orr.w	r3, r3, #8
 8000668:	6313      	str	r3, [r2, #48]	@ 0x30
 800066a:	4b5c      	ldr	r3, [pc, #368]	@ (80007dc <MX_GPIO_Init+0x20c>)
 800066c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800066e:	f003 0308 	and.w	r3, r3, #8
 8000672:	607b      	str	r3, [r7, #4]
 8000674:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000676:	4b59      	ldr	r3, [pc, #356]	@ (80007dc <MX_GPIO_Init+0x20c>)
 8000678:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800067a:	4a58      	ldr	r2, [pc, #352]	@ (80007dc <MX_GPIO_Init+0x20c>)
 800067c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000680:	6313      	str	r3, [r2, #48]	@ 0x30
 8000682:	4b56      	ldr	r3, [pc, #344]	@ (80007dc <MX_GPIO_Init+0x20c>)
 8000684:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000686:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800068a:	603b      	str	r3, [r7, #0]
 800068c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 800068e:	2200      	movs	r2, #0
 8000690:	f244 0181 	movw	r1, #16513	@ 0x4081
 8000694:	4852      	ldr	r0, [pc, #328]	@ (80007e0 <MX_GPIO_Init+0x210>)
 8000696:	f001 fb65 	bl	8001d64 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 800069a:	2200      	movs	r2, #0
 800069c:	2140      	movs	r1, #64	@ 0x40
 800069e:	4851      	ldr	r0, [pc, #324]	@ (80007e4 <MX_GPIO_Init+0x214>)
 80006a0:	f001 fb60 	bl	8001d64 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 80006a4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80006a8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80006aa:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80006ae:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006b0:	2300      	movs	r3, #0
 80006b2:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 80006b4:	f107 031c 	add.w	r3, r7, #28
 80006b8:	4619      	mov	r1, r3
 80006ba:	484b      	ldr	r0, [pc, #300]	@ (80007e8 <MX_GPIO_Init+0x218>)
 80006bc:	f001 f9a6 	bl	8001a0c <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 80006c0:	2332      	movs	r3, #50	@ 0x32
 80006c2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006c4:	2302      	movs	r3, #2
 80006c6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006c8:	2300      	movs	r3, #0
 80006ca:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80006cc:	2303      	movs	r3, #3
 80006ce:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80006d0:	230b      	movs	r3, #11
 80006d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80006d4:	f107 031c 	add.w	r3, r7, #28
 80006d8:	4619      	mov	r1, r3
 80006da:	4843      	ldr	r0, [pc, #268]	@ (80007e8 <MX_GPIO_Init+0x218>)
 80006dc:	f001 f996 	bl	8001a0c <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 80006e0:	2386      	movs	r3, #134	@ 0x86
 80006e2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006e4:	2302      	movs	r3, #2
 80006e6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006e8:	2300      	movs	r3, #0
 80006ea:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80006ec:	2303      	movs	r3, #3
 80006ee:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80006f0:	230b      	movs	r3, #11
 80006f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006f4:	f107 031c 	add.w	r3, r7, #28
 80006f8:	4619      	mov	r1, r3
 80006fa:	483c      	ldr	r0, [pc, #240]	@ (80007ec <MX_GPIO_Init+0x21c>)
 80006fc:	f001 f986 	bl	8001a0c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000700:	f244 0381 	movw	r3, #16513	@ 0x4081
 8000704:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000706:	2301      	movs	r3, #1
 8000708:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800070a:	2300      	movs	r3, #0
 800070c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800070e:	2300      	movs	r3, #0
 8000710:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000712:	f107 031c 	add.w	r3, r7, #28
 8000716:	4619      	mov	r1, r3
 8000718:	4831      	ldr	r0, [pc, #196]	@ (80007e0 <MX_GPIO_Init+0x210>)
 800071a:	f001 f977 	bl	8001a0c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 800071e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000722:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000724:	2302      	movs	r3, #2
 8000726:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000728:	2300      	movs	r3, #0
 800072a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800072c:	2303      	movs	r3, #3
 800072e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000730:	230b      	movs	r3, #11
 8000732:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000734:	f107 031c 	add.w	r3, r7, #28
 8000738:	4619      	mov	r1, r3
 800073a:	4829      	ldr	r0, [pc, #164]	@ (80007e0 <MX_GPIO_Init+0x210>)
 800073c:	f001 f966 	bl	8001a0c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000740:	2340      	movs	r3, #64	@ 0x40
 8000742:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000744:	2301      	movs	r3, #1
 8000746:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000748:	2300      	movs	r3, #0
 800074a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800074c:	2300      	movs	r3, #0
 800074e:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000750:	f107 031c 	add.w	r3, r7, #28
 8000754:	4619      	mov	r1, r3
 8000756:	4823      	ldr	r0, [pc, #140]	@ (80007e4 <MX_GPIO_Init+0x214>)
 8000758:	f001 f958 	bl	8001a0c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 800075c:	2380      	movs	r3, #128	@ 0x80
 800075e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000760:	2300      	movs	r3, #0
 8000762:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000764:	2300      	movs	r3, #0
 8000766:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000768:	f107 031c 	add.w	r3, r7, #28
 800076c:	4619      	mov	r1, r3
 800076e:	481d      	ldr	r0, [pc, #116]	@ (80007e4 <MX_GPIO_Init+0x214>)
 8000770:	f001 f94c 	bl	8001a0c <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000774:	f44f 53e8 	mov.w	r3, #7424	@ 0x1d00
 8000778:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800077a:	2302      	movs	r3, #2
 800077c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800077e:	2300      	movs	r3, #0
 8000780:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000782:	2303      	movs	r3, #3
 8000784:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000786:	230a      	movs	r3, #10
 8000788:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800078a:	f107 031c 	add.w	r3, r7, #28
 800078e:	4619      	mov	r1, r3
 8000790:	4816      	ldr	r0, [pc, #88]	@ (80007ec <MX_GPIO_Init+0x21c>)
 8000792:	f001 f93b 	bl	8001a0c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000796:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800079a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800079c:	2300      	movs	r3, #0
 800079e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007a0:	2300      	movs	r3, #0
 80007a2:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 80007a4:	f107 031c 	add.w	r3, r7, #28
 80007a8:	4619      	mov	r1, r3
 80007aa:	4810      	ldr	r0, [pc, #64]	@ (80007ec <MX_GPIO_Init+0x21c>)
 80007ac:	f001 f92e 	bl	8001a0c <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 80007b0:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 80007b4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007b6:	2302      	movs	r3, #2
 80007b8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ba:	2300      	movs	r3, #0
 80007bc:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007be:	2303      	movs	r3, #3
 80007c0:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80007c2:	230b      	movs	r3, #11
 80007c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80007c6:	f107 031c 	add.w	r3, r7, #28
 80007ca:	4619      	mov	r1, r3
 80007cc:	4805      	ldr	r0, [pc, #20]	@ (80007e4 <MX_GPIO_Init+0x214>)
 80007ce:	f001 f91d 	bl	8001a0c <HAL_GPIO_Init>

}
 80007d2:	bf00      	nop
 80007d4:	3730      	adds	r7, #48	@ 0x30
 80007d6:	46bd      	mov	sp, r7
 80007d8:	bd80      	pop	{r7, pc}
 80007da:	bf00      	nop
 80007dc:	40023800 	.word	0x40023800
 80007e0:	40020400 	.word	0x40020400
 80007e4:	40021800 	.word	0x40021800
 80007e8:	40020800 	.word	0x40020800
 80007ec:	40020000 	.word	0x40020000

080007f0 <hc_sr04_init>:
#include "main.h"

#define HC_SR04_US_TO_CM_CONVERTER 0.017f

void hc_sr04_init(struct us_sensor_str *us_sensor, TIM_HandleTypeDef *htim_echo, TIM_HandleTypeDef *htim_trig, uint32_t trig_channel)
{
 80007f0:	b580      	push	{r7, lr}
 80007f2:	b084      	sub	sp, #16
 80007f4:	af00      	add	r7, sp, #0
 80007f6:	60f8      	str	r0, [r7, #12]
 80007f8:	60b9      	str	r1, [r7, #8]
 80007fa:	607a      	str	r2, [r7, #4]
 80007fc:	603b      	str	r3, [r7, #0]
	us_sensor->htim_echo = htim_echo;
 80007fe:	68fb      	ldr	r3, [r7, #12]
 8000800:	68ba      	ldr	r2, [r7, #8]
 8000802:	601a      	str	r2, [r3, #0]
		us_sensor->htim_trig = htim_trig;
 8000804:	68fb      	ldr	r3, [r7, #12]
 8000806:	687a      	ldr	r2, [r7, #4]
 8000808:	605a      	str	r2, [r3, #4]
		us_sensor->trig_channel = trig_channel;
 800080a:	68fb      	ldr	r3, [r7, #12]
 800080c:	683a      	ldr	r2, [r7, #0]
 800080e:	609a      	str	r2, [r3, #8]

		HAL_TIM_IC_Start_IT(us_sensor->htim_echo, TIM_CHANNEL_1 | TIM_CHANNEL_2);
 8000810:	68fb      	ldr	r3, [r7, #12]
 8000812:	681b      	ldr	r3, [r3, #0]
 8000814:	2104      	movs	r1, #4
 8000816:	4618      	mov	r0, r3
 8000818:	f002 fe24 	bl	8003464 <HAL_TIM_IC_Start_IT>
		HAL_TIM_PWM_Start(us_sensor->htim_trig, us_sensor->trig_channel);
 800081c:	68fb      	ldr	r3, [r7, #12]
 800081e:	685a      	ldr	r2, [r3, #4]
 8000820:	68fb      	ldr	r3, [r7, #12]
 8000822:	689b      	ldr	r3, [r3, #8]
 8000824:	4619      	mov	r1, r3
 8000826:	4610      	mov	r0, r2
 8000828:	f002 fcc0 	bl	80031ac <HAL_TIM_PWM_Start>
}
 800082c:	bf00      	nop
 800082e:	3710      	adds	r7, #16
 8000830:	46bd      	mov	sp, r7
 8000832:	bd80      	pop	{r7, pc}

08000834 <hc_sr04_convert_us_to_cm>:

float hc_sr04_convert_us_to_cm(uint32_t distance_us)
{
 8000834:	b480      	push	{r7}
 8000836:	b083      	sub	sp, #12
 8000838:	af00      	add	r7, sp, #0
 800083a:	6078      	str	r0, [r7, #4]
    return ((float)distance_us * HC_SR04_US_TO_CM_CONVERTER);
 800083c:	687b      	ldr	r3, [r7, #4]
 800083e:	ee07 3a90 	vmov	s15, r3
 8000842:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000846:	ed9f 7a05 	vldr	s14, [pc, #20]	@ 800085c <hc_sr04_convert_us_to_cm+0x28>
 800084a:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 800084e:	eeb0 0a67 	vmov.f32	s0, s15
 8000852:	370c      	adds	r7, #12
 8000854:	46bd      	mov	sp, r7
 8000856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800085a:	4770      	bx	lr
 800085c:	3c8b4396 	.word	0x3c8b4396

08000860 <HAL_TIM_IC_CaptureCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8000860:	b590      	push	{r4, r7, lr}
 8000862:	b08f      	sub	sp, #60	@ 0x3c
 8000864:	af00      	add	r7, sp, #0
 8000866:	6078      	str	r0, [r7, #4]
	if(TIM4 == htim->Instance)
 8000868:	687b      	ldr	r3, [r7, #4]
 800086a:	681b      	ldr	r3, [r3, #0]
 800086c:	4a39      	ldr	r2, [pc, #228]	@ (8000954 <HAL_TIM_IC_CaptureCallback+0xf4>)
 800086e:	4293      	cmp	r3, r2
 8000870:	d16b      	bne.n	800094a <HAL_TIM_IC_CaptureCallback+0xea>
	{
		uint32_t echo_us;

		echo_us = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_2);
 8000872:	2104      	movs	r1, #4
 8000874:	6878      	ldr	r0, [r7, #4]
 8000876:	f003 fb09 	bl	8003e8c <HAL_TIM_ReadCapturedValue>
 800087a:	6378      	str	r0, [r7, #52]	@ 0x34
		distance_sensor.distance_cm = hc_sr04_convert_us_to_cm(echo_us);
 800087c:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 800087e:	f7ff ffd9 	bl	8000834 <hc_sr04_convert_us_to_cm>
 8000882:	eef0 7a40 	vmov.f32	s15, s0
 8000886:	4b34      	ldr	r3, [pc, #208]	@ (8000958 <HAL_TIM_IC_CaptureCallback+0xf8>)
 8000888:	edc3 7a03 	vstr	s15, [r3, #12]
		if (distance_sensor.distance_cm > 40 || distance_sensor.distance_cm < 4){
 800088c:	4b32      	ldr	r3, [pc, #200]	@ (8000958 <HAL_TIM_IC_CaptureCallback+0xf8>)
 800088e:	edd3 7a03 	vldr	s15, [r3, #12]
 8000892:	ed9f 7a32 	vldr	s14, [pc, #200]	@ 800095c <HAL_TIM_IC_CaptureCallback+0xfc>
 8000896:	eef4 7ac7 	vcmpe.f32	s15, s14
 800089a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800089e:	dc09      	bgt.n	80008b4 <HAL_TIM_IC_CaptureCallback+0x54>
 80008a0:	4b2d      	ldr	r3, [pc, #180]	@ (8000958 <HAL_TIM_IC_CaptureCallback+0xf8>)
 80008a2:	edd3 7a03 	vldr	s15, [r3, #12]
 80008a6:	eeb1 7a00 	vmov.f32	s14, #16	@ 0x40800000  4.0
 80008aa:	eef4 7ac7 	vcmpe.f32	s15, s14
 80008ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80008b2:	d503      	bpl.n	80008bc <HAL_TIM_IC_CaptureCallback+0x5c>
			distance_sensor.distance_cm = previous_distance;
 80008b4:	4b2a      	ldr	r3, [pc, #168]	@ (8000960 <HAL_TIM_IC_CaptureCallback+0x100>)
 80008b6:	681b      	ldr	r3, [r3, #0]
 80008b8:	4a27      	ldr	r2, [pc, #156]	@ (8000958 <HAL_TIM_IC_CaptureCallback+0xf8>)
 80008ba:	60d3      	str	r3, [r2, #12]
		}
		previous_distance = distance_sensor.distance_cm;
 80008bc:	4b26      	ldr	r3, [pc, #152]	@ (8000958 <HAL_TIM_IC_CaptureCallback+0xf8>)
 80008be:	68db      	ldr	r3, [r3, #12]
 80008c0:	4a27      	ldr	r2, [pc, #156]	@ (8000960 <HAL_TIM_IC_CaptureCallback+0x100>)
 80008c2:	6013      	str	r3, [r2, #0]


		d = distance_sensor.distance_cm * 10;
 80008c4:	4b24      	ldr	r3, [pc, #144]	@ (8000958 <HAL_TIM_IC_CaptureCallback+0xf8>)
 80008c6:	edd3 7a03 	vldr	s15, [r3, #12]
 80008ca:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 80008ce:	ee67 7a87 	vmul.f32	s15, s15, s14
 80008d2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80008d6:	ee17 2a90 	vmov	r2, s15
 80008da:	4b22      	ldr	r3, [pc, #136]	@ (8000964 <HAL_TIM_IC_CaptureCallback+0x104>)
 80008dc:	601a      	str	r2, [r3, #0]


		uint8_t tx_buffer[32];
		int tx_msg_len = sprintf((char*)tx_buffer, "%03u.%01u\r", d / 10, d % 10);
 80008de:	4b21      	ldr	r3, [pc, #132]	@ (8000964 <HAL_TIM_IC_CaptureCallback+0x104>)
 80008e0:	681b      	ldr	r3, [r3, #0]
 80008e2:	4a21      	ldr	r2, [pc, #132]	@ (8000968 <HAL_TIM_IC_CaptureCallback+0x108>)
 80008e4:	fb82 1203 	smull	r1, r2, r2, r3
 80008e8:	1092      	asrs	r2, r2, #2
 80008ea:	17db      	asrs	r3, r3, #31
 80008ec:	1ad4      	subs	r4, r2, r3
 80008ee:	4b1d      	ldr	r3, [pc, #116]	@ (8000964 <HAL_TIM_IC_CaptureCallback+0x104>)
 80008f0:	681a      	ldr	r2, [r3, #0]
 80008f2:	4b1d      	ldr	r3, [pc, #116]	@ (8000968 <HAL_TIM_IC_CaptureCallback+0x108>)
 80008f4:	fb83 1302 	smull	r1, r3, r3, r2
 80008f8:	1099      	asrs	r1, r3, #2
 80008fa:	17d3      	asrs	r3, r2, #31
 80008fc:	1ac9      	subs	r1, r1, r3
 80008fe:	460b      	mov	r3, r1
 8000900:	009b      	lsls	r3, r3, #2
 8000902:	440b      	add	r3, r1
 8000904:	005b      	lsls	r3, r3, #1
 8000906:	1ad1      	subs	r1, r2, r3
 8000908:	f107 000c 	add.w	r0, r7, #12
 800090c:	460b      	mov	r3, r1
 800090e:	4622      	mov	r2, r4
 8000910:	4916      	ldr	r1, [pc, #88]	@ (800096c <HAL_TIM_IC_CaptureCallback+0x10c>)
 8000912:	f004 feb3 	bl	800567c <siprintf>
 8000916:	6338      	str	r0, [r7, #48]	@ 0x30
		HAL_UART_Transmit(&huart3, tx_buffer, tx_msg_len, 100);
 8000918:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800091a:	b29a      	uxth	r2, r3
 800091c:	f107 010c 	add.w	r1, r7, #12
 8000920:	2364      	movs	r3, #100	@ 0x64
 8000922:	4813      	ldr	r0, [pc, #76]	@ (8000970 <HAL_TIM_IC_CaptureCallback+0x110>)
 8000924:	f004 f9a0 	bl	8004c68 <HAL_UART_Transmit>
		int u = pid_calculate(&pid, y_ref, distance_sensor.distance_cm);
 8000928:	4b12      	ldr	r3, [pc, #72]	@ (8000974 <HAL_TIM_IC_CaptureCallback+0x114>)
 800092a:	edd3 7a00 	vldr	s15, [r3]
 800092e:	4b0a      	ldr	r3, [pc, #40]	@ (8000958 <HAL_TIM_IC_CaptureCallback+0xf8>)
 8000930:	ed93 7a03 	vldr	s14, [r3, #12]
 8000934:	eef0 0a47 	vmov.f32	s1, s14
 8000938:	eeb0 0a67 	vmov.f32	s0, s15
 800093c:	480e      	ldr	r0, [pc, #56]	@ (8000978 <HAL_TIM_IC_CaptureCallback+0x118>)
 800093e:	f000 f915 	bl	8000b6c <pid_calculate>
 8000942:	62f8      	str	r0, [r7, #44]	@ 0x2c
		servo_set_angle(u);
 8000944:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8000946:	f000 fa13 	bl	8000d70 <servo_set_angle>




	}
}
 800094a:	bf00      	nop
 800094c:	373c      	adds	r7, #60	@ 0x3c
 800094e:	46bd      	mov	sp, r7
 8000950:	bd90      	pop	{r4, r7, pc}
 8000952:	bf00      	nop
 8000954:	40000800 	.word	0x40000800
 8000958:	20000090 	.word	0x20000090
 800095c:	42200000 	.word	0x42200000
 8000960:	20000014 	.word	0x20000014
 8000964:	200000a0 	.word	0x200000a0
 8000968:	66666667 	.word	0x66666667
 800096c:	08005fd4 	.word	0x08005fd4
 8000970:	20000208 	.word	0x20000208
 8000974:	20000010 	.word	0x20000010
 8000978:	200000a4 	.word	0x200000a4

0800097c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800097c:	b580      	push	{r7, lr}
 800097e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000980:	f000 fed5 	bl	800172e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000984:	f000 f848 	bl	8000a18 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000988:	f7ff fe22 	bl	80005d0 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 800098c:	f000 fe16 	bl	80015bc <MX_USART3_UART_Init>
  MX_TIM1_Init();
 8000990:	f000 fb06 	bl	8000fa0 <MX_TIM1_Init>
  MX_TIM2_Init();
 8000994:	f000 fba8 	bl	80010e8 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000998:	f000 fc00 	bl	800119c <MX_TIM3_Init>
  MX_TIM4_Init();
 800099c:	f000 fc5a 	bl	8001254 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
  hc_sr04_init(&distance_sensor, &htim4, &htim2, TIM_CHANNEL_4);
 80009a0:	230c      	movs	r3, #12
 80009a2:	4a13      	ldr	r2, [pc, #76]	@ (80009f0 <main+0x74>)
 80009a4:	4913      	ldr	r1, [pc, #76]	@ (80009f4 <main+0x78>)
 80009a6:	4814      	ldr	r0, [pc, #80]	@ (80009f8 <main+0x7c>)
 80009a8:	f7ff ff22 	bl	80007f0 <hc_sr04_init>
  servo_init(&htim3, TIM_CHANNEL_3);
 80009ac:	2108      	movs	r1, #8
 80009ae:	4813      	ldr	r0, [pc, #76]	@ (80009fc <main+0x80>)
 80009b0:	f000 f986 	bl	8000cc0 <servo_init>
  pid_init(&pid, kp, ki, kd, fs, anti_windup_limit);
 80009b4:	4b12      	ldr	r3, [pc, #72]	@ (8000a00 <main+0x84>)
 80009b6:	edd3 7a00 	vldr	s15, [r3]
 80009ba:	4b12      	ldr	r3, [pc, #72]	@ (8000a04 <main+0x88>)
 80009bc:	ed93 7a00 	vldr	s14, [r3]
 80009c0:	4b11      	ldr	r3, [pc, #68]	@ (8000a08 <main+0x8c>)
 80009c2:	edd3 6a00 	vldr	s13, [r3]
 80009c6:	4b11      	ldr	r3, [pc, #68]	@ (8000a0c <main+0x90>)
 80009c8:	ed93 6a00 	vldr	s12, [r3]
 80009cc:	4b10      	ldr	r3, [pc, #64]	@ (8000a10 <main+0x94>)
 80009ce:	edd3 5a00 	vldr	s11, [r3]
 80009d2:	eeb0 2a65 	vmov.f32	s4, s11
 80009d6:	eef0 1a46 	vmov.f32	s3, s12
 80009da:	eeb0 1a66 	vmov.f32	s2, s13
 80009de:	eef0 0a47 	vmov.f32	s1, s14
 80009e2:	eeb0 0a67 	vmov.f32	s0, s15
 80009e6:	480b      	ldr	r0, [pc, #44]	@ (8000a14 <main+0x98>)
 80009e8:	f000 f88e 	bl	8000b08 <pid_init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80009ec:	bf00      	nop
 80009ee:	e7fd      	b.n	80009ec <main+0x70>
 80009f0:	20000124 	.word	0x20000124
 80009f4:	200001bc 	.word	0x200001bc
 80009f8:	20000090 	.word	0x20000090
 80009fc:	20000170 	.word	0x20000170
 8000a00:	20000000 	.word	0x20000000
 8000a04:	200000c8 	.word	0x200000c8
 8000a08:	20000004 	.word	0x20000004
 8000a0c:	20000008 	.word	0x20000008
 8000a10:	2000000c 	.word	0x2000000c
 8000a14:	200000a4 	.word	0x200000a4

08000a18 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	b094      	sub	sp, #80	@ 0x50
 8000a1c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a1e:	f107 031c 	add.w	r3, r7, #28
 8000a22:	2234      	movs	r2, #52	@ 0x34
 8000a24:	2100      	movs	r1, #0
 8000a26:	4618      	mov	r0, r3
 8000a28:	f004 fe48 	bl	80056bc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a2c:	f107 0308 	add.w	r3, r7, #8
 8000a30:	2200      	movs	r2, #0
 8000a32:	601a      	str	r2, [r3, #0]
 8000a34:	605a      	str	r2, [r3, #4]
 8000a36:	609a      	str	r2, [r3, #8]
 8000a38:	60da      	str	r2, [r3, #12]
 8000a3a:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000a3c:	f001 f9ac 	bl	8001d98 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a40:	4b2c      	ldr	r3, [pc, #176]	@ (8000af4 <SystemClock_Config+0xdc>)
 8000a42:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a44:	4a2b      	ldr	r2, [pc, #172]	@ (8000af4 <SystemClock_Config+0xdc>)
 8000a46:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000a4a:	6413      	str	r3, [r2, #64]	@ 0x40
 8000a4c:	4b29      	ldr	r3, [pc, #164]	@ (8000af4 <SystemClock_Config+0xdc>)
 8000a4e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a50:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000a54:	607b      	str	r3, [r7, #4]
 8000a56:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000a58:	4b27      	ldr	r3, [pc, #156]	@ (8000af8 <SystemClock_Config+0xe0>)
 8000a5a:	681b      	ldr	r3, [r3, #0]
 8000a5c:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000a60:	4a25      	ldr	r2, [pc, #148]	@ (8000af8 <SystemClock_Config+0xe0>)
 8000a62:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000a66:	6013      	str	r3, [r2, #0]
 8000a68:	4b23      	ldr	r3, [pc, #140]	@ (8000af8 <SystemClock_Config+0xe0>)
 8000a6a:	681b      	ldr	r3, [r3, #0]
 8000a6c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000a70:	603b      	str	r3, [r7, #0]
 8000a72:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000a74:	2301      	movs	r3, #1
 8000a76:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000a78:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8000a7c:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a7e:	2302      	movs	r3, #2
 8000a80:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000a82:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000a86:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000a88:	2304      	movs	r3, #4
 8000a8a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 96;
 8000a8c:	2360      	movs	r3, #96	@ 0x60
 8000a8e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000a90:	2302      	movs	r3, #2
 8000a92:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000a94:	2304      	movs	r3, #4
 8000a96:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000a98:	2302      	movs	r3, #2
 8000a9a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a9c:	f107 031c 	add.w	r3, r7, #28
 8000aa0:	4618      	mov	r0, r3
 8000aa2:	f001 f9d9 	bl	8001e58 <HAL_RCC_OscConfig>
 8000aa6:	4603      	mov	r3, r0
 8000aa8:	2b00      	cmp	r3, #0
 8000aaa:	d001      	beq.n	8000ab0 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000aac:	f000 f826 	bl	8000afc <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000ab0:	f001 f982 	bl	8001db8 <HAL_PWREx_EnableOverDrive>
 8000ab4:	4603      	mov	r3, r0
 8000ab6:	2b00      	cmp	r3, #0
 8000ab8:	d001      	beq.n	8000abe <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8000aba:	f000 f81f 	bl	8000afc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000abe:	230f      	movs	r3, #15
 8000ac0:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ac2:	2302      	movs	r3, #2
 8000ac4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ac6:	2300      	movs	r3, #0
 8000ac8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000aca:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000ace:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000ad0:	2300      	movs	r3, #0
 8000ad2:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000ad4:	f107 0308 	add.w	r3, r7, #8
 8000ad8:	2103      	movs	r1, #3
 8000ada:	4618      	mov	r0, r3
 8000adc:	f001 fc6a 	bl	80023b4 <HAL_RCC_ClockConfig>
 8000ae0:	4603      	mov	r3, r0
 8000ae2:	2b00      	cmp	r3, #0
 8000ae4:	d001      	beq.n	8000aea <SystemClock_Config+0xd2>
  {
    Error_Handler();
 8000ae6:	f000 f809 	bl	8000afc <Error_Handler>
  }
}
 8000aea:	bf00      	nop
 8000aec:	3750      	adds	r7, #80	@ 0x50
 8000aee:	46bd      	mov	sp, r7
 8000af0:	bd80      	pop	{r7, pc}
 8000af2:	bf00      	nop
 8000af4:	40023800 	.word	0x40023800
 8000af8:	40007000 	.word	0x40007000

08000afc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000afc:	b480      	push	{r7}
 8000afe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b00:	b672      	cpsid	i
}
 8000b02:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b04:	bf00      	nop
 8000b06:	e7fd      	b.n	8000b04 <Error_Handler+0x8>

08000b08 <pid_init>:
 *  Created on: Dec 28, 2024
 *      Author: Kuba
 */
#include "pid_controller.h"

void pid_init(pid_str *pid_data, float kp_init, float ki_init, float kd_init, float fs_init, float anti_windup_limit_init) {
 8000b08:	b480      	push	{r7}
 8000b0a:	b087      	sub	sp, #28
 8000b0c:	af00      	add	r7, sp, #0
 8000b0e:	6178      	str	r0, [r7, #20]
 8000b10:	ed87 0a04 	vstr	s0, [r7, #16]
 8000b14:	edc7 0a03 	vstr	s1, [r7, #12]
 8000b18:	ed87 1a02 	vstr	s2, [r7, #8]
 8000b1c:	edc7 1a01 	vstr	s3, [r7, #4]
 8000b20:	ed87 2a00 	vstr	s4, [r7]
    pid_data->prev_error = 0.0f;
 8000b24:	697b      	ldr	r3, [r7, #20]
 8000b26:	f04f 0200 	mov.w	r2, #0
 8000b2a:	601a      	str	r2, [r3, #0]
    pid_data->total_error = 0.0f;
 8000b2c:	697b      	ldr	r3, [r7, #20]
 8000b2e:	f04f 0200 	mov.w	r2, #0
 8000b32:	605a      	str	r2, [r3, #4]
    pid_data->max_u = 90;
 8000b34:	697b      	ldr	r3, [r7, #20]
 8000b36:	225a      	movs	r2, #90	@ 0x5a
 8000b38:	615a      	str	r2, [r3, #20]
    pid_data->min_u = -90;
 8000b3a:	697b      	ldr	r3, [r7, #20]
 8000b3c:	f06f 0259 	mvn.w	r2, #89	@ 0x59
 8000b40:	619a      	str	r2, [r3, #24]

    pid_data->Kp = kp_init;
 8000b42:	697b      	ldr	r3, [r7, #20]
 8000b44:	693a      	ldr	r2, [r7, #16]
 8000b46:	609a      	str	r2, [r3, #8]
    pid_data->Ki = ki_init;
 8000b48:	697b      	ldr	r3, [r7, #20]
 8000b4a:	68fa      	ldr	r2, [r7, #12]
 8000b4c:	60da      	str	r2, [r3, #12]
    pid_data->Kd = kd_init;
 8000b4e:	697b      	ldr	r3, [r7, #20]
 8000b50:	68ba      	ldr	r2, [r7, #8]
 8000b52:	611a      	str	r2, [r3, #16]
    pid_data->fs = fs_init;
 8000b54:	697b      	ldr	r3, [r7, #20]
 8000b56:	687a      	ldr	r2, [r7, #4]
 8000b58:	61da      	str	r2, [r3, #28]

    pid_data->anti_windup_limit = anti_windup_limit_init;
 8000b5a:	697b      	ldr	r3, [r7, #20]
 8000b5c:	683a      	ldr	r2, [r7, #0]
 8000b5e:	621a      	str	r2, [r3, #32]
}
 8000b60:	bf00      	nop
 8000b62:	371c      	adds	r7, #28
 8000b64:	46bd      	mov	sp, r7
 8000b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b6a:	4770      	bx	lr

08000b6c <pid_calculate>:

int pid_calculate(pid_str *pid_data, float y_ref, float y) {
 8000b6c:	b480      	push	{r7}
 8000b6e:	b08b      	sub	sp, #44	@ 0x2c
 8000b70:	af00      	add	r7, sp, #0
 8000b72:	60f8      	str	r0, [r7, #12]
 8000b74:	ed87 0a02 	vstr	s0, [r7, #8]
 8000b78:	edc7 0a01 	vstr	s1, [r7, #4]
    float error = y_ref - y;
 8000b7c:	ed97 7a02 	vldr	s14, [r7, #8]
 8000b80:	edd7 7a01 	vldr	s15, [r7, #4]
 8000b84:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000b88:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24

    if(error < 0.002f && error > -0.002f){
 8000b8c:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8000b90:	ed9f 7a49 	vldr	s14, [pc, #292]	@ 8000cb8 <pid_calculate+0x14c>
 8000b94:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000b98:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000b9c:	d50b      	bpl.n	8000bb6 <pid_calculate+0x4a>
 8000b9e:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8000ba2:	ed9f 7a46 	vldr	s14, [pc, #280]	@ 8000cbc <pid_calculate+0x150>
 8000ba6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000baa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000bae:	dd02      	ble.n	8000bb6 <pid_calculate+0x4a>
    	error = 0;
 8000bb0:	f04f 0300 	mov.w	r3, #0
 8000bb4:	627b      	str	r3, [r7, #36]	@ 0x24
    }

    float p = pid_data->Kp * error;
 8000bb6:	68fb      	ldr	r3, [r7, #12]
 8000bb8:	edd3 7a02 	vldr	s15, [r3, #8]
 8000bbc:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 8000bc0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000bc4:	edc7 7a07 	vstr	s15, [r7, #28]
    float i = pid_data->Ki * pid_data->total_error;
 8000bc8:	68fb      	ldr	r3, [r7, #12]
 8000bca:	ed93 7a03 	vldr	s14, [r3, #12]
 8000bce:	68fb      	ldr	r3, [r7, #12]
 8000bd0:	edd3 7a01 	vldr	s15, [r3, #4]
 8000bd4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000bd8:	edc7 7a06 	vstr	s15, [r7, #24]
    float d = pid_data->Kd * (error - pid_data->prev_error);
 8000bdc:	68fb      	ldr	r3, [r7, #12]
 8000bde:	ed93 7a04 	vldr	s14, [r3, #16]
 8000be2:	68fb      	ldr	r3, [r7, #12]
 8000be4:	edd3 7a00 	vldr	s15, [r3]
 8000be8:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8000bec:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8000bf0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000bf4:	edc7 7a05 	vstr	s15, [r7, #20]

    int u = p + i + d;
 8000bf8:	ed97 7a07 	vldr	s14, [r7, #28]
 8000bfc:	edd7 7a06 	vldr	s15, [r7, #24]
 8000c00:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000c04:	edd7 7a05 	vldr	s15, [r7, #20]
 8000c08:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000c0c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000c10:	ee17 3a90 	vmov	r3, s15
 8000c14:	623b      	str	r3, [r7, #32]

    //Saturation
    if (u > pid_data->max_u) {
 8000c16:	68fb      	ldr	r3, [r7, #12]
 8000c18:	695b      	ldr	r3, [r3, #20]
 8000c1a:	6a3a      	ldr	r2, [r7, #32]
 8000c1c:	429a      	cmp	r2, r3
 8000c1e:	dd03      	ble.n	8000c28 <pid_calculate+0xbc>
        u = pid_data->max_u;
 8000c20:	68fb      	ldr	r3, [r7, #12]
 8000c22:	695b      	ldr	r3, [r3, #20]
 8000c24:	623b      	str	r3, [r7, #32]
 8000c26:	e03c      	b.n	8000ca2 <pid_calculate+0x136>
    } else if (u < pid_data->min_u) {
 8000c28:	68fb      	ldr	r3, [r7, #12]
 8000c2a:	699b      	ldr	r3, [r3, #24]
 8000c2c:	6a3a      	ldr	r2, [r7, #32]
 8000c2e:	429a      	cmp	r2, r3
 8000c30:	da03      	bge.n	8000c3a <pid_calculate+0xce>
        u = pid_data->min_u;
 8000c32:	68fb      	ldr	r3, [r7, #12]
 8000c34:	699b      	ldr	r3, [r3, #24]
 8000c36:	623b      	str	r3, [r7, #32]
 8000c38:	e033      	b.n	8000ca2 <pid_calculate+0x136>
    } else {
        pid_data->total_error += error / pid_data->fs;
 8000c3a:	68fb      	ldr	r3, [r7, #12]
 8000c3c:	ed93 7a01 	vldr	s14, [r3, #4]
 8000c40:	68fb      	ldr	r3, [r7, #12]
 8000c42:	edd3 6a07 	vldr	s13, [r3, #28]
 8000c46:	ed97 6a09 	vldr	s12, [r7, #36]	@ 0x24
 8000c4a:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8000c4e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000c52:	68fb      	ldr	r3, [r7, #12]
 8000c54:	edc3 7a01 	vstr	s15, [r3, #4]

        // Antiwindup
        if (pid_data->total_error > pid_data->anti_windup_limit) {
 8000c58:	68fb      	ldr	r3, [r7, #12]
 8000c5a:	ed93 7a01 	vldr	s14, [r3, #4]
 8000c5e:	68fb      	ldr	r3, [r7, #12]
 8000c60:	edd3 7a08 	vldr	s15, [r3, #32]
 8000c64:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000c68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000c6c:	dd04      	ble.n	8000c78 <pid_calculate+0x10c>
            pid_data->total_error = pid_data->anti_windup_limit;
 8000c6e:	68fb      	ldr	r3, [r7, #12]
 8000c70:	6a1a      	ldr	r2, [r3, #32]
 8000c72:	68fb      	ldr	r3, [r7, #12]
 8000c74:	605a      	str	r2, [r3, #4]
 8000c76:	e014      	b.n	8000ca2 <pid_calculate+0x136>
        } else if (pid_data->total_error < -pid_data->anti_windup_limit) {
 8000c78:	68fb      	ldr	r3, [r7, #12]
 8000c7a:	ed93 7a01 	vldr	s14, [r3, #4]
 8000c7e:	68fb      	ldr	r3, [r7, #12]
 8000c80:	edd3 7a08 	vldr	s15, [r3, #32]
 8000c84:	eef1 7a67 	vneg.f32	s15, s15
 8000c88:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000c8c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000c90:	d507      	bpl.n	8000ca2 <pid_calculate+0x136>
            pid_data->total_error = -pid_data->anti_windup_limit;
 8000c92:	68fb      	ldr	r3, [r7, #12]
 8000c94:	edd3 7a08 	vldr	s15, [r3, #32]
 8000c98:	eef1 7a67 	vneg.f32	s15, s15
 8000c9c:	68fb      	ldr	r3, [r7, #12]
 8000c9e:	edc3 7a01 	vstr	s15, [r3, #4]
        }
    }


    pid_data->prev_error = error;
 8000ca2:	68fb      	ldr	r3, [r7, #12]
 8000ca4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000ca6:	601a      	str	r2, [r3, #0]

    return u;
 8000ca8:	6a3b      	ldr	r3, [r7, #32]
}
 8000caa:	4618      	mov	r0, r3
 8000cac:	372c      	adds	r7, #44	@ 0x2c
 8000cae:	46bd      	mov	sp, r7
 8000cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb4:	4770      	bx	lr
 8000cb6:	bf00      	nop
 8000cb8:	3b03126f 	.word	0x3b03126f
 8000cbc:	bb03126f 	.word	0xbb03126f

08000cc0 <servo_init>:

TIM_HandleTypeDef *pwm_tim;
uint32_t pwm_channel;

void servo_init(TIM_HandleTypeDef *tim, uint32_t channel)
{
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	b082      	sub	sp, #8
 8000cc4:	af00      	add	r7, sp, #0
 8000cc6:	6078      	str	r0, [r7, #4]
 8000cc8:	6039      	str	r1, [r7, #0]
	pwm_tim = tim;
 8000cca:	4a27      	ldr	r2, [pc, #156]	@ (8000d68 <servo_init+0xa8>)
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	6013      	str	r3, [r2, #0]
	pwm_channel = channel;
 8000cd0:	4a26      	ldr	r2, [pc, #152]	@ (8000d6c <servo_init+0xac>)
 8000cd2:	683b      	ldr	r3, [r7, #0]
 8000cd4:	6013      	str	r3, [r2, #0]
	HAL_TIM_PWM_Start(pwm_tim, pwm_channel);
 8000cd6:	4b24      	ldr	r3, [pc, #144]	@ (8000d68 <servo_init+0xa8>)
 8000cd8:	681b      	ldr	r3, [r3, #0]
 8000cda:	4a24      	ldr	r2, [pc, #144]	@ (8000d6c <servo_init+0xac>)
 8000cdc:	6812      	ldr	r2, [r2, #0]
 8000cde:	4611      	mov	r1, r2
 8000ce0:	4618      	mov	r0, r3
 8000ce2:	f002 fa63 	bl	80031ac <HAL_TIM_PWM_Start>
	__HAL_TIM_SET_COMPARE(pwm_tim, pwm_channel, SERVO_NEUTRAL);
 8000ce6:	4b21      	ldr	r3, [pc, #132]	@ (8000d6c <servo_init+0xac>)
 8000ce8:	681b      	ldr	r3, [r3, #0]
 8000cea:	2b00      	cmp	r3, #0
 8000cec:	d106      	bne.n	8000cfc <servo_init+0x3c>
 8000cee:	4b1e      	ldr	r3, [pc, #120]	@ (8000d68 <servo_init+0xa8>)
 8000cf0:	681b      	ldr	r3, [r3, #0]
 8000cf2:	681b      	ldr	r3, [r3, #0]
 8000cf4:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 8000cf8:	635a      	str	r2, [r3, #52]	@ 0x34

}
 8000cfa:	e031      	b.n	8000d60 <servo_init+0xa0>
	__HAL_TIM_SET_COMPARE(pwm_tim, pwm_channel, SERVO_NEUTRAL);
 8000cfc:	4b1b      	ldr	r3, [pc, #108]	@ (8000d6c <servo_init+0xac>)
 8000cfe:	681b      	ldr	r3, [r3, #0]
 8000d00:	2b04      	cmp	r3, #4
 8000d02:	d106      	bne.n	8000d12 <servo_init+0x52>
 8000d04:	4b18      	ldr	r3, [pc, #96]	@ (8000d68 <servo_init+0xa8>)
 8000d06:	681b      	ldr	r3, [r3, #0]
 8000d08:	681a      	ldr	r2, [r3, #0]
 8000d0a:	f240 53dc 	movw	r3, #1500	@ 0x5dc
 8000d0e:	6393      	str	r3, [r2, #56]	@ 0x38
}
 8000d10:	e026      	b.n	8000d60 <servo_init+0xa0>
	__HAL_TIM_SET_COMPARE(pwm_tim, pwm_channel, SERVO_NEUTRAL);
 8000d12:	4b16      	ldr	r3, [pc, #88]	@ (8000d6c <servo_init+0xac>)
 8000d14:	681b      	ldr	r3, [r3, #0]
 8000d16:	2b08      	cmp	r3, #8
 8000d18:	d106      	bne.n	8000d28 <servo_init+0x68>
 8000d1a:	4b13      	ldr	r3, [pc, #76]	@ (8000d68 <servo_init+0xa8>)
 8000d1c:	681b      	ldr	r3, [r3, #0]
 8000d1e:	681a      	ldr	r2, [r3, #0]
 8000d20:	f240 53dc 	movw	r3, #1500	@ 0x5dc
 8000d24:	63d3      	str	r3, [r2, #60]	@ 0x3c
}
 8000d26:	e01b      	b.n	8000d60 <servo_init+0xa0>
	__HAL_TIM_SET_COMPARE(pwm_tim, pwm_channel, SERVO_NEUTRAL);
 8000d28:	4b10      	ldr	r3, [pc, #64]	@ (8000d6c <servo_init+0xac>)
 8000d2a:	681b      	ldr	r3, [r3, #0]
 8000d2c:	2b0c      	cmp	r3, #12
 8000d2e:	d106      	bne.n	8000d3e <servo_init+0x7e>
 8000d30:	4b0d      	ldr	r3, [pc, #52]	@ (8000d68 <servo_init+0xa8>)
 8000d32:	681b      	ldr	r3, [r3, #0]
 8000d34:	681a      	ldr	r2, [r3, #0]
 8000d36:	f240 53dc 	movw	r3, #1500	@ 0x5dc
 8000d3a:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8000d3c:	e010      	b.n	8000d60 <servo_init+0xa0>
	__HAL_TIM_SET_COMPARE(pwm_tim, pwm_channel, SERVO_NEUTRAL);
 8000d3e:	4b0b      	ldr	r3, [pc, #44]	@ (8000d6c <servo_init+0xac>)
 8000d40:	681b      	ldr	r3, [r3, #0]
 8000d42:	2b10      	cmp	r3, #16
 8000d44:	d106      	bne.n	8000d54 <servo_init+0x94>
 8000d46:	4b08      	ldr	r3, [pc, #32]	@ (8000d68 <servo_init+0xa8>)
 8000d48:	681b      	ldr	r3, [r3, #0]
 8000d4a:	681a      	ldr	r2, [r3, #0]
 8000d4c:	f240 53dc 	movw	r3, #1500	@ 0x5dc
 8000d50:	6593      	str	r3, [r2, #88]	@ 0x58
}
 8000d52:	e005      	b.n	8000d60 <servo_init+0xa0>
	__HAL_TIM_SET_COMPARE(pwm_tim, pwm_channel, SERVO_NEUTRAL);
 8000d54:	4b04      	ldr	r3, [pc, #16]	@ (8000d68 <servo_init+0xa8>)
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	681a      	ldr	r2, [r3, #0]
 8000d5a:	f240 53dc 	movw	r3, #1500	@ 0x5dc
 8000d5e:	65d3      	str	r3, [r2, #92]	@ 0x5c
}
 8000d60:	bf00      	nop
 8000d62:	3708      	adds	r7, #8
 8000d64:	46bd      	mov	sp, r7
 8000d66:	bd80      	pop	{r7, pc}
 8000d68:	200000cc 	.word	0x200000cc
 8000d6c:	200000d0 	.word	0x200000d0

08000d70 <servo_set_angle>:


void servo_set_angle(int angle)
{
 8000d70:	b480      	push	{r7}
 8000d72:	b085      	sub	sp, #20
 8000d74:	af00      	add	r7, sp, #0
 8000d76:	6078      	str	r0, [r7, #4]
	angle += 5;
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	3305      	adds	r3, #5
 8000d7c:	607b      	str	r3, [r7, #4]
    if(angle < SERVO_MIN_ANGLE)
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	f113 0f5a 	cmn.w	r3, #90	@ 0x5a
 8000d84:	da03      	bge.n	8000d8e <servo_set_angle+0x1e>
        angle = SERVO_MIN_ANGLE;
 8000d86:	f06f 0359 	mvn.w	r3, #89	@ 0x59
 8000d8a:	607b      	str	r3, [r7, #4]
 8000d8c:	e004      	b.n	8000d98 <servo_set_angle+0x28>
    else if(angle > SERVO_MAX_ANGLE)
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	2b5a      	cmp	r3, #90	@ 0x5a
 8000d92:	dd01      	ble.n	8000d98 <servo_set_angle+0x28>
        angle = SERVO_MAX_ANGLE;
 8000d94:	235a      	movs	r3, #90	@ 0x5a
 8000d96:	607b      	str	r3, [r7, #4]


    uint32_t pwm_duty_us;

    pwm_duty_us = SERVO_MIN_US +
                  ((angle - SERVO_MIN_ANGLE) * (SERVO_MAX_US - SERVO_MIN_US)) /
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	335a      	adds	r3, #90	@ 0x5a
 8000d9c:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8000da0:	fb02 f303 	mul.w	r3, r2, r3
 8000da4:	4a23      	ldr	r2, [pc, #140]	@ (8000e34 <servo_set_angle+0xc4>)
 8000da6:	fb82 1203 	smull	r1, r2, r2, r3
 8000daa:	441a      	add	r2, r3
 8000dac:	11d2      	asrs	r2, r2, #7
 8000dae:	17db      	asrs	r3, r3, #31
 8000db0:	1ad3      	subs	r3, r2, r3
    pwm_duty_us = SERVO_MIN_US +
 8000db2:	f503 73fa 	add.w	r3, r3, #500	@ 0x1f4
 8000db6:	60fb      	str	r3, [r7, #12]
                  (SERVO_MAX_ANGLE - SERVO_MIN_ANGLE);

    __HAL_TIM_SET_COMPARE(pwm_tim, pwm_channel, pwm_duty_us);
 8000db8:	4b1f      	ldr	r3, [pc, #124]	@ (8000e38 <servo_set_angle+0xc8>)
 8000dba:	681b      	ldr	r3, [r3, #0]
 8000dbc:	2b00      	cmp	r3, #0
 8000dbe:	d105      	bne.n	8000dcc <servo_set_angle+0x5c>
 8000dc0:	4b1e      	ldr	r3, [pc, #120]	@ (8000e3c <servo_set_angle+0xcc>)
 8000dc2:	681b      	ldr	r3, [r3, #0]
 8000dc4:	681b      	ldr	r3, [r3, #0]
 8000dc6:	68fa      	ldr	r2, [r7, #12]
 8000dc8:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8000dca:	e02c      	b.n	8000e26 <servo_set_angle+0xb6>
    __HAL_TIM_SET_COMPARE(pwm_tim, pwm_channel, pwm_duty_us);
 8000dcc:	4b1a      	ldr	r3, [pc, #104]	@ (8000e38 <servo_set_angle+0xc8>)
 8000dce:	681b      	ldr	r3, [r3, #0]
 8000dd0:	2b04      	cmp	r3, #4
 8000dd2:	d105      	bne.n	8000de0 <servo_set_angle+0x70>
 8000dd4:	4b19      	ldr	r3, [pc, #100]	@ (8000e3c <servo_set_angle+0xcc>)
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	681a      	ldr	r2, [r3, #0]
 8000dda:	68fb      	ldr	r3, [r7, #12]
 8000ddc:	6393      	str	r3, [r2, #56]	@ 0x38
}
 8000dde:	e022      	b.n	8000e26 <servo_set_angle+0xb6>
    __HAL_TIM_SET_COMPARE(pwm_tim, pwm_channel, pwm_duty_us);
 8000de0:	4b15      	ldr	r3, [pc, #84]	@ (8000e38 <servo_set_angle+0xc8>)
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	2b08      	cmp	r3, #8
 8000de6:	d105      	bne.n	8000df4 <servo_set_angle+0x84>
 8000de8:	4b14      	ldr	r3, [pc, #80]	@ (8000e3c <servo_set_angle+0xcc>)
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	681a      	ldr	r2, [r3, #0]
 8000dee:	68fb      	ldr	r3, [r7, #12]
 8000df0:	63d3      	str	r3, [r2, #60]	@ 0x3c
}
 8000df2:	e018      	b.n	8000e26 <servo_set_angle+0xb6>
    __HAL_TIM_SET_COMPARE(pwm_tim, pwm_channel, pwm_duty_us);
 8000df4:	4b10      	ldr	r3, [pc, #64]	@ (8000e38 <servo_set_angle+0xc8>)
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	2b0c      	cmp	r3, #12
 8000dfa:	d105      	bne.n	8000e08 <servo_set_angle+0x98>
 8000dfc:	4b0f      	ldr	r3, [pc, #60]	@ (8000e3c <servo_set_angle+0xcc>)
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	681a      	ldr	r2, [r3, #0]
 8000e02:	68fb      	ldr	r3, [r7, #12]
 8000e04:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8000e06:	e00e      	b.n	8000e26 <servo_set_angle+0xb6>
    __HAL_TIM_SET_COMPARE(pwm_tim, pwm_channel, pwm_duty_us);
 8000e08:	4b0b      	ldr	r3, [pc, #44]	@ (8000e38 <servo_set_angle+0xc8>)
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	2b10      	cmp	r3, #16
 8000e0e:	d105      	bne.n	8000e1c <servo_set_angle+0xac>
 8000e10:	4b0a      	ldr	r3, [pc, #40]	@ (8000e3c <servo_set_angle+0xcc>)
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	681a      	ldr	r2, [r3, #0]
 8000e16:	68fb      	ldr	r3, [r7, #12]
 8000e18:	6593      	str	r3, [r2, #88]	@ 0x58
}
 8000e1a:	e004      	b.n	8000e26 <servo_set_angle+0xb6>
    __HAL_TIM_SET_COMPARE(pwm_tim, pwm_channel, pwm_duty_us);
 8000e1c:	4b07      	ldr	r3, [pc, #28]	@ (8000e3c <servo_set_angle+0xcc>)
 8000e1e:	681b      	ldr	r3, [r3, #0]
 8000e20:	681a      	ldr	r2, [r3, #0]
 8000e22:	68fb      	ldr	r3, [r7, #12]
 8000e24:	65d3      	str	r3, [r2, #92]	@ 0x5c
}
 8000e26:	bf00      	nop
 8000e28:	3714      	adds	r7, #20
 8000e2a:	46bd      	mov	sp, r7
 8000e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e30:	4770      	bx	lr
 8000e32:	bf00      	nop
 8000e34:	b60b60b7 	.word	0xb60b60b7
 8000e38:	200000d0 	.word	0x200000d0
 8000e3c:	200000cc 	.word	0x200000cc

08000e40 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e40:	b480      	push	{r7}
 8000e42:	b083      	sub	sp, #12
 8000e44:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000e46:	4b0f      	ldr	r3, [pc, #60]	@ (8000e84 <HAL_MspInit+0x44>)
 8000e48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e4a:	4a0e      	ldr	r2, [pc, #56]	@ (8000e84 <HAL_MspInit+0x44>)
 8000e4c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000e50:	6413      	str	r3, [r2, #64]	@ 0x40
 8000e52:	4b0c      	ldr	r3, [pc, #48]	@ (8000e84 <HAL_MspInit+0x44>)
 8000e54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e56:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000e5a:	607b      	str	r3, [r7, #4]
 8000e5c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e5e:	4b09      	ldr	r3, [pc, #36]	@ (8000e84 <HAL_MspInit+0x44>)
 8000e60:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e62:	4a08      	ldr	r2, [pc, #32]	@ (8000e84 <HAL_MspInit+0x44>)
 8000e64:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000e68:	6453      	str	r3, [r2, #68]	@ 0x44
 8000e6a:	4b06      	ldr	r3, [pc, #24]	@ (8000e84 <HAL_MspInit+0x44>)
 8000e6c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e6e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000e72:	603b      	str	r3, [r7, #0]
 8000e74:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e76:	bf00      	nop
 8000e78:	370c      	adds	r7, #12
 8000e7a:	46bd      	mov	sp, r7
 8000e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e80:	4770      	bx	lr
 8000e82:	bf00      	nop
 8000e84:	40023800 	.word	0x40023800

08000e88 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e88:	b480      	push	{r7}
 8000e8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000e8c:	bf00      	nop
 8000e8e:	e7fd      	b.n	8000e8c <NMI_Handler+0x4>

08000e90 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e90:	b480      	push	{r7}
 8000e92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e94:	bf00      	nop
 8000e96:	e7fd      	b.n	8000e94 <HardFault_Handler+0x4>

08000e98 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e98:	b480      	push	{r7}
 8000e9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e9c:	bf00      	nop
 8000e9e:	e7fd      	b.n	8000e9c <MemManage_Handler+0x4>

08000ea0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ea0:	b480      	push	{r7}
 8000ea2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ea4:	bf00      	nop
 8000ea6:	e7fd      	b.n	8000ea4 <BusFault_Handler+0x4>

08000ea8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ea8:	b480      	push	{r7}
 8000eaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000eac:	bf00      	nop
 8000eae:	e7fd      	b.n	8000eac <UsageFault_Handler+0x4>

08000eb0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000eb0:	b480      	push	{r7}
 8000eb2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000eb4:	bf00      	nop
 8000eb6:	46bd      	mov	sp, r7
 8000eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ebc:	4770      	bx	lr

08000ebe <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ebe:	b480      	push	{r7}
 8000ec0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ec2:	bf00      	nop
 8000ec4:	46bd      	mov	sp, r7
 8000ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eca:	4770      	bx	lr

08000ecc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ecc:	b480      	push	{r7}
 8000ece:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ed0:	bf00      	nop
 8000ed2:	46bd      	mov	sp, r7
 8000ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed8:	4770      	bx	lr

08000eda <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000eda:	b580      	push	{r7, lr}
 8000edc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ede:	f000 fc63 	bl	80017a8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ee2:	bf00      	nop
 8000ee4:	bd80      	pop	{r7, pc}
	...

08000ee8 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000eec:	4802      	ldr	r0, [pc, #8]	@ (8000ef8 <TIM1_CC_IRQHandler+0x10>)
 8000eee:	f002 fc09 	bl	8003704 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8000ef2:	bf00      	nop
 8000ef4:	bd80      	pop	{r7, pc}
 8000ef6:	bf00      	nop
 8000ef8:	200000d8 	.word	0x200000d8

08000efc <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8000efc:	b580      	push	{r7, lr}
 8000efe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8000f00:	4802      	ldr	r0, [pc, #8]	@ (8000f0c <TIM4_IRQHandler+0x10>)
 8000f02:	f002 fbff 	bl	8003704 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8000f06:	bf00      	nop
 8000f08:	bd80      	pop	{r7, pc}
 8000f0a:	bf00      	nop
 8000f0c:	200001bc 	.word	0x200001bc

08000f10 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000f10:	b580      	push	{r7, lr}
 8000f12:	b086      	sub	sp, #24
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000f18:	4a14      	ldr	r2, [pc, #80]	@ (8000f6c <_sbrk+0x5c>)
 8000f1a:	4b15      	ldr	r3, [pc, #84]	@ (8000f70 <_sbrk+0x60>)
 8000f1c:	1ad3      	subs	r3, r2, r3
 8000f1e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000f20:	697b      	ldr	r3, [r7, #20]
 8000f22:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000f24:	4b13      	ldr	r3, [pc, #76]	@ (8000f74 <_sbrk+0x64>)
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	2b00      	cmp	r3, #0
 8000f2a:	d102      	bne.n	8000f32 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000f2c:	4b11      	ldr	r3, [pc, #68]	@ (8000f74 <_sbrk+0x64>)
 8000f2e:	4a12      	ldr	r2, [pc, #72]	@ (8000f78 <_sbrk+0x68>)
 8000f30:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000f32:	4b10      	ldr	r3, [pc, #64]	@ (8000f74 <_sbrk+0x64>)
 8000f34:	681a      	ldr	r2, [r3, #0]
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	4413      	add	r3, r2
 8000f3a:	693a      	ldr	r2, [r7, #16]
 8000f3c:	429a      	cmp	r2, r3
 8000f3e:	d207      	bcs.n	8000f50 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000f40:	f004 fbc4 	bl	80056cc <__errno>
 8000f44:	4603      	mov	r3, r0
 8000f46:	220c      	movs	r2, #12
 8000f48:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000f4a:	f04f 33ff 	mov.w	r3, #4294967295
 8000f4e:	e009      	b.n	8000f64 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000f50:	4b08      	ldr	r3, [pc, #32]	@ (8000f74 <_sbrk+0x64>)
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000f56:	4b07      	ldr	r3, [pc, #28]	@ (8000f74 <_sbrk+0x64>)
 8000f58:	681a      	ldr	r2, [r3, #0]
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	4413      	add	r3, r2
 8000f5e:	4a05      	ldr	r2, [pc, #20]	@ (8000f74 <_sbrk+0x64>)
 8000f60:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000f62:	68fb      	ldr	r3, [r7, #12]
}
 8000f64:	4618      	mov	r0, r3
 8000f66:	3718      	adds	r7, #24
 8000f68:	46bd      	mov	sp, r7
 8000f6a:	bd80      	pop	{r7, pc}
 8000f6c:	20080000 	.word	0x20080000
 8000f70:	00000400 	.word	0x00000400
 8000f74:	200000d4 	.word	0x200000d4
 8000f78:	200003e0 	.word	0x200003e0

08000f7c <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000f7c:	b480      	push	{r7}
 8000f7e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000f80:	4b06      	ldr	r3, [pc, #24]	@ (8000f9c <SystemInit+0x20>)
 8000f82:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000f86:	4a05      	ldr	r2, [pc, #20]	@ (8000f9c <SystemInit+0x20>)
 8000f88:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000f8c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f90:	bf00      	nop
 8000f92:	46bd      	mov	sp, r7
 8000f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f98:	4770      	bx	lr
 8000f9a:	bf00      	nop
 8000f9c:	e000ed00 	.word	0xe000ed00

08000fa0 <MX_TIM1_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim4;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	b090      	sub	sp, #64	@ 0x40
 8000fa4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000fa6:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000faa:	2200      	movs	r2, #0
 8000fac:	601a      	str	r2, [r3, #0]
 8000fae:	605a      	str	r2, [r3, #4]
 8000fb0:	609a      	str	r2, [r3, #8]
 8000fb2:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8000fb4:	f107 031c 	add.w	r3, r7, #28
 8000fb8:	2200      	movs	r2, #0
 8000fba:	601a      	str	r2, [r3, #0]
 8000fbc:	605a      	str	r2, [r3, #4]
 8000fbe:	609a      	str	r2, [r3, #8]
 8000fc0:	60da      	str	r2, [r3, #12]
 8000fc2:	611a      	str	r2, [r3, #16]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8000fc4:	f107 030c 	add.w	r3, r7, #12
 8000fc8:	2200      	movs	r2, #0
 8000fca:	601a      	str	r2, [r3, #0]
 8000fcc:	605a      	str	r2, [r3, #4]
 8000fce:	609a      	str	r2, [r3, #8]
 8000fd0:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000fd2:	463b      	mov	r3, r7
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	601a      	str	r2, [r3, #0]
 8000fd8:	605a      	str	r2, [r3, #4]
 8000fda:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000fdc:	4b40      	ldr	r3, [pc, #256]	@ (80010e0 <MX_TIM1_Init+0x140>)
 8000fde:	4a41      	ldr	r2, [pc, #260]	@ (80010e4 <MX_TIM1_Init+0x144>)
 8000fe0:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 95;
 8000fe2:	4b3f      	ldr	r3, [pc, #252]	@ (80010e0 <MX_TIM1_Init+0x140>)
 8000fe4:	225f      	movs	r2, #95	@ 0x5f
 8000fe6:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000fe8:	4b3d      	ldr	r3, [pc, #244]	@ (80010e0 <MX_TIM1_Init+0x140>)
 8000fea:	2200      	movs	r2, #0
 8000fec:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000fee:	4b3c      	ldr	r3, [pc, #240]	@ (80010e0 <MX_TIM1_Init+0x140>)
 8000ff0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000ff4:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ff6:	4b3a      	ldr	r3, [pc, #232]	@ (80010e0 <MX_TIM1_Init+0x140>)
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000ffc:	4b38      	ldr	r3, [pc, #224]	@ (80010e0 <MX_TIM1_Init+0x140>)
 8000ffe:	2200      	movs	r2, #0
 8001000:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001002:	4b37      	ldr	r3, [pc, #220]	@ (80010e0 <MX_TIM1_Init+0x140>)
 8001004:	2200      	movs	r2, #0
 8001006:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001008:	4835      	ldr	r0, [pc, #212]	@ (80010e0 <MX_TIM1_Init+0x140>)
 800100a:	f002 f821 	bl	8003050 <HAL_TIM_Base_Init>
 800100e:	4603      	mov	r3, r0
 8001010:	2b00      	cmp	r3, #0
 8001012:	d001      	beq.n	8001018 <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 8001014:	f7ff fd72 	bl	8000afc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001018:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800101c:	633b      	str	r3, [r7, #48]	@ 0x30
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800101e:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001022:	4619      	mov	r1, r3
 8001024:	482e      	ldr	r0, [pc, #184]	@ (80010e0 <MX_TIM1_Init+0x140>)
 8001026:	f002 fe25 	bl	8003c74 <HAL_TIM_ConfigClockSource>
 800102a:	4603      	mov	r3, r0
 800102c:	2b00      	cmp	r3, #0
 800102e:	d001      	beq.n	8001034 <MX_TIM1_Init+0x94>
  {
    Error_Handler();
 8001030:	f7ff fd64 	bl	8000afc <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim1) != HAL_OK)
 8001034:	482a      	ldr	r0, [pc, #168]	@ (80010e0 <MX_TIM1_Init+0x140>)
 8001036:	f002 f9b3 	bl	80033a0 <HAL_TIM_IC_Init>
 800103a:	4603      	mov	r3, r0
 800103c:	2b00      	cmp	r3, #0
 800103e:	d001      	beq.n	8001044 <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 8001040:	f7ff fd5c 	bl	8000afc <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 8001044:	2304      	movs	r3, #4
 8001046:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.InputTrigger = TIM_TS_TI2FP2;
 8001048:	2360      	movs	r3, #96	@ 0x60
 800104a:	623b      	str	r3, [r7, #32]
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 800104c:	2302      	movs	r3, #2
 800104e:	627b      	str	r3, [r7, #36]	@ 0x24
  sSlaveConfig.TriggerPrescaler = TIM_ICPSC_DIV1;
 8001050:	2300      	movs	r3, #0
 8001052:	62bb      	str	r3, [r7, #40]	@ 0x28
  sSlaveConfig.TriggerFilter = 0;
 8001054:	2300      	movs	r3, #0
 8001056:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_SlaveConfigSynchro(&htim1, &sSlaveConfig) != HAL_OK)
 8001058:	f107 031c 	add.w	r3, r7, #28
 800105c:	4619      	mov	r1, r3
 800105e:	4820      	ldr	r0, [pc, #128]	@ (80010e0 <MX_TIM1_Init+0x140>)
 8001060:	f002 fed2 	bl	8003e08 <HAL_TIM_SlaveConfigSynchro>
 8001064:	4603      	mov	r3, r0
 8001066:	2b00      	cmp	r3, #0
 8001068:	d001      	beq.n	800106e <MX_TIM1_Init+0xce>
  {
    Error_Handler();
 800106a:	f7ff fd47 	bl	8000afc <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 800106e:	2300      	movs	r3, #0
 8001070:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 8001072:	2302      	movs	r3, #2
 8001074:	613b      	str	r3, [r7, #16]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001076:	2300      	movs	r3, #0
 8001078:	617b      	str	r3, [r7, #20]
  sConfigIC.ICFilter = 0;
 800107a:	2300      	movs	r3, #0
 800107c:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 800107e:	f107 030c 	add.w	r3, r7, #12
 8001082:	2200      	movs	r2, #0
 8001084:	4619      	mov	r1, r3
 8001086:	4816      	ldr	r0, [pc, #88]	@ (80010e0 <MX_TIM1_Init+0x140>)
 8001088:	f002 fc43 	bl	8003912 <HAL_TIM_IC_ConfigChannel>
 800108c:	4603      	mov	r3, r0
 800108e:	2b00      	cmp	r3, #0
 8001090:	d001      	beq.n	8001096 <MX_TIM1_Init+0xf6>
  {
    Error_Handler();
 8001092:	f7ff fd33 	bl	8000afc <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8001096:	2302      	movs	r3, #2
 8001098:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 800109a:	2301      	movs	r3, #1
 800109c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 800109e:	f107 030c 	add.w	r3, r7, #12
 80010a2:	2204      	movs	r2, #4
 80010a4:	4619      	mov	r1, r3
 80010a6:	480e      	ldr	r0, [pc, #56]	@ (80010e0 <MX_TIM1_Init+0x140>)
 80010a8:	f002 fc33 	bl	8003912 <HAL_TIM_IC_ConfigChannel>
 80010ac:	4603      	mov	r3, r0
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d001      	beq.n	80010b6 <MX_TIM1_Init+0x116>
  {
    Error_Handler();
 80010b2:	f7ff fd23 	bl	8000afc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80010b6:	2300      	movs	r3, #0
 80010b8:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80010ba:	2300      	movs	r3, #0
 80010bc:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80010be:	2300      	movs	r3, #0
 80010c0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80010c2:	463b      	mov	r3, r7
 80010c4:	4619      	mov	r1, r3
 80010c6:	4806      	ldr	r0, [pc, #24]	@ (80010e0 <MX_TIM1_Init+0x140>)
 80010c8:	f003 fcd4 	bl	8004a74 <HAL_TIMEx_MasterConfigSynchronization>
 80010cc:	4603      	mov	r3, r0
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d001      	beq.n	80010d6 <MX_TIM1_Init+0x136>
  {
    Error_Handler();
 80010d2:	f7ff fd13 	bl	8000afc <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80010d6:	bf00      	nop
 80010d8:	3740      	adds	r7, #64	@ 0x40
 80010da:	46bd      	mov	sp, r7
 80010dc:	bd80      	pop	{r7, pc}
 80010de:	bf00      	nop
 80010e0:	200000d8 	.word	0x200000d8
 80010e4:	40010000 	.word	0x40010000

080010e8 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b08a      	sub	sp, #40	@ 0x28
 80010ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80010ee:	f107 031c 	add.w	r3, r7, #28
 80010f2:	2200      	movs	r2, #0
 80010f4:	601a      	str	r2, [r3, #0]
 80010f6:	605a      	str	r2, [r3, #4]
 80010f8:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80010fa:	463b      	mov	r3, r7
 80010fc:	2200      	movs	r2, #0
 80010fe:	601a      	str	r2, [r3, #0]
 8001100:	605a      	str	r2, [r3, #4]
 8001102:	609a      	str	r2, [r3, #8]
 8001104:	60da      	str	r2, [r3, #12]
 8001106:	611a      	str	r2, [r3, #16]
 8001108:	615a      	str	r2, [r3, #20]
 800110a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800110c:	4b21      	ldr	r3, [pc, #132]	@ (8001194 <MX_TIM2_Init+0xac>)
 800110e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001112:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 95;
 8001114:	4b1f      	ldr	r3, [pc, #124]	@ (8001194 <MX_TIM2_Init+0xac>)
 8001116:	225f      	movs	r2, #95	@ 0x5f
 8001118:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800111a:	4b1e      	ldr	r3, [pc, #120]	@ (8001194 <MX_TIM2_Init+0xac>)
 800111c:	2200      	movs	r2, #0
 800111e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 99999;
 8001120:	4b1c      	ldr	r3, [pc, #112]	@ (8001194 <MX_TIM2_Init+0xac>)
 8001122:	4a1d      	ldr	r2, [pc, #116]	@ (8001198 <MX_TIM2_Init+0xb0>)
 8001124:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001126:	4b1b      	ldr	r3, [pc, #108]	@ (8001194 <MX_TIM2_Init+0xac>)
 8001128:	2200      	movs	r2, #0
 800112a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800112c:	4b19      	ldr	r3, [pc, #100]	@ (8001194 <MX_TIM2_Init+0xac>)
 800112e:	2200      	movs	r2, #0
 8001130:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001132:	4818      	ldr	r0, [pc, #96]	@ (8001194 <MX_TIM2_Init+0xac>)
 8001134:	f001 ffe3 	bl	80030fe <HAL_TIM_PWM_Init>
 8001138:	4603      	mov	r3, r0
 800113a:	2b00      	cmp	r3, #0
 800113c:	d001      	beq.n	8001142 <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 800113e:	f7ff fcdd 	bl	8000afc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001142:	2300      	movs	r3, #0
 8001144:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001146:	2300      	movs	r3, #0
 8001148:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800114a:	f107 031c 	add.w	r3, r7, #28
 800114e:	4619      	mov	r1, r3
 8001150:	4810      	ldr	r0, [pc, #64]	@ (8001194 <MX_TIM2_Init+0xac>)
 8001152:	f003 fc8f 	bl	8004a74 <HAL_TIMEx_MasterConfigSynchronization>
 8001156:	4603      	mov	r3, r0
 8001158:	2b00      	cmp	r3, #0
 800115a:	d001      	beq.n	8001160 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 800115c:	f7ff fcce 	bl	8000afc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001160:	2360      	movs	r3, #96	@ 0x60
 8001162:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 10;
 8001164:	230a      	movs	r3, #10
 8001166:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001168:	2300      	movs	r3, #0
 800116a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800116c:	2300      	movs	r3, #0
 800116e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001170:	463b      	mov	r3, r7
 8001172:	220c      	movs	r2, #12
 8001174:	4619      	mov	r1, r3
 8001176:	4807      	ldr	r0, [pc, #28]	@ (8001194 <MX_TIM2_Init+0xac>)
 8001178:	f002 fc68 	bl	8003a4c <HAL_TIM_PWM_ConfigChannel>
 800117c:	4603      	mov	r3, r0
 800117e:	2b00      	cmp	r3, #0
 8001180:	d001      	beq.n	8001186 <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 8001182:	f7ff fcbb 	bl	8000afc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001186:	4803      	ldr	r0, [pc, #12]	@ (8001194 <MX_TIM2_Init+0xac>)
 8001188:	f000 f9bc 	bl	8001504 <HAL_TIM_MspPostInit>

}
 800118c:	bf00      	nop
 800118e:	3728      	adds	r7, #40	@ 0x28
 8001190:	46bd      	mov	sp, r7
 8001192:	bd80      	pop	{r7, pc}
 8001194:	20000124 	.word	0x20000124
 8001198:	0001869f 	.word	0x0001869f

0800119c <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 800119c:	b580      	push	{r7, lr}
 800119e:	b08a      	sub	sp, #40	@ 0x28
 80011a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80011a2:	f107 031c 	add.w	r3, r7, #28
 80011a6:	2200      	movs	r2, #0
 80011a8:	601a      	str	r2, [r3, #0]
 80011aa:	605a      	str	r2, [r3, #4]
 80011ac:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80011ae:	463b      	mov	r3, r7
 80011b0:	2200      	movs	r2, #0
 80011b2:	601a      	str	r2, [r3, #0]
 80011b4:	605a      	str	r2, [r3, #4]
 80011b6:	609a      	str	r2, [r3, #8]
 80011b8:	60da      	str	r2, [r3, #12]
 80011ba:	611a      	str	r2, [r3, #16]
 80011bc:	615a      	str	r2, [r3, #20]
 80011be:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80011c0:	4b22      	ldr	r3, [pc, #136]	@ (800124c <MX_TIM3_Init+0xb0>)
 80011c2:	4a23      	ldr	r2, [pc, #140]	@ (8001250 <MX_TIM3_Init+0xb4>)
 80011c4:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 95;
 80011c6:	4b21      	ldr	r3, [pc, #132]	@ (800124c <MX_TIM3_Init+0xb0>)
 80011c8:	225f      	movs	r2, #95	@ 0x5f
 80011ca:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011cc:	4b1f      	ldr	r3, [pc, #124]	@ (800124c <MX_TIM3_Init+0xb0>)
 80011ce:	2200      	movs	r2, #0
 80011d0:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 19999;
 80011d2:	4b1e      	ldr	r3, [pc, #120]	@ (800124c <MX_TIM3_Init+0xb0>)
 80011d4:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 80011d8:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80011da:	4b1c      	ldr	r3, [pc, #112]	@ (800124c <MX_TIM3_Init+0xb0>)
 80011dc:	2200      	movs	r2, #0
 80011de:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80011e0:	4b1a      	ldr	r3, [pc, #104]	@ (800124c <MX_TIM3_Init+0xb0>)
 80011e2:	2200      	movs	r2, #0
 80011e4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80011e6:	4819      	ldr	r0, [pc, #100]	@ (800124c <MX_TIM3_Init+0xb0>)
 80011e8:	f001 ff89 	bl	80030fe <HAL_TIM_PWM_Init>
 80011ec:	4603      	mov	r3, r0
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d001      	beq.n	80011f6 <MX_TIM3_Init+0x5a>
  {
    Error_Handler();
 80011f2:	f7ff fc83 	bl	8000afc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80011f6:	2300      	movs	r3, #0
 80011f8:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80011fa:	2300      	movs	r3, #0
 80011fc:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80011fe:	f107 031c 	add.w	r3, r7, #28
 8001202:	4619      	mov	r1, r3
 8001204:	4811      	ldr	r0, [pc, #68]	@ (800124c <MX_TIM3_Init+0xb0>)
 8001206:	f003 fc35 	bl	8004a74 <HAL_TIMEx_MasterConfigSynchronization>
 800120a:	4603      	mov	r3, r0
 800120c:	2b00      	cmp	r3, #0
 800120e:	d001      	beq.n	8001214 <MX_TIM3_Init+0x78>
  {
    Error_Handler();
 8001210:	f7ff fc74 	bl	8000afc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001214:	2360      	movs	r3, #96	@ 0x60
 8001216:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 1500;
 8001218:	f240 53dc 	movw	r3, #1500	@ 0x5dc
 800121c:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800121e:	2300      	movs	r3, #0
 8001220:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001222:	2300      	movs	r3, #0
 8001224:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001226:	463b      	mov	r3, r7
 8001228:	2208      	movs	r2, #8
 800122a:	4619      	mov	r1, r3
 800122c:	4807      	ldr	r0, [pc, #28]	@ (800124c <MX_TIM3_Init+0xb0>)
 800122e:	f002 fc0d 	bl	8003a4c <HAL_TIM_PWM_ConfigChannel>
 8001232:	4603      	mov	r3, r0
 8001234:	2b00      	cmp	r3, #0
 8001236:	d001      	beq.n	800123c <MX_TIM3_Init+0xa0>
  {
    Error_Handler();
 8001238:	f7ff fc60 	bl	8000afc <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800123c:	4803      	ldr	r0, [pc, #12]	@ (800124c <MX_TIM3_Init+0xb0>)
 800123e:	f000 f961 	bl	8001504 <HAL_TIM_MspPostInit>

}
 8001242:	bf00      	nop
 8001244:	3728      	adds	r7, #40	@ 0x28
 8001246:	46bd      	mov	sp, r7
 8001248:	bd80      	pop	{r7, pc}
 800124a:	bf00      	nop
 800124c:	20000170 	.word	0x20000170
 8001250:	40000400 	.word	0x40000400

08001254 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8001254:	b580      	push	{r7, lr}
 8001256:	b090      	sub	sp, #64	@ 0x40
 8001258:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800125a:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800125e:	2200      	movs	r2, #0
 8001260:	601a      	str	r2, [r3, #0]
 8001262:	605a      	str	r2, [r3, #4]
 8001264:	609a      	str	r2, [r3, #8]
 8001266:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8001268:	f107 031c 	add.w	r3, r7, #28
 800126c:	2200      	movs	r2, #0
 800126e:	601a      	str	r2, [r3, #0]
 8001270:	605a      	str	r2, [r3, #4]
 8001272:	609a      	str	r2, [r3, #8]
 8001274:	60da      	str	r2, [r3, #12]
 8001276:	611a      	str	r2, [r3, #16]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001278:	f107 030c 	add.w	r3, r7, #12
 800127c:	2200      	movs	r2, #0
 800127e:	601a      	str	r2, [r3, #0]
 8001280:	605a      	str	r2, [r3, #4]
 8001282:	609a      	str	r2, [r3, #8]
 8001284:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001286:	463b      	mov	r3, r7
 8001288:	2200      	movs	r2, #0
 800128a:	601a      	str	r2, [r3, #0]
 800128c:	605a      	str	r2, [r3, #4]
 800128e:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001290:	4b3d      	ldr	r3, [pc, #244]	@ (8001388 <MX_TIM4_Init+0x134>)
 8001292:	4a3e      	ldr	r2, [pc, #248]	@ (800138c <MX_TIM4_Init+0x138>)
 8001294:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 95;
 8001296:	4b3c      	ldr	r3, [pc, #240]	@ (8001388 <MX_TIM4_Init+0x134>)
 8001298:	225f      	movs	r2, #95	@ 0x5f
 800129a:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800129c:	4b3a      	ldr	r3, [pc, #232]	@ (8001388 <MX_TIM4_Init+0x134>)
 800129e:	2200      	movs	r2, #0
 80012a0:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 80012a2:	4b39      	ldr	r3, [pc, #228]	@ (8001388 <MX_TIM4_Init+0x134>)
 80012a4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80012a8:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012aa:	4b37      	ldr	r3, [pc, #220]	@ (8001388 <MX_TIM4_Init+0x134>)
 80012ac:	2200      	movs	r2, #0
 80012ae:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80012b0:	4b35      	ldr	r3, [pc, #212]	@ (8001388 <MX_TIM4_Init+0x134>)
 80012b2:	2200      	movs	r2, #0
 80012b4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80012b6:	4834      	ldr	r0, [pc, #208]	@ (8001388 <MX_TIM4_Init+0x134>)
 80012b8:	f001 feca 	bl	8003050 <HAL_TIM_Base_Init>
 80012bc:	4603      	mov	r3, r0
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d001      	beq.n	80012c6 <MX_TIM4_Init+0x72>
  {
    Error_Handler();
 80012c2:	f7ff fc1b 	bl	8000afc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80012c6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80012ca:	633b      	str	r3, [r7, #48]	@ 0x30
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80012cc:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80012d0:	4619      	mov	r1, r3
 80012d2:	482d      	ldr	r0, [pc, #180]	@ (8001388 <MX_TIM4_Init+0x134>)
 80012d4:	f002 fcce 	bl	8003c74 <HAL_TIM_ConfigClockSource>
 80012d8:	4603      	mov	r3, r0
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d001      	beq.n	80012e2 <MX_TIM4_Init+0x8e>
  {
    Error_Handler();
 80012de:	f7ff fc0d 	bl	8000afc <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim4) != HAL_OK)
 80012e2:	4829      	ldr	r0, [pc, #164]	@ (8001388 <MX_TIM4_Init+0x134>)
 80012e4:	f002 f85c 	bl	80033a0 <HAL_TIM_IC_Init>
 80012e8:	4603      	mov	r3, r0
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d001      	beq.n	80012f2 <MX_TIM4_Init+0x9e>
  {
    Error_Handler();
 80012ee:	f7ff fc05 	bl	8000afc <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 80012f2:	2304      	movs	r3, #4
 80012f4:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 80012f6:	2350      	movs	r3, #80	@ 0x50
 80012f8:	623b      	str	r3, [r7, #32]
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80012fa:	2300      	movs	r3, #0
 80012fc:	627b      	str	r3, [r7, #36]	@ 0x24
  sSlaveConfig.TriggerPrescaler = TIM_ICPSC_DIV1;
 80012fe:	2300      	movs	r3, #0
 8001300:	62bb      	str	r3, [r7, #40]	@ 0x28
  sSlaveConfig.TriggerFilter = 0;
 8001302:	2300      	movs	r3, #0
 8001304:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_SlaveConfigSynchro(&htim4, &sSlaveConfig) != HAL_OK)
 8001306:	f107 031c 	add.w	r3, r7, #28
 800130a:	4619      	mov	r1, r3
 800130c:	481e      	ldr	r0, [pc, #120]	@ (8001388 <MX_TIM4_Init+0x134>)
 800130e:	f002 fd7b 	bl	8003e08 <HAL_TIM_SlaveConfigSynchro>
 8001312:	4603      	mov	r3, r0
 8001314:	2b00      	cmp	r3, #0
 8001316:	d001      	beq.n	800131c <MX_TIM4_Init+0xc8>
  {
    Error_Handler();
 8001318:	f7ff fbf0 	bl	8000afc <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 800131c:	2300      	movs	r3, #0
 800131e:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001320:	2301      	movs	r3, #1
 8001322:	613b      	str	r3, [r7, #16]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001324:	2300      	movs	r3, #0
 8001326:	617b      	str	r3, [r7, #20]
  sConfigIC.ICFilter = 0;
 8001328:	2300      	movs	r3, #0
 800132a:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 800132c:	f107 030c 	add.w	r3, r7, #12
 8001330:	2200      	movs	r2, #0
 8001332:	4619      	mov	r1, r3
 8001334:	4814      	ldr	r0, [pc, #80]	@ (8001388 <MX_TIM4_Init+0x134>)
 8001336:	f002 faec 	bl	8003912 <HAL_TIM_IC_ConfigChannel>
 800133a:	4603      	mov	r3, r0
 800133c:	2b00      	cmp	r3, #0
 800133e:	d001      	beq.n	8001344 <MX_TIM4_Init+0xf0>
  {
    Error_Handler();
 8001340:	f7ff fbdc 	bl	8000afc <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8001344:	2302      	movs	r3, #2
 8001346:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 8001348:	2302      	movs	r3, #2
 800134a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 800134c:	f107 030c 	add.w	r3, r7, #12
 8001350:	2204      	movs	r2, #4
 8001352:	4619      	mov	r1, r3
 8001354:	480c      	ldr	r0, [pc, #48]	@ (8001388 <MX_TIM4_Init+0x134>)
 8001356:	f002 fadc 	bl	8003912 <HAL_TIM_IC_ConfigChannel>
 800135a:	4603      	mov	r3, r0
 800135c:	2b00      	cmp	r3, #0
 800135e:	d001      	beq.n	8001364 <MX_TIM4_Init+0x110>
  {
    Error_Handler();
 8001360:	f7ff fbcc 	bl	8000afc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001364:	2300      	movs	r3, #0
 8001366:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001368:	2300      	movs	r3, #0
 800136a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800136c:	463b      	mov	r3, r7
 800136e:	4619      	mov	r1, r3
 8001370:	4805      	ldr	r0, [pc, #20]	@ (8001388 <MX_TIM4_Init+0x134>)
 8001372:	f003 fb7f 	bl	8004a74 <HAL_TIMEx_MasterConfigSynchronization>
 8001376:	4603      	mov	r3, r0
 8001378:	2b00      	cmp	r3, #0
 800137a:	d001      	beq.n	8001380 <MX_TIM4_Init+0x12c>
  {
    Error_Handler();
 800137c:	f7ff fbbe 	bl	8000afc <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001380:	bf00      	nop
 8001382:	3740      	adds	r7, #64	@ 0x40
 8001384:	46bd      	mov	sp, r7
 8001386:	bd80      	pop	{r7, pc}
 8001388:	200001bc 	.word	0x200001bc
 800138c:	40000800 	.word	0x40000800

08001390 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001390:	b580      	push	{r7, lr}
 8001392:	b08c      	sub	sp, #48	@ 0x30
 8001394:	af00      	add	r7, sp, #0
 8001396:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001398:	f107 031c 	add.w	r3, r7, #28
 800139c:	2200      	movs	r2, #0
 800139e:	601a      	str	r2, [r3, #0]
 80013a0:	605a      	str	r2, [r3, #4]
 80013a2:	609a      	str	r2, [r3, #8]
 80013a4:	60da      	str	r2, [r3, #12]
 80013a6:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM1)
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	4a37      	ldr	r2, [pc, #220]	@ (800148c <HAL_TIM_Base_MspInit+0xfc>)
 80013ae:	4293      	cmp	r3, r2
 80013b0:	d131      	bne.n	8001416 <HAL_TIM_Base_MspInit+0x86>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80013b2:	4b37      	ldr	r3, [pc, #220]	@ (8001490 <HAL_TIM_Base_MspInit+0x100>)
 80013b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80013b6:	4a36      	ldr	r2, [pc, #216]	@ (8001490 <HAL_TIM_Base_MspInit+0x100>)
 80013b8:	f043 0301 	orr.w	r3, r3, #1
 80013bc:	6453      	str	r3, [r2, #68]	@ 0x44
 80013be:	4b34      	ldr	r3, [pc, #208]	@ (8001490 <HAL_TIM_Base_MspInit+0x100>)
 80013c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80013c2:	f003 0301 	and.w	r3, r3, #1
 80013c6:	61bb      	str	r3, [r7, #24]
 80013c8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80013ca:	4b31      	ldr	r3, [pc, #196]	@ (8001490 <HAL_TIM_Base_MspInit+0x100>)
 80013cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013ce:	4a30      	ldr	r2, [pc, #192]	@ (8001490 <HAL_TIM_Base_MspInit+0x100>)
 80013d0:	f043 0310 	orr.w	r3, r3, #16
 80013d4:	6313      	str	r3, [r2, #48]	@ 0x30
 80013d6:	4b2e      	ldr	r3, [pc, #184]	@ (8001490 <HAL_TIM_Base_MspInit+0x100>)
 80013d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013da:	f003 0310 	and.w	r3, r3, #16
 80013de:	617b      	str	r3, [r7, #20]
 80013e0:	697b      	ldr	r3, [r7, #20]
    /**TIM1 GPIO Configuration
    PE11     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80013e2:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80013e6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013e8:	2302      	movs	r3, #2
 80013ea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ec:	2300      	movs	r3, #0
 80013ee:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013f0:	2300      	movs	r3, #0
 80013f2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80013f4:	2301      	movs	r3, #1
 80013f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80013f8:	f107 031c 	add.w	r3, r7, #28
 80013fc:	4619      	mov	r1, r3
 80013fe:	4825      	ldr	r0, [pc, #148]	@ (8001494 <HAL_TIM_Base_MspInit+0x104>)
 8001400:	f000 fb04 	bl	8001a0c <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 8001404:	2200      	movs	r2, #0
 8001406:	2100      	movs	r1, #0
 8001408:	201b      	movs	r0, #27
 800140a:	f000 fac8 	bl	800199e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 800140e:	201b      	movs	r0, #27
 8001410:	f000 fae1 	bl	80019d6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8001414:	e035      	b.n	8001482 <HAL_TIM_Base_MspInit+0xf2>
  else if(tim_baseHandle->Instance==TIM4)
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	4a1f      	ldr	r2, [pc, #124]	@ (8001498 <HAL_TIM_Base_MspInit+0x108>)
 800141c:	4293      	cmp	r3, r2
 800141e:	d130      	bne.n	8001482 <HAL_TIM_Base_MspInit+0xf2>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001420:	4b1b      	ldr	r3, [pc, #108]	@ (8001490 <HAL_TIM_Base_MspInit+0x100>)
 8001422:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001424:	4a1a      	ldr	r2, [pc, #104]	@ (8001490 <HAL_TIM_Base_MspInit+0x100>)
 8001426:	f043 0304 	orr.w	r3, r3, #4
 800142a:	6413      	str	r3, [r2, #64]	@ 0x40
 800142c:	4b18      	ldr	r3, [pc, #96]	@ (8001490 <HAL_TIM_Base_MspInit+0x100>)
 800142e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001430:	f003 0304 	and.w	r3, r3, #4
 8001434:	613b      	str	r3, [r7, #16]
 8001436:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001438:	4b15      	ldr	r3, [pc, #84]	@ (8001490 <HAL_TIM_Base_MspInit+0x100>)
 800143a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800143c:	4a14      	ldr	r2, [pc, #80]	@ (8001490 <HAL_TIM_Base_MspInit+0x100>)
 800143e:	f043 0308 	orr.w	r3, r3, #8
 8001442:	6313      	str	r3, [r2, #48]	@ 0x30
 8001444:	4b12      	ldr	r3, [pc, #72]	@ (8001490 <HAL_TIM_Base_MspInit+0x100>)
 8001446:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001448:	f003 0308 	and.w	r3, r3, #8
 800144c:	60fb      	str	r3, [r7, #12]
 800144e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001450:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001454:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001456:	2302      	movs	r3, #2
 8001458:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800145a:	2300      	movs	r3, #0
 800145c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800145e:	2300      	movs	r3, #0
 8001460:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001462:	2302      	movs	r3, #2
 8001464:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001466:	f107 031c 	add.w	r3, r7, #28
 800146a:	4619      	mov	r1, r3
 800146c:	480b      	ldr	r0, [pc, #44]	@ (800149c <HAL_TIM_Base_MspInit+0x10c>)
 800146e:	f000 facd 	bl	8001a0c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8001472:	2200      	movs	r2, #0
 8001474:	2100      	movs	r1, #0
 8001476:	201e      	movs	r0, #30
 8001478:	f000 fa91 	bl	800199e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 800147c:	201e      	movs	r0, #30
 800147e:	f000 faaa 	bl	80019d6 <HAL_NVIC_EnableIRQ>
}
 8001482:	bf00      	nop
 8001484:	3730      	adds	r7, #48	@ 0x30
 8001486:	46bd      	mov	sp, r7
 8001488:	bd80      	pop	{r7, pc}
 800148a:	bf00      	nop
 800148c:	40010000 	.word	0x40010000
 8001490:	40023800 	.word	0x40023800
 8001494:	40021000 	.word	0x40021000
 8001498:	40000800 	.word	0x40000800
 800149c:	40020c00 	.word	0x40020c00

080014a0 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 80014a0:	b480      	push	{r7}
 80014a2:	b085      	sub	sp, #20
 80014a4:	af00      	add	r7, sp, #0
 80014a6:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM2)
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80014b0:	d10c      	bne.n	80014cc <HAL_TIM_PWM_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80014b2:	4b12      	ldr	r3, [pc, #72]	@ (80014fc <HAL_TIM_PWM_MspInit+0x5c>)
 80014b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014b6:	4a11      	ldr	r2, [pc, #68]	@ (80014fc <HAL_TIM_PWM_MspInit+0x5c>)
 80014b8:	f043 0301 	orr.w	r3, r3, #1
 80014bc:	6413      	str	r3, [r2, #64]	@ 0x40
 80014be:	4b0f      	ldr	r3, [pc, #60]	@ (80014fc <HAL_TIM_PWM_MspInit+0x5c>)
 80014c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014c2:	f003 0301 	and.w	r3, r3, #1
 80014c6:	60fb      	str	r3, [r7, #12]
 80014c8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_TIM3_CLK_ENABLE();
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 80014ca:	e010      	b.n	80014ee <HAL_TIM_PWM_MspInit+0x4e>
  else if(tim_pwmHandle->Instance==TIM3)
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	4a0b      	ldr	r2, [pc, #44]	@ (8001500 <HAL_TIM_PWM_MspInit+0x60>)
 80014d2:	4293      	cmp	r3, r2
 80014d4:	d10b      	bne.n	80014ee <HAL_TIM_PWM_MspInit+0x4e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80014d6:	4b09      	ldr	r3, [pc, #36]	@ (80014fc <HAL_TIM_PWM_MspInit+0x5c>)
 80014d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014da:	4a08      	ldr	r2, [pc, #32]	@ (80014fc <HAL_TIM_PWM_MspInit+0x5c>)
 80014dc:	f043 0302 	orr.w	r3, r3, #2
 80014e0:	6413      	str	r3, [r2, #64]	@ 0x40
 80014e2:	4b06      	ldr	r3, [pc, #24]	@ (80014fc <HAL_TIM_PWM_MspInit+0x5c>)
 80014e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014e6:	f003 0302 	and.w	r3, r3, #2
 80014ea:	60bb      	str	r3, [r7, #8]
 80014ec:	68bb      	ldr	r3, [r7, #8]
}
 80014ee:	bf00      	nop
 80014f0:	3714      	adds	r7, #20
 80014f2:	46bd      	mov	sp, r7
 80014f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f8:	4770      	bx	lr
 80014fa:	bf00      	nop
 80014fc:	40023800 	.word	0x40023800
 8001500:	40000400 	.word	0x40000400

08001504 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001504:	b580      	push	{r7, lr}
 8001506:	b08a      	sub	sp, #40	@ 0x28
 8001508:	af00      	add	r7, sp, #0
 800150a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800150c:	f107 0314 	add.w	r3, r7, #20
 8001510:	2200      	movs	r2, #0
 8001512:	601a      	str	r2, [r3, #0]
 8001514:	605a      	str	r2, [r3, #4]
 8001516:	609a      	str	r2, [r3, #8]
 8001518:	60da      	str	r2, [r3, #12]
 800151a:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001524:	d11c      	bne.n	8001560 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001526:	4b21      	ldr	r3, [pc, #132]	@ (80015ac <HAL_TIM_MspPostInit+0xa8>)
 8001528:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800152a:	4a20      	ldr	r2, [pc, #128]	@ (80015ac <HAL_TIM_MspPostInit+0xa8>)
 800152c:	f043 0301 	orr.w	r3, r3, #1
 8001530:	6313      	str	r3, [r2, #48]	@ 0x30
 8001532:	4b1e      	ldr	r3, [pc, #120]	@ (80015ac <HAL_TIM_MspPostInit+0xa8>)
 8001534:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001536:	f003 0301 	and.w	r3, r3, #1
 800153a:	613b      	str	r3, [r7, #16]
 800153c:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA3     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800153e:	2308      	movs	r3, #8
 8001540:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001542:	2302      	movs	r3, #2
 8001544:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001546:	2300      	movs	r3, #0
 8001548:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800154a:	2300      	movs	r3, #0
 800154c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800154e:	2301      	movs	r3, #1
 8001550:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001552:	f107 0314 	add.w	r3, r7, #20
 8001556:	4619      	mov	r1, r3
 8001558:	4815      	ldr	r0, [pc, #84]	@ (80015b0 <HAL_TIM_MspPostInit+0xac>)
 800155a:	f000 fa57 	bl	8001a0c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 800155e:	e021      	b.n	80015a4 <HAL_TIM_MspPostInit+0xa0>
  else if(timHandle->Instance==TIM3)
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	4a13      	ldr	r2, [pc, #76]	@ (80015b4 <HAL_TIM_MspPostInit+0xb0>)
 8001566:	4293      	cmp	r3, r2
 8001568:	d11c      	bne.n	80015a4 <HAL_TIM_MspPostInit+0xa0>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800156a:	4b10      	ldr	r3, [pc, #64]	@ (80015ac <HAL_TIM_MspPostInit+0xa8>)
 800156c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800156e:	4a0f      	ldr	r2, [pc, #60]	@ (80015ac <HAL_TIM_MspPostInit+0xa8>)
 8001570:	f043 0304 	orr.w	r3, r3, #4
 8001574:	6313      	str	r3, [r2, #48]	@ 0x30
 8001576:	4b0d      	ldr	r3, [pc, #52]	@ (80015ac <HAL_TIM_MspPostInit+0xa8>)
 8001578:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800157a:	f003 0304 	and.w	r3, r3, #4
 800157e:	60fb      	str	r3, [r7, #12]
 8001580:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = serwo_Pin;
 8001582:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001586:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001588:	2302      	movs	r3, #2
 800158a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800158c:	2300      	movs	r3, #0
 800158e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001590:	2300      	movs	r3, #0
 8001592:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001594:	2302      	movs	r3, #2
 8001596:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(serwo_GPIO_Port, &GPIO_InitStruct);
 8001598:	f107 0314 	add.w	r3, r7, #20
 800159c:	4619      	mov	r1, r3
 800159e:	4806      	ldr	r0, [pc, #24]	@ (80015b8 <HAL_TIM_MspPostInit+0xb4>)
 80015a0:	f000 fa34 	bl	8001a0c <HAL_GPIO_Init>
}
 80015a4:	bf00      	nop
 80015a6:	3728      	adds	r7, #40	@ 0x28
 80015a8:	46bd      	mov	sp, r7
 80015aa:	bd80      	pop	{r7, pc}
 80015ac:	40023800 	.word	0x40023800
 80015b0:	40020000 	.word	0x40020000
 80015b4:	40000400 	.word	0x40000400
 80015b8:	40020800 	.word	0x40020800

080015bc <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 80015bc:	b580      	push	{r7, lr}
 80015be:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80015c0:	4b14      	ldr	r3, [pc, #80]	@ (8001614 <MX_USART3_UART_Init+0x58>)
 80015c2:	4a15      	ldr	r2, [pc, #84]	@ (8001618 <MX_USART3_UART_Init+0x5c>)
 80015c4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 80015c6:	4b13      	ldr	r3, [pc, #76]	@ (8001614 <MX_USART3_UART_Init+0x58>)
 80015c8:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 80015cc:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80015ce:	4b11      	ldr	r3, [pc, #68]	@ (8001614 <MX_USART3_UART_Init+0x58>)
 80015d0:	2200      	movs	r2, #0
 80015d2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80015d4:	4b0f      	ldr	r3, [pc, #60]	@ (8001614 <MX_USART3_UART_Init+0x58>)
 80015d6:	2200      	movs	r2, #0
 80015d8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80015da:	4b0e      	ldr	r3, [pc, #56]	@ (8001614 <MX_USART3_UART_Init+0x58>)
 80015dc:	2200      	movs	r2, #0
 80015de:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80015e0:	4b0c      	ldr	r3, [pc, #48]	@ (8001614 <MX_USART3_UART_Init+0x58>)
 80015e2:	220c      	movs	r2, #12
 80015e4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80015e6:	4b0b      	ldr	r3, [pc, #44]	@ (8001614 <MX_USART3_UART_Init+0x58>)
 80015e8:	2200      	movs	r2, #0
 80015ea:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80015ec:	4b09      	ldr	r3, [pc, #36]	@ (8001614 <MX_USART3_UART_Init+0x58>)
 80015ee:	2200      	movs	r2, #0
 80015f0:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80015f2:	4b08      	ldr	r3, [pc, #32]	@ (8001614 <MX_USART3_UART_Init+0x58>)
 80015f4:	2200      	movs	r2, #0
 80015f6:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80015f8:	4b06      	ldr	r3, [pc, #24]	@ (8001614 <MX_USART3_UART_Init+0x58>)
 80015fa:	2200      	movs	r2, #0
 80015fc:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80015fe:	4805      	ldr	r0, [pc, #20]	@ (8001614 <MX_USART3_UART_Init+0x58>)
 8001600:	f003 fae4 	bl	8004bcc <HAL_UART_Init>
 8001604:	4603      	mov	r3, r0
 8001606:	2b00      	cmp	r3, #0
 8001608:	d001      	beq.n	800160e <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 800160a:	f7ff fa77 	bl	8000afc <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800160e:	bf00      	nop
 8001610:	bd80      	pop	{r7, pc}
 8001612:	bf00      	nop
 8001614:	20000208 	.word	0x20000208
 8001618:	40004800 	.word	0x40004800

0800161c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800161c:	b580      	push	{r7, lr}
 800161e:	b0ae      	sub	sp, #184	@ 0xb8
 8001620:	af00      	add	r7, sp, #0
 8001622:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001624:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001628:	2200      	movs	r2, #0
 800162a:	601a      	str	r2, [r3, #0]
 800162c:	605a      	str	r2, [r3, #4]
 800162e:	609a      	str	r2, [r3, #8]
 8001630:	60da      	str	r2, [r3, #12]
 8001632:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001634:	f107 0314 	add.w	r3, r7, #20
 8001638:	2290      	movs	r2, #144	@ 0x90
 800163a:	2100      	movs	r1, #0
 800163c:	4618      	mov	r0, r3
 800163e:	f004 f83d 	bl	80056bc <memset>
  if(uartHandle->Instance==USART3)
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	4a22      	ldr	r2, [pc, #136]	@ (80016d0 <HAL_UART_MspInit+0xb4>)
 8001648:	4293      	cmp	r3, r2
 800164a:	d13c      	bne.n	80016c6 <HAL_UART_MspInit+0xaa>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 800164c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001650:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8001652:	2300      	movs	r3, #0
 8001654:	663b      	str	r3, [r7, #96]	@ 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001656:	f107 0314 	add.w	r3, r7, #20
 800165a:	4618      	mov	r0, r3
 800165c:	f001 f8d0 	bl	8002800 <HAL_RCCEx_PeriphCLKConfig>
 8001660:	4603      	mov	r3, r0
 8001662:	2b00      	cmp	r3, #0
 8001664:	d001      	beq.n	800166a <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8001666:	f7ff fa49 	bl	8000afc <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800166a:	4b1a      	ldr	r3, [pc, #104]	@ (80016d4 <HAL_UART_MspInit+0xb8>)
 800166c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800166e:	4a19      	ldr	r2, [pc, #100]	@ (80016d4 <HAL_UART_MspInit+0xb8>)
 8001670:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001674:	6413      	str	r3, [r2, #64]	@ 0x40
 8001676:	4b17      	ldr	r3, [pc, #92]	@ (80016d4 <HAL_UART_MspInit+0xb8>)
 8001678:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800167a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800167e:	613b      	str	r3, [r7, #16]
 8001680:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001682:	4b14      	ldr	r3, [pc, #80]	@ (80016d4 <HAL_UART_MspInit+0xb8>)
 8001684:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001686:	4a13      	ldr	r2, [pc, #76]	@ (80016d4 <HAL_UART_MspInit+0xb8>)
 8001688:	f043 0308 	orr.w	r3, r3, #8
 800168c:	6313      	str	r3, [r2, #48]	@ 0x30
 800168e:	4b11      	ldr	r3, [pc, #68]	@ (80016d4 <HAL_UART_MspInit+0xb8>)
 8001690:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001692:	f003 0308 	and.w	r3, r3, #8
 8001696:	60fb      	str	r3, [r7, #12]
 8001698:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 800169a:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800169e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016a2:	2302      	movs	r3, #2
 80016a4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016a8:	2300      	movs	r3, #0
 80016aa:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016ae:	2303      	movs	r3, #3
 80016b0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80016b4:	2307      	movs	r3, #7
 80016b6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80016ba:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 80016be:	4619      	mov	r1, r3
 80016c0:	4805      	ldr	r0, [pc, #20]	@ (80016d8 <HAL_UART_MspInit+0xbc>)
 80016c2:	f000 f9a3 	bl	8001a0c <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 80016c6:	bf00      	nop
 80016c8:	37b8      	adds	r7, #184	@ 0xb8
 80016ca:	46bd      	mov	sp, r7
 80016cc:	bd80      	pop	{r7, pc}
 80016ce:	bf00      	nop
 80016d0:	40004800 	.word	0x40004800
 80016d4:	40023800 	.word	0x40023800
 80016d8:	40020c00 	.word	0x40020c00

080016dc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80016dc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001714 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80016e0:	f7ff fc4c 	bl	8000f7c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80016e4:	480c      	ldr	r0, [pc, #48]	@ (8001718 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80016e6:	490d      	ldr	r1, [pc, #52]	@ (800171c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80016e8:	4a0d      	ldr	r2, [pc, #52]	@ (8001720 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80016ea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80016ec:	e002      	b.n	80016f4 <LoopCopyDataInit>

080016ee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80016ee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80016f0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80016f2:	3304      	adds	r3, #4

080016f4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80016f4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80016f6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80016f8:	d3f9      	bcc.n	80016ee <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80016fa:	4a0a      	ldr	r2, [pc, #40]	@ (8001724 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80016fc:	4c0a      	ldr	r4, [pc, #40]	@ (8001728 <LoopFillZerobss+0x22>)
  movs r3, #0
 80016fe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001700:	e001      	b.n	8001706 <LoopFillZerobss>

08001702 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001702:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001704:	3204      	adds	r2, #4

08001706 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001706:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001708:	d3fb      	bcc.n	8001702 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 800170a:	f003 ffe5 	bl	80056d8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800170e:	f7ff f935 	bl	800097c <main>
  bx  lr    
 8001712:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001714:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8001718:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800171c:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8001720:	0800603c 	.word	0x0800603c
  ldr r2, =_sbss
 8001724:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8001728:	200003dc 	.word	0x200003dc

0800172c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800172c:	e7fe      	b.n	800172c <ADC_IRQHandler>

0800172e <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800172e:	b580      	push	{r7, lr}
 8001730:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001732:	2003      	movs	r0, #3
 8001734:	f000 f928 	bl	8001988 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001738:	2000      	movs	r0, #0
 800173a:	f000 f805 	bl	8001748 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800173e:	f7ff fb7f 	bl	8000e40 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001742:	2300      	movs	r3, #0
}
 8001744:	4618      	mov	r0, r3
 8001746:	bd80      	pop	{r7, pc}

08001748 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001748:	b580      	push	{r7, lr}
 800174a:	b082      	sub	sp, #8
 800174c:	af00      	add	r7, sp, #0
 800174e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001750:	4b12      	ldr	r3, [pc, #72]	@ (800179c <HAL_InitTick+0x54>)
 8001752:	681a      	ldr	r2, [r3, #0]
 8001754:	4b12      	ldr	r3, [pc, #72]	@ (80017a0 <HAL_InitTick+0x58>)
 8001756:	781b      	ldrb	r3, [r3, #0]
 8001758:	4619      	mov	r1, r3
 800175a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800175e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001762:	fbb2 f3f3 	udiv	r3, r2, r3
 8001766:	4618      	mov	r0, r3
 8001768:	f000 f943 	bl	80019f2 <HAL_SYSTICK_Config>
 800176c:	4603      	mov	r3, r0
 800176e:	2b00      	cmp	r3, #0
 8001770:	d001      	beq.n	8001776 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001772:	2301      	movs	r3, #1
 8001774:	e00e      	b.n	8001794 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	2b0f      	cmp	r3, #15
 800177a:	d80a      	bhi.n	8001792 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800177c:	2200      	movs	r2, #0
 800177e:	6879      	ldr	r1, [r7, #4]
 8001780:	f04f 30ff 	mov.w	r0, #4294967295
 8001784:	f000 f90b 	bl	800199e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001788:	4a06      	ldr	r2, [pc, #24]	@ (80017a4 <HAL_InitTick+0x5c>)
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800178e:	2300      	movs	r3, #0
 8001790:	e000      	b.n	8001794 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001792:	2301      	movs	r3, #1
}
 8001794:	4618      	mov	r0, r3
 8001796:	3708      	adds	r7, #8
 8001798:	46bd      	mov	sp, r7
 800179a:	bd80      	pop	{r7, pc}
 800179c:	20000018 	.word	0x20000018
 80017a0:	20000020 	.word	0x20000020
 80017a4:	2000001c 	.word	0x2000001c

080017a8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80017a8:	b480      	push	{r7}
 80017aa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80017ac:	4b06      	ldr	r3, [pc, #24]	@ (80017c8 <HAL_IncTick+0x20>)
 80017ae:	781b      	ldrb	r3, [r3, #0]
 80017b0:	461a      	mov	r2, r3
 80017b2:	4b06      	ldr	r3, [pc, #24]	@ (80017cc <HAL_IncTick+0x24>)
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	4413      	add	r3, r2
 80017b8:	4a04      	ldr	r2, [pc, #16]	@ (80017cc <HAL_IncTick+0x24>)
 80017ba:	6013      	str	r3, [r2, #0]
}
 80017bc:	bf00      	nop
 80017be:	46bd      	mov	sp, r7
 80017c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c4:	4770      	bx	lr
 80017c6:	bf00      	nop
 80017c8:	20000020 	.word	0x20000020
 80017cc:	20000290 	.word	0x20000290

080017d0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80017d0:	b480      	push	{r7}
 80017d2:	af00      	add	r7, sp, #0
  return uwTick;
 80017d4:	4b03      	ldr	r3, [pc, #12]	@ (80017e4 <HAL_GetTick+0x14>)
 80017d6:	681b      	ldr	r3, [r3, #0]
}
 80017d8:	4618      	mov	r0, r3
 80017da:	46bd      	mov	sp, r7
 80017dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e0:	4770      	bx	lr
 80017e2:	bf00      	nop
 80017e4:	20000290 	.word	0x20000290

080017e8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017e8:	b480      	push	{r7}
 80017ea:	b085      	sub	sp, #20
 80017ec:	af00      	add	r7, sp, #0
 80017ee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	f003 0307 	and.w	r3, r3, #7
 80017f6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80017f8:	4b0b      	ldr	r3, [pc, #44]	@ (8001828 <__NVIC_SetPriorityGrouping+0x40>)
 80017fa:	68db      	ldr	r3, [r3, #12]
 80017fc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80017fe:	68ba      	ldr	r2, [r7, #8]
 8001800:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001804:	4013      	ands	r3, r2
 8001806:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001808:	68fb      	ldr	r3, [r7, #12]
 800180a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800180c:	68bb      	ldr	r3, [r7, #8]
 800180e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001810:	4b06      	ldr	r3, [pc, #24]	@ (800182c <__NVIC_SetPriorityGrouping+0x44>)
 8001812:	4313      	orrs	r3, r2
 8001814:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001816:	4a04      	ldr	r2, [pc, #16]	@ (8001828 <__NVIC_SetPriorityGrouping+0x40>)
 8001818:	68bb      	ldr	r3, [r7, #8]
 800181a:	60d3      	str	r3, [r2, #12]
}
 800181c:	bf00      	nop
 800181e:	3714      	adds	r7, #20
 8001820:	46bd      	mov	sp, r7
 8001822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001826:	4770      	bx	lr
 8001828:	e000ed00 	.word	0xe000ed00
 800182c:	05fa0000 	.word	0x05fa0000

08001830 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001830:	b480      	push	{r7}
 8001832:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001834:	4b04      	ldr	r3, [pc, #16]	@ (8001848 <__NVIC_GetPriorityGrouping+0x18>)
 8001836:	68db      	ldr	r3, [r3, #12]
 8001838:	0a1b      	lsrs	r3, r3, #8
 800183a:	f003 0307 	and.w	r3, r3, #7
}
 800183e:	4618      	mov	r0, r3
 8001840:	46bd      	mov	sp, r7
 8001842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001846:	4770      	bx	lr
 8001848:	e000ed00 	.word	0xe000ed00

0800184c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800184c:	b480      	push	{r7}
 800184e:	b083      	sub	sp, #12
 8001850:	af00      	add	r7, sp, #0
 8001852:	4603      	mov	r3, r0
 8001854:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001856:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800185a:	2b00      	cmp	r3, #0
 800185c:	db0b      	blt.n	8001876 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800185e:	79fb      	ldrb	r3, [r7, #7]
 8001860:	f003 021f 	and.w	r2, r3, #31
 8001864:	4907      	ldr	r1, [pc, #28]	@ (8001884 <__NVIC_EnableIRQ+0x38>)
 8001866:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800186a:	095b      	lsrs	r3, r3, #5
 800186c:	2001      	movs	r0, #1
 800186e:	fa00 f202 	lsl.w	r2, r0, r2
 8001872:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001876:	bf00      	nop
 8001878:	370c      	adds	r7, #12
 800187a:	46bd      	mov	sp, r7
 800187c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001880:	4770      	bx	lr
 8001882:	bf00      	nop
 8001884:	e000e100 	.word	0xe000e100

08001888 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001888:	b480      	push	{r7}
 800188a:	b083      	sub	sp, #12
 800188c:	af00      	add	r7, sp, #0
 800188e:	4603      	mov	r3, r0
 8001890:	6039      	str	r1, [r7, #0]
 8001892:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001894:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001898:	2b00      	cmp	r3, #0
 800189a:	db0a      	blt.n	80018b2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800189c:	683b      	ldr	r3, [r7, #0]
 800189e:	b2da      	uxtb	r2, r3
 80018a0:	490c      	ldr	r1, [pc, #48]	@ (80018d4 <__NVIC_SetPriority+0x4c>)
 80018a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018a6:	0112      	lsls	r2, r2, #4
 80018a8:	b2d2      	uxtb	r2, r2
 80018aa:	440b      	add	r3, r1
 80018ac:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80018b0:	e00a      	b.n	80018c8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018b2:	683b      	ldr	r3, [r7, #0]
 80018b4:	b2da      	uxtb	r2, r3
 80018b6:	4908      	ldr	r1, [pc, #32]	@ (80018d8 <__NVIC_SetPriority+0x50>)
 80018b8:	79fb      	ldrb	r3, [r7, #7]
 80018ba:	f003 030f 	and.w	r3, r3, #15
 80018be:	3b04      	subs	r3, #4
 80018c0:	0112      	lsls	r2, r2, #4
 80018c2:	b2d2      	uxtb	r2, r2
 80018c4:	440b      	add	r3, r1
 80018c6:	761a      	strb	r2, [r3, #24]
}
 80018c8:	bf00      	nop
 80018ca:	370c      	adds	r7, #12
 80018cc:	46bd      	mov	sp, r7
 80018ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d2:	4770      	bx	lr
 80018d4:	e000e100 	.word	0xe000e100
 80018d8:	e000ed00 	.word	0xe000ed00

080018dc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80018dc:	b480      	push	{r7}
 80018de:	b089      	sub	sp, #36	@ 0x24
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	60f8      	str	r0, [r7, #12]
 80018e4:	60b9      	str	r1, [r7, #8]
 80018e6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80018e8:	68fb      	ldr	r3, [r7, #12]
 80018ea:	f003 0307 	and.w	r3, r3, #7
 80018ee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80018f0:	69fb      	ldr	r3, [r7, #28]
 80018f2:	f1c3 0307 	rsb	r3, r3, #7
 80018f6:	2b04      	cmp	r3, #4
 80018f8:	bf28      	it	cs
 80018fa:	2304      	movcs	r3, #4
 80018fc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80018fe:	69fb      	ldr	r3, [r7, #28]
 8001900:	3304      	adds	r3, #4
 8001902:	2b06      	cmp	r3, #6
 8001904:	d902      	bls.n	800190c <NVIC_EncodePriority+0x30>
 8001906:	69fb      	ldr	r3, [r7, #28]
 8001908:	3b03      	subs	r3, #3
 800190a:	e000      	b.n	800190e <NVIC_EncodePriority+0x32>
 800190c:	2300      	movs	r3, #0
 800190e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001910:	f04f 32ff 	mov.w	r2, #4294967295
 8001914:	69bb      	ldr	r3, [r7, #24]
 8001916:	fa02 f303 	lsl.w	r3, r2, r3
 800191a:	43da      	mvns	r2, r3
 800191c:	68bb      	ldr	r3, [r7, #8]
 800191e:	401a      	ands	r2, r3
 8001920:	697b      	ldr	r3, [r7, #20]
 8001922:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001924:	f04f 31ff 	mov.w	r1, #4294967295
 8001928:	697b      	ldr	r3, [r7, #20]
 800192a:	fa01 f303 	lsl.w	r3, r1, r3
 800192e:	43d9      	mvns	r1, r3
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001934:	4313      	orrs	r3, r2
         );
}
 8001936:	4618      	mov	r0, r3
 8001938:	3724      	adds	r7, #36	@ 0x24
 800193a:	46bd      	mov	sp, r7
 800193c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001940:	4770      	bx	lr
	...

08001944 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001944:	b580      	push	{r7, lr}
 8001946:	b082      	sub	sp, #8
 8001948:	af00      	add	r7, sp, #0
 800194a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	3b01      	subs	r3, #1
 8001950:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001954:	d301      	bcc.n	800195a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001956:	2301      	movs	r3, #1
 8001958:	e00f      	b.n	800197a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800195a:	4a0a      	ldr	r2, [pc, #40]	@ (8001984 <SysTick_Config+0x40>)
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	3b01      	subs	r3, #1
 8001960:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001962:	210f      	movs	r1, #15
 8001964:	f04f 30ff 	mov.w	r0, #4294967295
 8001968:	f7ff ff8e 	bl	8001888 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800196c:	4b05      	ldr	r3, [pc, #20]	@ (8001984 <SysTick_Config+0x40>)
 800196e:	2200      	movs	r2, #0
 8001970:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001972:	4b04      	ldr	r3, [pc, #16]	@ (8001984 <SysTick_Config+0x40>)
 8001974:	2207      	movs	r2, #7
 8001976:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001978:	2300      	movs	r3, #0
}
 800197a:	4618      	mov	r0, r3
 800197c:	3708      	adds	r7, #8
 800197e:	46bd      	mov	sp, r7
 8001980:	bd80      	pop	{r7, pc}
 8001982:	bf00      	nop
 8001984:	e000e010 	.word	0xe000e010

08001988 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001988:	b580      	push	{r7, lr}
 800198a:	b082      	sub	sp, #8
 800198c:	af00      	add	r7, sp, #0
 800198e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001990:	6878      	ldr	r0, [r7, #4]
 8001992:	f7ff ff29 	bl	80017e8 <__NVIC_SetPriorityGrouping>
}
 8001996:	bf00      	nop
 8001998:	3708      	adds	r7, #8
 800199a:	46bd      	mov	sp, r7
 800199c:	bd80      	pop	{r7, pc}

0800199e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800199e:	b580      	push	{r7, lr}
 80019a0:	b086      	sub	sp, #24
 80019a2:	af00      	add	r7, sp, #0
 80019a4:	4603      	mov	r3, r0
 80019a6:	60b9      	str	r1, [r7, #8]
 80019a8:	607a      	str	r2, [r7, #4]
 80019aa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80019ac:	2300      	movs	r3, #0
 80019ae:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80019b0:	f7ff ff3e 	bl	8001830 <__NVIC_GetPriorityGrouping>
 80019b4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80019b6:	687a      	ldr	r2, [r7, #4]
 80019b8:	68b9      	ldr	r1, [r7, #8]
 80019ba:	6978      	ldr	r0, [r7, #20]
 80019bc:	f7ff ff8e 	bl	80018dc <NVIC_EncodePriority>
 80019c0:	4602      	mov	r2, r0
 80019c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80019c6:	4611      	mov	r1, r2
 80019c8:	4618      	mov	r0, r3
 80019ca:	f7ff ff5d 	bl	8001888 <__NVIC_SetPriority>
}
 80019ce:	bf00      	nop
 80019d0:	3718      	adds	r7, #24
 80019d2:	46bd      	mov	sp, r7
 80019d4:	bd80      	pop	{r7, pc}

080019d6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80019d6:	b580      	push	{r7, lr}
 80019d8:	b082      	sub	sp, #8
 80019da:	af00      	add	r7, sp, #0
 80019dc:	4603      	mov	r3, r0
 80019de:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80019e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019e4:	4618      	mov	r0, r3
 80019e6:	f7ff ff31 	bl	800184c <__NVIC_EnableIRQ>
}
 80019ea:	bf00      	nop
 80019ec:	3708      	adds	r7, #8
 80019ee:	46bd      	mov	sp, r7
 80019f0:	bd80      	pop	{r7, pc}

080019f2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80019f2:	b580      	push	{r7, lr}
 80019f4:	b082      	sub	sp, #8
 80019f6:	af00      	add	r7, sp, #0
 80019f8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80019fa:	6878      	ldr	r0, [r7, #4]
 80019fc:	f7ff ffa2 	bl	8001944 <SysTick_Config>
 8001a00:	4603      	mov	r3, r0
}
 8001a02:	4618      	mov	r0, r3
 8001a04:	3708      	adds	r7, #8
 8001a06:	46bd      	mov	sp, r7
 8001a08:	bd80      	pop	{r7, pc}
	...

08001a0c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001a0c:	b480      	push	{r7}
 8001a0e:	b089      	sub	sp, #36	@ 0x24
 8001a10:	af00      	add	r7, sp, #0
 8001a12:	6078      	str	r0, [r7, #4]
 8001a14:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8001a16:	2300      	movs	r3, #0
 8001a18:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8001a1a:	2300      	movs	r3, #0
 8001a1c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8001a1e:	2300      	movs	r3, #0
 8001a20:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8001a22:	2300      	movs	r3, #0
 8001a24:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 8001a26:	2300      	movs	r3, #0
 8001a28:	61fb      	str	r3, [r7, #28]
 8001a2a:	e175      	b.n	8001d18 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8001a2c:	2201      	movs	r2, #1
 8001a2e:	69fb      	ldr	r3, [r7, #28]
 8001a30:	fa02 f303 	lsl.w	r3, r2, r3
 8001a34:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001a36:	683b      	ldr	r3, [r7, #0]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	697a      	ldr	r2, [r7, #20]
 8001a3c:	4013      	ands	r3, r2
 8001a3e:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 8001a40:	693a      	ldr	r2, [r7, #16]
 8001a42:	697b      	ldr	r3, [r7, #20]
 8001a44:	429a      	cmp	r2, r3
 8001a46:	f040 8164 	bne.w	8001d12 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001a4a:	683b      	ldr	r3, [r7, #0]
 8001a4c:	685b      	ldr	r3, [r3, #4]
 8001a4e:	f003 0303 	and.w	r3, r3, #3
 8001a52:	2b01      	cmp	r3, #1
 8001a54:	d005      	beq.n	8001a62 <HAL_GPIO_Init+0x56>
 8001a56:	683b      	ldr	r3, [r7, #0]
 8001a58:	685b      	ldr	r3, [r3, #4]
 8001a5a:	f003 0303 	and.w	r3, r3, #3
 8001a5e:	2b02      	cmp	r3, #2
 8001a60:	d130      	bne.n	8001ac4 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	689b      	ldr	r3, [r3, #8]
 8001a66:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001a68:	69fb      	ldr	r3, [r7, #28]
 8001a6a:	005b      	lsls	r3, r3, #1
 8001a6c:	2203      	movs	r2, #3
 8001a6e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a72:	43db      	mvns	r3, r3
 8001a74:	69ba      	ldr	r2, [r7, #24]
 8001a76:	4013      	ands	r3, r2
 8001a78:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8001a7a:	683b      	ldr	r3, [r7, #0]
 8001a7c:	68da      	ldr	r2, [r3, #12]
 8001a7e:	69fb      	ldr	r3, [r7, #28]
 8001a80:	005b      	lsls	r3, r3, #1
 8001a82:	fa02 f303 	lsl.w	r3, r2, r3
 8001a86:	69ba      	ldr	r2, [r7, #24]
 8001a88:	4313      	orrs	r3, r2
 8001a8a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	69ba      	ldr	r2, [r7, #24]
 8001a90:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	685b      	ldr	r3, [r3, #4]
 8001a96:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001a98:	2201      	movs	r2, #1
 8001a9a:	69fb      	ldr	r3, [r7, #28]
 8001a9c:	fa02 f303 	lsl.w	r3, r2, r3
 8001aa0:	43db      	mvns	r3, r3
 8001aa2:	69ba      	ldr	r2, [r7, #24]
 8001aa4:	4013      	ands	r3, r2
 8001aa6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001aa8:	683b      	ldr	r3, [r7, #0]
 8001aaa:	685b      	ldr	r3, [r3, #4]
 8001aac:	091b      	lsrs	r3, r3, #4
 8001aae:	f003 0201 	and.w	r2, r3, #1
 8001ab2:	69fb      	ldr	r3, [r7, #28]
 8001ab4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ab8:	69ba      	ldr	r2, [r7, #24]
 8001aba:	4313      	orrs	r3, r2
 8001abc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	69ba      	ldr	r2, [r7, #24]
 8001ac2:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001ac4:	683b      	ldr	r3, [r7, #0]
 8001ac6:	685b      	ldr	r3, [r3, #4]
 8001ac8:	f003 0303 	and.w	r3, r3, #3
 8001acc:	2b03      	cmp	r3, #3
 8001ace:	d017      	beq.n	8001b00 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	68db      	ldr	r3, [r3, #12]
 8001ad4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8001ad6:	69fb      	ldr	r3, [r7, #28]
 8001ad8:	005b      	lsls	r3, r3, #1
 8001ada:	2203      	movs	r2, #3
 8001adc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ae0:	43db      	mvns	r3, r3
 8001ae2:	69ba      	ldr	r2, [r7, #24]
 8001ae4:	4013      	ands	r3, r2
 8001ae6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8001ae8:	683b      	ldr	r3, [r7, #0]
 8001aea:	689a      	ldr	r2, [r3, #8]
 8001aec:	69fb      	ldr	r3, [r7, #28]
 8001aee:	005b      	lsls	r3, r3, #1
 8001af0:	fa02 f303 	lsl.w	r3, r2, r3
 8001af4:	69ba      	ldr	r2, [r7, #24]
 8001af6:	4313      	orrs	r3, r2
 8001af8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	69ba      	ldr	r2, [r7, #24]
 8001afe:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001b00:	683b      	ldr	r3, [r7, #0]
 8001b02:	685b      	ldr	r3, [r3, #4]
 8001b04:	f003 0303 	and.w	r3, r3, #3
 8001b08:	2b02      	cmp	r3, #2
 8001b0a:	d123      	bne.n	8001b54 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8001b0c:	69fb      	ldr	r3, [r7, #28]
 8001b0e:	08da      	lsrs	r2, r3, #3
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	3208      	adds	r2, #8
 8001b14:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001b18:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001b1a:	69fb      	ldr	r3, [r7, #28]
 8001b1c:	f003 0307 	and.w	r3, r3, #7
 8001b20:	009b      	lsls	r3, r3, #2
 8001b22:	220f      	movs	r2, #15
 8001b24:	fa02 f303 	lsl.w	r3, r2, r3
 8001b28:	43db      	mvns	r3, r3
 8001b2a:	69ba      	ldr	r2, [r7, #24]
 8001b2c:	4013      	ands	r3, r2
 8001b2e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001b30:	683b      	ldr	r3, [r7, #0]
 8001b32:	691a      	ldr	r2, [r3, #16]
 8001b34:	69fb      	ldr	r3, [r7, #28]
 8001b36:	f003 0307 	and.w	r3, r3, #7
 8001b3a:	009b      	lsls	r3, r3, #2
 8001b3c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b40:	69ba      	ldr	r2, [r7, #24]
 8001b42:	4313      	orrs	r3, r2
 8001b44:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8001b46:	69fb      	ldr	r3, [r7, #28]
 8001b48:	08da      	lsrs	r2, r3, #3
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	3208      	adds	r2, #8
 8001b4e:	69b9      	ldr	r1, [r7, #24]
 8001b50:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001b5a:	69fb      	ldr	r3, [r7, #28]
 8001b5c:	005b      	lsls	r3, r3, #1
 8001b5e:	2203      	movs	r2, #3
 8001b60:	fa02 f303 	lsl.w	r3, r2, r3
 8001b64:	43db      	mvns	r3, r3
 8001b66:	69ba      	ldr	r2, [r7, #24]
 8001b68:	4013      	ands	r3, r2
 8001b6a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001b6c:	683b      	ldr	r3, [r7, #0]
 8001b6e:	685b      	ldr	r3, [r3, #4]
 8001b70:	f003 0203 	and.w	r2, r3, #3
 8001b74:	69fb      	ldr	r3, [r7, #28]
 8001b76:	005b      	lsls	r3, r3, #1
 8001b78:	fa02 f303 	lsl.w	r3, r2, r3
 8001b7c:	69ba      	ldr	r2, [r7, #24]
 8001b7e:	4313      	orrs	r3, r2
 8001b80:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	69ba      	ldr	r2, [r7, #24]
 8001b86:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001b88:	683b      	ldr	r3, [r7, #0]
 8001b8a:	685b      	ldr	r3, [r3, #4]
 8001b8c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	f000 80be 	beq.w	8001d12 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b96:	4b66      	ldr	r3, [pc, #408]	@ (8001d30 <HAL_GPIO_Init+0x324>)
 8001b98:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b9a:	4a65      	ldr	r2, [pc, #404]	@ (8001d30 <HAL_GPIO_Init+0x324>)
 8001b9c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001ba0:	6453      	str	r3, [r2, #68]	@ 0x44
 8001ba2:	4b63      	ldr	r3, [pc, #396]	@ (8001d30 <HAL_GPIO_Init+0x324>)
 8001ba4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ba6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001baa:	60fb      	str	r3, [r7, #12]
 8001bac:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8001bae:	4a61      	ldr	r2, [pc, #388]	@ (8001d34 <HAL_GPIO_Init+0x328>)
 8001bb0:	69fb      	ldr	r3, [r7, #28]
 8001bb2:	089b      	lsrs	r3, r3, #2
 8001bb4:	3302      	adds	r3, #2
 8001bb6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001bba:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001bbc:	69fb      	ldr	r3, [r7, #28]
 8001bbe:	f003 0303 	and.w	r3, r3, #3
 8001bc2:	009b      	lsls	r3, r3, #2
 8001bc4:	220f      	movs	r2, #15
 8001bc6:	fa02 f303 	lsl.w	r3, r2, r3
 8001bca:	43db      	mvns	r3, r3
 8001bcc:	69ba      	ldr	r2, [r7, #24]
 8001bce:	4013      	ands	r3, r2
 8001bd0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	4a58      	ldr	r2, [pc, #352]	@ (8001d38 <HAL_GPIO_Init+0x32c>)
 8001bd6:	4293      	cmp	r3, r2
 8001bd8:	d037      	beq.n	8001c4a <HAL_GPIO_Init+0x23e>
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	4a57      	ldr	r2, [pc, #348]	@ (8001d3c <HAL_GPIO_Init+0x330>)
 8001bde:	4293      	cmp	r3, r2
 8001be0:	d031      	beq.n	8001c46 <HAL_GPIO_Init+0x23a>
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	4a56      	ldr	r2, [pc, #344]	@ (8001d40 <HAL_GPIO_Init+0x334>)
 8001be6:	4293      	cmp	r3, r2
 8001be8:	d02b      	beq.n	8001c42 <HAL_GPIO_Init+0x236>
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	4a55      	ldr	r2, [pc, #340]	@ (8001d44 <HAL_GPIO_Init+0x338>)
 8001bee:	4293      	cmp	r3, r2
 8001bf0:	d025      	beq.n	8001c3e <HAL_GPIO_Init+0x232>
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	4a54      	ldr	r2, [pc, #336]	@ (8001d48 <HAL_GPIO_Init+0x33c>)
 8001bf6:	4293      	cmp	r3, r2
 8001bf8:	d01f      	beq.n	8001c3a <HAL_GPIO_Init+0x22e>
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	4a53      	ldr	r2, [pc, #332]	@ (8001d4c <HAL_GPIO_Init+0x340>)
 8001bfe:	4293      	cmp	r3, r2
 8001c00:	d019      	beq.n	8001c36 <HAL_GPIO_Init+0x22a>
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	4a52      	ldr	r2, [pc, #328]	@ (8001d50 <HAL_GPIO_Init+0x344>)
 8001c06:	4293      	cmp	r3, r2
 8001c08:	d013      	beq.n	8001c32 <HAL_GPIO_Init+0x226>
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	4a51      	ldr	r2, [pc, #324]	@ (8001d54 <HAL_GPIO_Init+0x348>)
 8001c0e:	4293      	cmp	r3, r2
 8001c10:	d00d      	beq.n	8001c2e <HAL_GPIO_Init+0x222>
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	4a50      	ldr	r2, [pc, #320]	@ (8001d58 <HAL_GPIO_Init+0x34c>)
 8001c16:	4293      	cmp	r3, r2
 8001c18:	d007      	beq.n	8001c2a <HAL_GPIO_Init+0x21e>
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	4a4f      	ldr	r2, [pc, #316]	@ (8001d5c <HAL_GPIO_Init+0x350>)
 8001c1e:	4293      	cmp	r3, r2
 8001c20:	d101      	bne.n	8001c26 <HAL_GPIO_Init+0x21a>
 8001c22:	2309      	movs	r3, #9
 8001c24:	e012      	b.n	8001c4c <HAL_GPIO_Init+0x240>
 8001c26:	230a      	movs	r3, #10
 8001c28:	e010      	b.n	8001c4c <HAL_GPIO_Init+0x240>
 8001c2a:	2308      	movs	r3, #8
 8001c2c:	e00e      	b.n	8001c4c <HAL_GPIO_Init+0x240>
 8001c2e:	2307      	movs	r3, #7
 8001c30:	e00c      	b.n	8001c4c <HAL_GPIO_Init+0x240>
 8001c32:	2306      	movs	r3, #6
 8001c34:	e00a      	b.n	8001c4c <HAL_GPIO_Init+0x240>
 8001c36:	2305      	movs	r3, #5
 8001c38:	e008      	b.n	8001c4c <HAL_GPIO_Init+0x240>
 8001c3a:	2304      	movs	r3, #4
 8001c3c:	e006      	b.n	8001c4c <HAL_GPIO_Init+0x240>
 8001c3e:	2303      	movs	r3, #3
 8001c40:	e004      	b.n	8001c4c <HAL_GPIO_Init+0x240>
 8001c42:	2302      	movs	r3, #2
 8001c44:	e002      	b.n	8001c4c <HAL_GPIO_Init+0x240>
 8001c46:	2301      	movs	r3, #1
 8001c48:	e000      	b.n	8001c4c <HAL_GPIO_Init+0x240>
 8001c4a:	2300      	movs	r3, #0
 8001c4c:	69fa      	ldr	r2, [r7, #28]
 8001c4e:	f002 0203 	and.w	r2, r2, #3
 8001c52:	0092      	lsls	r2, r2, #2
 8001c54:	4093      	lsls	r3, r2
 8001c56:	69ba      	ldr	r2, [r7, #24]
 8001c58:	4313      	orrs	r3, r2
 8001c5a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001c5c:	4935      	ldr	r1, [pc, #212]	@ (8001d34 <HAL_GPIO_Init+0x328>)
 8001c5e:	69fb      	ldr	r3, [r7, #28]
 8001c60:	089b      	lsrs	r3, r3, #2
 8001c62:	3302      	adds	r3, #2
 8001c64:	69ba      	ldr	r2, [r7, #24]
 8001c66:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001c6a:	4b3d      	ldr	r3, [pc, #244]	@ (8001d60 <HAL_GPIO_Init+0x354>)
 8001c6c:	689b      	ldr	r3, [r3, #8]
 8001c6e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c70:	693b      	ldr	r3, [r7, #16]
 8001c72:	43db      	mvns	r3, r3
 8001c74:	69ba      	ldr	r2, [r7, #24]
 8001c76:	4013      	ands	r3, r2
 8001c78:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001c7a:	683b      	ldr	r3, [r7, #0]
 8001c7c:	685b      	ldr	r3, [r3, #4]
 8001c7e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d003      	beq.n	8001c8e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001c86:	69ba      	ldr	r2, [r7, #24]
 8001c88:	693b      	ldr	r3, [r7, #16]
 8001c8a:	4313      	orrs	r3, r2
 8001c8c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001c8e:	4a34      	ldr	r2, [pc, #208]	@ (8001d60 <HAL_GPIO_Init+0x354>)
 8001c90:	69bb      	ldr	r3, [r7, #24]
 8001c92:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001c94:	4b32      	ldr	r3, [pc, #200]	@ (8001d60 <HAL_GPIO_Init+0x354>)
 8001c96:	68db      	ldr	r3, [r3, #12]
 8001c98:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c9a:	693b      	ldr	r3, [r7, #16]
 8001c9c:	43db      	mvns	r3, r3
 8001c9e:	69ba      	ldr	r2, [r7, #24]
 8001ca0:	4013      	ands	r3, r2
 8001ca2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001ca4:	683b      	ldr	r3, [r7, #0]
 8001ca6:	685b      	ldr	r3, [r3, #4]
 8001ca8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d003      	beq.n	8001cb8 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001cb0:	69ba      	ldr	r2, [r7, #24]
 8001cb2:	693b      	ldr	r3, [r7, #16]
 8001cb4:	4313      	orrs	r3, r2
 8001cb6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001cb8:	4a29      	ldr	r2, [pc, #164]	@ (8001d60 <HAL_GPIO_Init+0x354>)
 8001cba:	69bb      	ldr	r3, [r7, #24]
 8001cbc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001cbe:	4b28      	ldr	r3, [pc, #160]	@ (8001d60 <HAL_GPIO_Init+0x354>)
 8001cc0:	685b      	ldr	r3, [r3, #4]
 8001cc2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001cc4:	693b      	ldr	r3, [r7, #16]
 8001cc6:	43db      	mvns	r3, r3
 8001cc8:	69ba      	ldr	r2, [r7, #24]
 8001cca:	4013      	ands	r3, r2
 8001ccc:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001cce:	683b      	ldr	r3, [r7, #0]
 8001cd0:	685b      	ldr	r3, [r3, #4]
 8001cd2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d003      	beq.n	8001ce2 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001cda:	69ba      	ldr	r2, [r7, #24]
 8001cdc:	693b      	ldr	r3, [r7, #16]
 8001cde:	4313      	orrs	r3, r2
 8001ce0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001ce2:	4a1f      	ldr	r2, [pc, #124]	@ (8001d60 <HAL_GPIO_Init+0x354>)
 8001ce4:	69bb      	ldr	r3, [r7, #24]
 8001ce6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001ce8:	4b1d      	ldr	r3, [pc, #116]	@ (8001d60 <HAL_GPIO_Init+0x354>)
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001cee:	693b      	ldr	r3, [r7, #16]
 8001cf0:	43db      	mvns	r3, r3
 8001cf2:	69ba      	ldr	r2, [r7, #24]
 8001cf4:	4013      	ands	r3, r2
 8001cf6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001cf8:	683b      	ldr	r3, [r7, #0]
 8001cfa:	685b      	ldr	r3, [r3, #4]
 8001cfc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d003      	beq.n	8001d0c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001d04:	69ba      	ldr	r2, [r7, #24]
 8001d06:	693b      	ldr	r3, [r7, #16]
 8001d08:	4313      	orrs	r3, r2
 8001d0a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001d0c:	4a14      	ldr	r2, [pc, #80]	@ (8001d60 <HAL_GPIO_Init+0x354>)
 8001d0e:	69bb      	ldr	r3, [r7, #24]
 8001d10:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 8001d12:	69fb      	ldr	r3, [r7, #28]
 8001d14:	3301      	adds	r3, #1
 8001d16:	61fb      	str	r3, [r7, #28]
 8001d18:	69fb      	ldr	r3, [r7, #28]
 8001d1a:	2b0f      	cmp	r3, #15
 8001d1c:	f67f ae86 	bls.w	8001a2c <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8001d20:	bf00      	nop
 8001d22:	bf00      	nop
 8001d24:	3724      	adds	r7, #36	@ 0x24
 8001d26:	46bd      	mov	sp, r7
 8001d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d2c:	4770      	bx	lr
 8001d2e:	bf00      	nop
 8001d30:	40023800 	.word	0x40023800
 8001d34:	40013800 	.word	0x40013800
 8001d38:	40020000 	.word	0x40020000
 8001d3c:	40020400 	.word	0x40020400
 8001d40:	40020800 	.word	0x40020800
 8001d44:	40020c00 	.word	0x40020c00
 8001d48:	40021000 	.word	0x40021000
 8001d4c:	40021400 	.word	0x40021400
 8001d50:	40021800 	.word	0x40021800
 8001d54:	40021c00 	.word	0x40021c00
 8001d58:	40022000 	.word	0x40022000
 8001d5c:	40022400 	.word	0x40022400
 8001d60:	40013c00 	.word	0x40013c00

08001d64 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001d64:	b480      	push	{r7}
 8001d66:	b083      	sub	sp, #12
 8001d68:	af00      	add	r7, sp, #0
 8001d6a:	6078      	str	r0, [r7, #4]
 8001d6c:	460b      	mov	r3, r1
 8001d6e:	807b      	strh	r3, [r7, #2]
 8001d70:	4613      	mov	r3, r2
 8001d72:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001d74:	787b      	ldrb	r3, [r7, #1]
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d003      	beq.n	8001d82 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001d7a:	887a      	ldrh	r2, [r7, #2]
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8001d80:	e003      	b.n	8001d8a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8001d82:	887b      	ldrh	r3, [r7, #2]
 8001d84:	041a      	lsls	r2, r3, #16
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	619a      	str	r2, [r3, #24]
}
 8001d8a:	bf00      	nop
 8001d8c:	370c      	adds	r7, #12
 8001d8e:	46bd      	mov	sp, r7
 8001d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d94:	4770      	bx	lr
	...

08001d98 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8001d98:	b480      	push	{r7}
 8001d9a:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001d9c:	4b05      	ldr	r3, [pc, #20]	@ (8001db4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	4a04      	ldr	r2, [pc, #16]	@ (8001db4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001da2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001da6:	6013      	str	r3, [r2, #0]
}
 8001da8:	bf00      	nop
 8001daa:	46bd      	mov	sp, r7
 8001dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db0:	4770      	bx	lr
 8001db2:	bf00      	nop
 8001db4:	40007000 	.word	0x40007000

08001db8 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8001db8:	b580      	push	{r7, lr}
 8001dba:	b082      	sub	sp, #8
 8001dbc:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8001dbe:	2300      	movs	r3, #0
 8001dc0:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8001dc2:	4b23      	ldr	r3, [pc, #140]	@ (8001e50 <HAL_PWREx_EnableOverDrive+0x98>)
 8001dc4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001dc6:	4a22      	ldr	r2, [pc, #136]	@ (8001e50 <HAL_PWREx_EnableOverDrive+0x98>)
 8001dc8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001dcc:	6413      	str	r3, [r2, #64]	@ 0x40
 8001dce:	4b20      	ldr	r3, [pc, #128]	@ (8001e50 <HAL_PWREx_EnableOverDrive+0x98>)
 8001dd0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001dd2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001dd6:	603b      	str	r3, [r7, #0]
 8001dd8:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8001dda:	4b1e      	ldr	r3, [pc, #120]	@ (8001e54 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	4a1d      	ldr	r2, [pc, #116]	@ (8001e54 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001de0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001de4:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001de6:	f7ff fcf3 	bl	80017d0 <HAL_GetTick>
 8001dea:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001dec:	e009      	b.n	8001e02 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001dee:	f7ff fcef 	bl	80017d0 <HAL_GetTick>
 8001df2:	4602      	mov	r2, r0
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	1ad3      	subs	r3, r2, r3
 8001df8:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001dfc:	d901      	bls.n	8001e02 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8001dfe:	2303      	movs	r3, #3
 8001e00:	e022      	b.n	8001e48 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001e02:	4b14      	ldr	r3, [pc, #80]	@ (8001e54 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001e04:	685b      	ldr	r3, [r3, #4]
 8001e06:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001e0a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001e0e:	d1ee      	bne.n	8001dee <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8001e10:	4b10      	ldr	r3, [pc, #64]	@ (8001e54 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	4a0f      	ldr	r2, [pc, #60]	@ (8001e54 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001e16:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001e1a:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001e1c:	f7ff fcd8 	bl	80017d0 <HAL_GetTick>
 8001e20:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001e22:	e009      	b.n	8001e38 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001e24:	f7ff fcd4 	bl	80017d0 <HAL_GetTick>
 8001e28:	4602      	mov	r2, r0
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	1ad3      	subs	r3, r2, r3
 8001e2e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001e32:	d901      	bls.n	8001e38 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8001e34:	2303      	movs	r3, #3
 8001e36:	e007      	b.n	8001e48 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001e38:	4b06      	ldr	r3, [pc, #24]	@ (8001e54 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001e3a:	685b      	ldr	r3, [r3, #4]
 8001e3c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e40:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8001e44:	d1ee      	bne.n	8001e24 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8001e46:	2300      	movs	r3, #0
}
 8001e48:	4618      	mov	r0, r3
 8001e4a:	3708      	adds	r7, #8
 8001e4c:	46bd      	mov	sp, r7
 8001e4e:	bd80      	pop	{r7, pc}
 8001e50:	40023800 	.word	0x40023800
 8001e54:	40007000 	.word	0x40007000

08001e58 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001e58:	b580      	push	{r7, lr}
 8001e5a:	b086      	sub	sp, #24
 8001e5c:	af00      	add	r7, sp, #0
 8001e5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8001e60:	2300      	movs	r3, #0
 8001e62:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d101      	bne.n	8001e6e <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8001e6a:	2301      	movs	r3, #1
 8001e6c:	e29b      	b.n	80023a6 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	f003 0301 	and.w	r3, r3, #1
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	f000 8087 	beq.w	8001f8a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001e7c:	4b96      	ldr	r3, [pc, #600]	@ (80020d8 <HAL_RCC_OscConfig+0x280>)
 8001e7e:	689b      	ldr	r3, [r3, #8]
 8001e80:	f003 030c 	and.w	r3, r3, #12
 8001e84:	2b04      	cmp	r3, #4
 8001e86:	d00c      	beq.n	8001ea2 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001e88:	4b93      	ldr	r3, [pc, #588]	@ (80020d8 <HAL_RCC_OscConfig+0x280>)
 8001e8a:	689b      	ldr	r3, [r3, #8]
 8001e8c:	f003 030c 	and.w	r3, r3, #12
 8001e90:	2b08      	cmp	r3, #8
 8001e92:	d112      	bne.n	8001eba <HAL_RCC_OscConfig+0x62>
 8001e94:	4b90      	ldr	r3, [pc, #576]	@ (80020d8 <HAL_RCC_OscConfig+0x280>)
 8001e96:	685b      	ldr	r3, [r3, #4]
 8001e98:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001e9c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001ea0:	d10b      	bne.n	8001eba <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ea2:	4b8d      	ldr	r3, [pc, #564]	@ (80020d8 <HAL_RCC_OscConfig+0x280>)
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d06c      	beq.n	8001f88 <HAL_RCC_OscConfig+0x130>
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	685b      	ldr	r3, [r3, #4]
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d168      	bne.n	8001f88 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8001eb6:	2301      	movs	r3, #1
 8001eb8:	e275      	b.n	80023a6 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	685b      	ldr	r3, [r3, #4]
 8001ebe:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001ec2:	d106      	bne.n	8001ed2 <HAL_RCC_OscConfig+0x7a>
 8001ec4:	4b84      	ldr	r3, [pc, #528]	@ (80020d8 <HAL_RCC_OscConfig+0x280>)
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	4a83      	ldr	r2, [pc, #524]	@ (80020d8 <HAL_RCC_OscConfig+0x280>)
 8001eca:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001ece:	6013      	str	r3, [r2, #0]
 8001ed0:	e02e      	b.n	8001f30 <HAL_RCC_OscConfig+0xd8>
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	685b      	ldr	r3, [r3, #4]
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d10c      	bne.n	8001ef4 <HAL_RCC_OscConfig+0x9c>
 8001eda:	4b7f      	ldr	r3, [pc, #508]	@ (80020d8 <HAL_RCC_OscConfig+0x280>)
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	4a7e      	ldr	r2, [pc, #504]	@ (80020d8 <HAL_RCC_OscConfig+0x280>)
 8001ee0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001ee4:	6013      	str	r3, [r2, #0]
 8001ee6:	4b7c      	ldr	r3, [pc, #496]	@ (80020d8 <HAL_RCC_OscConfig+0x280>)
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	4a7b      	ldr	r2, [pc, #492]	@ (80020d8 <HAL_RCC_OscConfig+0x280>)
 8001eec:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001ef0:	6013      	str	r3, [r2, #0]
 8001ef2:	e01d      	b.n	8001f30 <HAL_RCC_OscConfig+0xd8>
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	685b      	ldr	r3, [r3, #4]
 8001ef8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001efc:	d10c      	bne.n	8001f18 <HAL_RCC_OscConfig+0xc0>
 8001efe:	4b76      	ldr	r3, [pc, #472]	@ (80020d8 <HAL_RCC_OscConfig+0x280>)
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	4a75      	ldr	r2, [pc, #468]	@ (80020d8 <HAL_RCC_OscConfig+0x280>)
 8001f04:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001f08:	6013      	str	r3, [r2, #0]
 8001f0a:	4b73      	ldr	r3, [pc, #460]	@ (80020d8 <HAL_RCC_OscConfig+0x280>)
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	4a72      	ldr	r2, [pc, #456]	@ (80020d8 <HAL_RCC_OscConfig+0x280>)
 8001f10:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001f14:	6013      	str	r3, [r2, #0]
 8001f16:	e00b      	b.n	8001f30 <HAL_RCC_OscConfig+0xd8>
 8001f18:	4b6f      	ldr	r3, [pc, #444]	@ (80020d8 <HAL_RCC_OscConfig+0x280>)
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	4a6e      	ldr	r2, [pc, #440]	@ (80020d8 <HAL_RCC_OscConfig+0x280>)
 8001f1e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001f22:	6013      	str	r3, [r2, #0]
 8001f24:	4b6c      	ldr	r3, [pc, #432]	@ (80020d8 <HAL_RCC_OscConfig+0x280>)
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	4a6b      	ldr	r2, [pc, #428]	@ (80020d8 <HAL_RCC_OscConfig+0x280>)
 8001f2a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001f2e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	685b      	ldr	r3, [r3, #4]
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d013      	beq.n	8001f60 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f38:	f7ff fc4a 	bl	80017d0 <HAL_GetTick>
 8001f3c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f3e:	e008      	b.n	8001f52 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001f40:	f7ff fc46 	bl	80017d0 <HAL_GetTick>
 8001f44:	4602      	mov	r2, r0
 8001f46:	693b      	ldr	r3, [r7, #16]
 8001f48:	1ad3      	subs	r3, r2, r3
 8001f4a:	2b64      	cmp	r3, #100	@ 0x64
 8001f4c:	d901      	bls.n	8001f52 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001f4e:	2303      	movs	r3, #3
 8001f50:	e229      	b.n	80023a6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f52:	4b61      	ldr	r3, [pc, #388]	@ (80020d8 <HAL_RCC_OscConfig+0x280>)
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d0f0      	beq.n	8001f40 <HAL_RCC_OscConfig+0xe8>
 8001f5e:	e014      	b.n	8001f8a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f60:	f7ff fc36 	bl	80017d0 <HAL_GetTick>
 8001f64:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f66:	e008      	b.n	8001f7a <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001f68:	f7ff fc32 	bl	80017d0 <HAL_GetTick>
 8001f6c:	4602      	mov	r2, r0
 8001f6e:	693b      	ldr	r3, [r7, #16]
 8001f70:	1ad3      	subs	r3, r2, r3
 8001f72:	2b64      	cmp	r3, #100	@ 0x64
 8001f74:	d901      	bls.n	8001f7a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8001f76:	2303      	movs	r3, #3
 8001f78:	e215      	b.n	80023a6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f7a:	4b57      	ldr	r3, [pc, #348]	@ (80020d8 <HAL_RCC_OscConfig+0x280>)
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d1f0      	bne.n	8001f68 <HAL_RCC_OscConfig+0x110>
 8001f86:	e000      	b.n	8001f8a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f88:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	f003 0302 	and.w	r3, r3, #2
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d069      	beq.n	800206a <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001f96:	4b50      	ldr	r3, [pc, #320]	@ (80020d8 <HAL_RCC_OscConfig+0x280>)
 8001f98:	689b      	ldr	r3, [r3, #8]
 8001f9a:	f003 030c 	and.w	r3, r3, #12
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d00b      	beq.n	8001fba <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001fa2:	4b4d      	ldr	r3, [pc, #308]	@ (80020d8 <HAL_RCC_OscConfig+0x280>)
 8001fa4:	689b      	ldr	r3, [r3, #8]
 8001fa6:	f003 030c 	and.w	r3, r3, #12
 8001faa:	2b08      	cmp	r3, #8
 8001fac:	d11c      	bne.n	8001fe8 <HAL_RCC_OscConfig+0x190>
 8001fae:	4b4a      	ldr	r3, [pc, #296]	@ (80020d8 <HAL_RCC_OscConfig+0x280>)
 8001fb0:	685b      	ldr	r3, [r3, #4]
 8001fb2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d116      	bne.n	8001fe8 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001fba:	4b47      	ldr	r3, [pc, #284]	@ (80020d8 <HAL_RCC_OscConfig+0x280>)
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	f003 0302 	and.w	r3, r3, #2
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d005      	beq.n	8001fd2 <HAL_RCC_OscConfig+0x17a>
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	68db      	ldr	r3, [r3, #12]
 8001fca:	2b01      	cmp	r3, #1
 8001fcc:	d001      	beq.n	8001fd2 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8001fce:	2301      	movs	r3, #1
 8001fd0:	e1e9      	b.n	80023a6 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001fd2:	4b41      	ldr	r3, [pc, #260]	@ (80020d8 <HAL_RCC_OscConfig+0x280>)
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	691b      	ldr	r3, [r3, #16]
 8001fde:	00db      	lsls	r3, r3, #3
 8001fe0:	493d      	ldr	r1, [pc, #244]	@ (80020d8 <HAL_RCC_OscConfig+0x280>)
 8001fe2:	4313      	orrs	r3, r2
 8001fe4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001fe6:	e040      	b.n	800206a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	68db      	ldr	r3, [r3, #12]
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d023      	beq.n	8002038 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001ff0:	4b39      	ldr	r3, [pc, #228]	@ (80020d8 <HAL_RCC_OscConfig+0x280>)
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	4a38      	ldr	r2, [pc, #224]	@ (80020d8 <HAL_RCC_OscConfig+0x280>)
 8001ff6:	f043 0301 	orr.w	r3, r3, #1
 8001ffa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ffc:	f7ff fbe8 	bl	80017d0 <HAL_GetTick>
 8002000:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002002:	e008      	b.n	8002016 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002004:	f7ff fbe4 	bl	80017d0 <HAL_GetTick>
 8002008:	4602      	mov	r2, r0
 800200a:	693b      	ldr	r3, [r7, #16]
 800200c:	1ad3      	subs	r3, r2, r3
 800200e:	2b02      	cmp	r3, #2
 8002010:	d901      	bls.n	8002016 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8002012:	2303      	movs	r3, #3
 8002014:	e1c7      	b.n	80023a6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002016:	4b30      	ldr	r3, [pc, #192]	@ (80020d8 <HAL_RCC_OscConfig+0x280>)
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	f003 0302 	and.w	r3, r3, #2
 800201e:	2b00      	cmp	r3, #0
 8002020:	d0f0      	beq.n	8002004 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002022:	4b2d      	ldr	r3, [pc, #180]	@ (80020d8 <HAL_RCC_OscConfig+0x280>)
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	691b      	ldr	r3, [r3, #16]
 800202e:	00db      	lsls	r3, r3, #3
 8002030:	4929      	ldr	r1, [pc, #164]	@ (80020d8 <HAL_RCC_OscConfig+0x280>)
 8002032:	4313      	orrs	r3, r2
 8002034:	600b      	str	r3, [r1, #0]
 8002036:	e018      	b.n	800206a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002038:	4b27      	ldr	r3, [pc, #156]	@ (80020d8 <HAL_RCC_OscConfig+0x280>)
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	4a26      	ldr	r2, [pc, #152]	@ (80020d8 <HAL_RCC_OscConfig+0x280>)
 800203e:	f023 0301 	bic.w	r3, r3, #1
 8002042:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002044:	f7ff fbc4 	bl	80017d0 <HAL_GetTick>
 8002048:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800204a:	e008      	b.n	800205e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800204c:	f7ff fbc0 	bl	80017d0 <HAL_GetTick>
 8002050:	4602      	mov	r2, r0
 8002052:	693b      	ldr	r3, [r7, #16]
 8002054:	1ad3      	subs	r3, r2, r3
 8002056:	2b02      	cmp	r3, #2
 8002058:	d901      	bls.n	800205e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800205a:	2303      	movs	r3, #3
 800205c:	e1a3      	b.n	80023a6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800205e:	4b1e      	ldr	r3, [pc, #120]	@ (80020d8 <HAL_RCC_OscConfig+0x280>)
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	f003 0302 	and.w	r3, r3, #2
 8002066:	2b00      	cmp	r3, #0
 8002068:	d1f0      	bne.n	800204c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	f003 0308 	and.w	r3, r3, #8
 8002072:	2b00      	cmp	r3, #0
 8002074:	d038      	beq.n	80020e8 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	695b      	ldr	r3, [r3, #20]
 800207a:	2b00      	cmp	r3, #0
 800207c:	d019      	beq.n	80020b2 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800207e:	4b16      	ldr	r3, [pc, #88]	@ (80020d8 <HAL_RCC_OscConfig+0x280>)
 8002080:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002082:	4a15      	ldr	r2, [pc, #84]	@ (80020d8 <HAL_RCC_OscConfig+0x280>)
 8002084:	f043 0301 	orr.w	r3, r3, #1
 8002088:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800208a:	f7ff fba1 	bl	80017d0 <HAL_GetTick>
 800208e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002090:	e008      	b.n	80020a4 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002092:	f7ff fb9d 	bl	80017d0 <HAL_GetTick>
 8002096:	4602      	mov	r2, r0
 8002098:	693b      	ldr	r3, [r7, #16]
 800209a:	1ad3      	subs	r3, r2, r3
 800209c:	2b02      	cmp	r3, #2
 800209e:	d901      	bls.n	80020a4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80020a0:	2303      	movs	r3, #3
 80020a2:	e180      	b.n	80023a6 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80020a4:	4b0c      	ldr	r3, [pc, #48]	@ (80020d8 <HAL_RCC_OscConfig+0x280>)
 80020a6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80020a8:	f003 0302 	and.w	r3, r3, #2
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d0f0      	beq.n	8002092 <HAL_RCC_OscConfig+0x23a>
 80020b0:	e01a      	b.n	80020e8 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80020b2:	4b09      	ldr	r3, [pc, #36]	@ (80020d8 <HAL_RCC_OscConfig+0x280>)
 80020b4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80020b6:	4a08      	ldr	r2, [pc, #32]	@ (80020d8 <HAL_RCC_OscConfig+0x280>)
 80020b8:	f023 0301 	bic.w	r3, r3, #1
 80020bc:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80020be:	f7ff fb87 	bl	80017d0 <HAL_GetTick>
 80020c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80020c4:	e00a      	b.n	80020dc <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80020c6:	f7ff fb83 	bl	80017d0 <HAL_GetTick>
 80020ca:	4602      	mov	r2, r0
 80020cc:	693b      	ldr	r3, [r7, #16]
 80020ce:	1ad3      	subs	r3, r2, r3
 80020d0:	2b02      	cmp	r3, #2
 80020d2:	d903      	bls.n	80020dc <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80020d4:	2303      	movs	r3, #3
 80020d6:	e166      	b.n	80023a6 <HAL_RCC_OscConfig+0x54e>
 80020d8:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80020dc:	4b92      	ldr	r3, [pc, #584]	@ (8002328 <HAL_RCC_OscConfig+0x4d0>)
 80020de:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80020e0:	f003 0302 	and.w	r3, r3, #2
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d1ee      	bne.n	80020c6 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	f003 0304 	and.w	r3, r3, #4
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	f000 80a4 	beq.w	800223e <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80020f6:	4b8c      	ldr	r3, [pc, #560]	@ (8002328 <HAL_RCC_OscConfig+0x4d0>)
 80020f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020fa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d10d      	bne.n	800211e <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8002102:	4b89      	ldr	r3, [pc, #548]	@ (8002328 <HAL_RCC_OscConfig+0x4d0>)
 8002104:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002106:	4a88      	ldr	r2, [pc, #544]	@ (8002328 <HAL_RCC_OscConfig+0x4d0>)
 8002108:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800210c:	6413      	str	r3, [r2, #64]	@ 0x40
 800210e:	4b86      	ldr	r3, [pc, #536]	@ (8002328 <HAL_RCC_OscConfig+0x4d0>)
 8002110:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002112:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002116:	60bb      	str	r3, [r7, #8]
 8002118:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800211a:	2301      	movs	r3, #1
 800211c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800211e:	4b83      	ldr	r3, [pc, #524]	@ (800232c <HAL_RCC_OscConfig+0x4d4>)
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002126:	2b00      	cmp	r3, #0
 8002128:	d118      	bne.n	800215c <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800212a:	4b80      	ldr	r3, [pc, #512]	@ (800232c <HAL_RCC_OscConfig+0x4d4>)
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	4a7f      	ldr	r2, [pc, #508]	@ (800232c <HAL_RCC_OscConfig+0x4d4>)
 8002130:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002134:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002136:	f7ff fb4b 	bl	80017d0 <HAL_GetTick>
 800213a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800213c:	e008      	b.n	8002150 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800213e:	f7ff fb47 	bl	80017d0 <HAL_GetTick>
 8002142:	4602      	mov	r2, r0
 8002144:	693b      	ldr	r3, [r7, #16]
 8002146:	1ad3      	subs	r3, r2, r3
 8002148:	2b64      	cmp	r3, #100	@ 0x64
 800214a:	d901      	bls.n	8002150 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 800214c:	2303      	movs	r3, #3
 800214e:	e12a      	b.n	80023a6 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002150:	4b76      	ldr	r3, [pc, #472]	@ (800232c <HAL_RCC_OscConfig+0x4d4>)
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002158:	2b00      	cmp	r3, #0
 800215a:	d0f0      	beq.n	800213e <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	689b      	ldr	r3, [r3, #8]
 8002160:	2b01      	cmp	r3, #1
 8002162:	d106      	bne.n	8002172 <HAL_RCC_OscConfig+0x31a>
 8002164:	4b70      	ldr	r3, [pc, #448]	@ (8002328 <HAL_RCC_OscConfig+0x4d0>)
 8002166:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002168:	4a6f      	ldr	r2, [pc, #444]	@ (8002328 <HAL_RCC_OscConfig+0x4d0>)
 800216a:	f043 0301 	orr.w	r3, r3, #1
 800216e:	6713      	str	r3, [r2, #112]	@ 0x70
 8002170:	e02d      	b.n	80021ce <HAL_RCC_OscConfig+0x376>
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	689b      	ldr	r3, [r3, #8]
 8002176:	2b00      	cmp	r3, #0
 8002178:	d10c      	bne.n	8002194 <HAL_RCC_OscConfig+0x33c>
 800217a:	4b6b      	ldr	r3, [pc, #428]	@ (8002328 <HAL_RCC_OscConfig+0x4d0>)
 800217c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800217e:	4a6a      	ldr	r2, [pc, #424]	@ (8002328 <HAL_RCC_OscConfig+0x4d0>)
 8002180:	f023 0301 	bic.w	r3, r3, #1
 8002184:	6713      	str	r3, [r2, #112]	@ 0x70
 8002186:	4b68      	ldr	r3, [pc, #416]	@ (8002328 <HAL_RCC_OscConfig+0x4d0>)
 8002188:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800218a:	4a67      	ldr	r2, [pc, #412]	@ (8002328 <HAL_RCC_OscConfig+0x4d0>)
 800218c:	f023 0304 	bic.w	r3, r3, #4
 8002190:	6713      	str	r3, [r2, #112]	@ 0x70
 8002192:	e01c      	b.n	80021ce <HAL_RCC_OscConfig+0x376>
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	689b      	ldr	r3, [r3, #8]
 8002198:	2b05      	cmp	r3, #5
 800219a:	d10c      	bne.n	80021b6 <HAL_RCC_OscConfig+0x35e>
 800219c:	4b62      	ldr	r3, [pc, #392]	@ (8002328 <HAL_RCC_OscConfig+0x4d0>)
 800219e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80021a0:	4a61      	ldr	r2, [pc, #388]	@ (8002328 <HAL_RCC_OscConfig+0x4d0>)
 80021a2:	f043 0304 	orr.w	r3, r3, #4
 80021a6:	6713      	str	r3, [r2, #112]	@ 0x70
 80021a8:	4b5f      	ldr	r3, [pc, #380]	@ (8002328 <HAL_RCC_OscConfig+0x4d0>)
 80021aa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80021ac:	4a5e      	ldr	r2, [pc, #376]	@ (8002328 <HAL_RCC_OscConfig+0x4d0>)
 80021ae:	f043 0301 	orr.w	r3, r3, #1
 80021b2:	6713      	str	r3, [r2, #112]	@ 0x70
 80021b4:	e00b      	b.n	80021ce <HAL_RCC_OscConfig+0x376>
 80021b6:	4b5c      	ldr	r3, [pc, #368]	@ (8002328 <HAL_RCC_OscConfig+0x4d0>)
 80021b8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80021ba:	4a5b      	ldr	r2, [pc, #364]	@ (8002328 <HAL_RCC_OscConfig+0x4d0>)
 80021bc:	f023 0301 	bic.w	r3, r3, #1
 80021c0:	6713      	str	r3, [r2, #112]	@ 0x70
 80021c2:	4b59      	ldr	r3, [pc, #356]	@ (8002328 <HAL_RCC_OscConfig+0x4d0>)
 80021c4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80021c6:	4a58      	ldr	r2, [pc, #352]	@ (8002328 <HAL_RCC_OscConfig+0x4d0>)
 80021c8:	f023 0304 	bic.w	r3, r3, #4
 80021cc:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	689b      	ldr	r3, [r3, #8]
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d015      	beq.n	8002202 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80021d6:	f7ff fafb 	bl	80017d0 <HAL_GetTick>
 80021da:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80021dc:	e00a      	b.n	80021f4 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80021de:	f7ff faf7 	bl	80017d0 <HAL_GetTick>
 80021e2:	4602      	mov	r2, r0
 80021e4:	693b      	ldr	r3, [r7, #16]
 80021e6:	1ad3      	subs	r3, r2, r3
 80021e8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80021ec:	4293      	cmp	r3, r2
 80021ee:	d901      	bls.n	80021f4 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80021f0:	2303      	movs	r3, #3
 80021f2:	e0d8      	b.n	80023a6 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80021f4:	4b4c      	ldr	r3, [pc, #304]	@ (8002328 <HAL_RCC_OscConfig+0x4d0>)
 80021f6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80021f8:	f003 0302 	and.w	r3, r3, #2
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d0ee      	beq.n	80021de <HAL_RCC_OscConfig+0x386>
 8002200:	e014      	b.n	800222c <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002202:	f7ff fae5 	bl	80017d0 <HAL_GetTick>
 8002206:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002208:	e00a      	b.n	8002220 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800220a:	f7ff fae1 	bl	80017d0 <HAL_GetTick>
 800220e:	4602      	mov	r2, r0
 8002210:	693b      	ldr	r3, [r7, #16]
 8002212:	1ad3      	subs	r3, r2, r3
 8002214:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002218:	4293      	cmp	r3, r2
 800221a:	d901      	bls.n	8002220 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 800221c:	2303      	movs	r3, #3
 800221e:	e0c2      	b.n	80023a6 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002220:	4b41      	ldr	r3, [pc, #260]	@ (8002328 <HAL_RCC_OscConfig+0x4d0>)
 8002222:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002224:	f003 0302 	and.w	r3, r3, #2
 8002228:	2b00      	cmp	r3, #0
 800222a:	d1ee      	bne.n	800220a <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800222c:	7dfb      	ldrb	r3, [r7, #23]
 800222e:	2b01      	cmp	r3, #1
 8002230:	d105      	bne.n	800223e <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002232:	4b3d      	ldr	r3, [pc, #244]	@ (8002328 <HAL_RCC_OscConfig+0x4d0>)
 8002234:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002236:	4a3c      	ldr	r2, [pc, #240]	@ (8002328 <HAL_RCC_OscConfig+0x4d0>)
 8002238:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800223c:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	699b      	ldr	r3, [r3, #24]
 8002242:	2b00      	cmp	r3, #0
 8002244:	f000 80ae 	beq.w	80023a4 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002248:	4b37      	ldr	r3, [pc, #220]	@ (8002328 <HAL_RCC_OscConfig+0x4d0>)
 800224a:	689b      	ldr	r3, [r3, #8]
 800224c:	f003 030c 	and.w	r3, r3, #12
 8002250:	2b08      	cmp	r3, #8
 8002252:	d06d      	beq.n	8002330 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	699b      	ldr	r3, [r3, #24]
 8002258:	2b02      	cmp	r3, #2
 800225a:	d14b      	bne.n	80022f4 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800225c:	4b32      	ldr	r3, [pc, #200]	@ (8002328 <HAL_RCC_OscConfig+0x4d0>)
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	4a31      	ldr	r2, [pc, #196]	@ (8002328 <HAL_RCC_OscConfig+0x4d0>)
 8002262:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002266:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002268:	f7ff fab2 	bl	80017d0 <HAL_GetTick>
 800226c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800226e:	e008      	b.n	8002282 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002270:	f7ff faae 	bl	80017d0 <HAL_GetTick>
 8002274:	4602      	mov	r2, r0
 8002276:	693b      	ldr	r3, [r7, #16]
 8002278:	1ad3      	subs	r3, r2, r3
 800227a:	2b02      	cmp	r3, #2
 800227c:	d901      	bls.n	8002282 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800227e:	2303      	movs	r3, #3
 8002280:	e091      	b.n	80023a6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002282:	4b29      	ldr	r3, [pc, #164]	@ (8002328 <HAL_RCC_OscConfig+0x4d0>)
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800228a:	2b00      	cmp	r3, #0
 800228c:	d1f0      	bne.n	8002270 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	69da      	ldr	r2, [r3, #28]
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	6a1b      	ldr	r3, [r3, #32]
 8002296:	431a      	orrs	r2, r3
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800229c:	019b      	lsls	r3, r3, #6
 800229e:	431a      	orrs	r2, r3
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80022a4:	085b      	lsrs	r3, r3, #1
 80022a6:	3b01      	subs	r3, #1
 80022a8:	041b      	lsls	r3, r3, #16
 80022aa:	431a      	orrs	r2, r3
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80022b0:	061b      	lsls	r3, r3, #24
 80022b2:	431a      	orrs	r2, r3
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022b8:	071b      	lsls	r3, r3, #28
 80022ba:	491b      	ldr	r1, [pc, #108]	@ (8002328 <HAL_RCC_OscConfig+0x4d0>)
 80022bc:	4313      	orrs	r3, r2
 80022be:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80022c0:	4b19      	ldr	r3, [pc, #100]	@ (8002328 <HAL_RCC_OscConfig+0x4d0>)
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	4a18      	ldr	r2, [pc, #96]	@ (8002328 <HAL_RCC_OscConfig+0x4d0>)
 80022c6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80022ca:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022cc:	f7ff fa80 	bl	80017d0 <HAL_GetTick>
 80022d0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80022d2:	e008      	b.n	80022e6 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80022d4:	f7ff fa7c 	bl	80017d0 <HAL_GetTick>
 80022d8:	4602      	mov	r2, r0
 80022da:	693b      	ldr	r3, [r7, #16]
 80022dc:	1ad3      	subs	r3, r2, r3
 80022de:	2b02      	cmp	r3, #2
 80022e0:	d901      	bls.n	80022e6 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 80022e2:	2303      	movs	r3, #3
 80022e4:	e05f      	b.n	80023a6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80022e6:	4b10      	ldr	r3, [pc, #64]	@ (8002328 <HAL_RCC_OscConfig+0x4d0>)
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d0f0      	beq.n	80022d4 <HAL_RCC_OscConfig+0x47c>
 80022f2:	e057      	b.n	80023a4 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80022f4:	4b0c      	ldr	r3, [pc, #48]	@ (8002328 <HAL_RCC_OscConfig+0x4d0>)
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	4a0b      	ldr	r2, [pc, #44]	@ (8002328 <HAL_RCC_OscConfig+0x4d0>)
 80022fa:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80022fe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002300:	f7ff fa66 	bl	80017d0 <HAL_GetTick>
 8002304:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002306:	e008      	b.n	800231a <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002308:	f7ff fa62 	bl	80017d0 <HAL_GetTick>
 800230c:	4602      	mov	r2, r0
 800230e:	693b      	ldr	r3, [r7, #16]
 8002310:	1ad3      	subs	r3, r2, r3
 8002312:	2b02      	cmp	r3, #2
 8002314:	d901      	bls.n	800231a <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8002316:	2303      	movs	r3, #3
 8002318:	e045      	b.n	80023a6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800231a:	4b03      	ldr	r3, [pc, #12]	@ (8002328 <HAL_RCC_OscConfig+0x4d0>)
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002322:	2b00      	cmp	r3, #0
 8002324:	d1f0      	bne.n	8002308 <HAL_RCC_OscConfig+0x4b0>
 8002326:	e03d      	b.n	80023a4 <HAL_RCC_OscConfig+0x54c>
 8002328:	40023800 	.word	0x40023800
 800232c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8002330:	4b1f      	ldr	r3, [pc, #124]	@ (80023b0 <HAL_RCC_OscConfig+0x558>)
 8002332:	685b      	ldr	r3, [r3, #4]
 8002334:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	699b      	ldr	r3, [r3, #24]
 800233a:	2b01      	cmp	r3, #1
 800233c:	d030      	beq.n	80023a0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002348:	429a      	cmp	r2, r3
 800234a:	d129      	bne.n	80023a0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002356:	429a      	cmp	r2, r3
 8002358:	d122      	bne.n	80023a0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800235a:	68fa      	ldr	r2, [r7, #12]
 800235c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002360:	4013      	ands	r3, r2
 8002362:	687a      	ldr	r2, [r7, #4]
 8002364:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002366:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002368:	4293      	cmp	r3, r2
 800236a:	d119      	bne.n	80023a0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002376:	085b      	lsrs	r3, r3, #1
 8002378:	3b01      	subs	r3, #1
 800237a:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800237c:	429a      	cmp	r2, r3
 800237e:	d10f      	bne.n	80023a0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800238a:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800238c:	429a      	cmp	r2, r3
 800238e:	d107      	bne.n	80023a0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800239a:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800239c:	429a      	cmp	r2, r3
 800239e:	d001      	beq.n	80023a4 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 80023a0:	2301      	movs	r3, #1
 80023a2:	e000      	b.n	80023a6 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 80023a4:	2300      	movs	r3, #0
}
 80023a6:	4618      	mov	r0, r3
 80023a8:	3718      	adds	r7, #24
 80023aa:	46bd      	mov	sp, r7
 80023ac:	bd80      	pop	{r7, pc}
 80023ae:	bf00      	nop
 80023b0:	40023800 	.word	0x40023800

080023b4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80023b4:	b580      	push	{r7, lr}
 80023b6:	b084      	sub	sp, #16
 80023b8:	af00      	add	r7, sp, #0
 80023ba:	6078      	str	r0, [r7, #4]
 80023bc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80023be:	2300      	movs	r3, #0
 80023c0:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d101      	bne.n	80023cc <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80023c8:	2301      	movs	r3, #1
 80023ca:	e0d0      	b.n	800256e <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80023cc:	4b6a      	ldr	r3, [pc, #424]	@ (8002578 <HAL_RCC_ClockConfig+0x1c4>)
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	f003 030f 	and.w	r3, r3, #15
 80023d4:	683a      	ldr	r2, [r7, #0]
 80023d6:	429a      	cmp	r2, r3
 80023d8:	d910      	bls.n	80023fc <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80023da:	4b67      	ldr	r3, [pc, #412]	@ (8002578 <HAL_RCC_ClockConfig+0x1c4>)
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	f023 020f 	bic.w	r2, r3, #15
 80023e2:	4965      	ldr	r1, [pc, #404]	@ (8002578 <HAL_RCC_ClockConfig+0x1c4>)
 80023e4:	683b      	ldr	r3, [r7, #0]
 80023e6:	4313      	orrs	r3, r2
 80023e8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80023ea:	4b63      	ldr	r3, [pc, #396]	@ (8002578 <HAL_RCC_ClockConfig+0x1c4>)
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	f003 030f 	and.w	r3, r3, #15
 80023f2:	683a      	ldr	r2, [r7, #0]
 80023f4:	429a      	cmp	r2, r3
 80023f6:	d001      	beq.n	80023fc <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80023f8:	2301      	movs	r3, #1
 80023fa:	e0b8      	b.n	800256e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	f003 0302 	and.w	r3, r3, #2
 8002404:	2b00      	cmp	r3, #0
 8002406:	d020      	beq.n	800244a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	f003 0304 	and.w	r3, r3, #4
 8002410:	2b00      	cmp	r3, #0
 8002412:	d005      	beq.n	8002420 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002414:	4b59      	ldr	r3, [pc, #356]	@ (800257c <HAL_RCC_ClockConfig+0x1c8>)
 8002416:	689b      	ldr	r3, [r3, #8]
 8002418:	4a58      	ldr	r2, [pc, #352]	@ (800257c <HAL_RCC_ClockConfig+0x1c8>)
 800241a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800241e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	f003 0308 	and.w	r3, r3, #8
 8002428:	2b00      	cmp	r3, #0
 800242a:	d005      	beq.n	8002438 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800242c:	4b53      	ldr	r3, [pc, #332]	@ (800257c <HAL_RCC_ClockConfig+0x1c8>)
 800242e:	689b      	ldr	r3, [r3, #8]
 8002430:	4a52      	ldr	r2, [pc, #328]	@ (800257c <HAL_RCC_ClockConfig+0x1c8>)
 8002432:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002436:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002438:	4b50      	ldr	r3, [pc, #320]	@ (800257c <HAL_RCC_ClockConfig+0x1c8>)
 800243a:	689b      	ldr	r3, [r3, #8]
 800243c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	689b      	ldr	r3, [r3, #8]
 8002444:	494d      	ldr	r1, [pc, #308]	@ (800257c <HAL_RCC_ClockConfig+0x1c8>)
 8002446:	4313      	orrs	r3, r2
 8002448:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	f003 0301 	and.w	r3, r3, #1
 8002452:	2b00      	cmp	r3, #0
 8002454:	d040      	beq.n	80024d8 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	685b      	ldr	r3, [r3, #4]
 800245a:	2b01      	cmp	r3, #1
 800245c:	d107      	bne.n	800246e <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800245e:	4b47      	ldr	r3, [pc, #284]	@ (800257c <HAL_RCC_ClockConfig+0x1c8>)
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002466:	2b00      	cmp	r3, #0
 8002468:	d115      	bne.n	8002496 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800246a:	2301      	movs	r3, #1
 800246c:	e07f      	b.n	800256e <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	685b      	ldr	r3, [r3, #4]
 8002472:	2b02      	cmp	r3, #2
 8002474:	d107      	bne.n	8002486 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002476:	4b41      	ldr	r3, [pc, #260]	@ (800257c <HAL_RCC_ClockConfig+0x1c8>)
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800247e:	2b00      	cmp	r3, #0
 8002480:	d109      	bne.n	8002496 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002482:	2301      	movs	r3, #1
 8002484:	e073      	b.n	800256e <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002486:	4b3d      	ldr	r3, [pc, #244]	@ (800257c <HAL_RCC_ClockConfig+0x1c8>)
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	f003 0302 	and.w	r3, r3, #2
 800248e:	2b00      	cmp	r3, #0
 8002490:	d101      	bne.n	8002496 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002492:	2301      	movs	r3, #1
 8002494:	e06b      	b.n	800256e <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002496:	4b39      	ldr	r3, [pc, #228]	@ (800257c <HAL_RCC_ClockConfig+0x1c8>)
 8002498:	689b      	ldr	r3, [r3, #8]
 800249a:	f023 0203 	bic.w	r2, r3, #3
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	685b      	ldr	r3, [r3, #4]
 80024a2:	4936      	ldr	r1, [pc, #216]	@ (800257c <HAL_RCC_ClockConfig+0x1c8>)
 80024a4:	4313      	orrs	r3, r2
 80024a6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80024a8:	f7ff f992 	bl	80017d0 <HAL_GetTick>
 80024ac:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80024ae:	e00a      	b.n	80024c6 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80024b0:	f7ff f98e 	bl	80017d0 <HAL_GetTick>
 80024b4:	4602      	mov	r2, r0
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	1ad3      	subs	r3, r2, r3
 80024ba:	f241 3288 	movw	r2, #5000	@ 0x1388
 80024be:	4293      	cmp	r3, r2
 80024c0:	d901      	bls.n	80024c6 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80024c2:	2303      	movs	r3, #3
 80024c4:	e053      	b.n	800256e <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80024c6:	4b2d      	ldr	r3, [pc, #180]	@ (800257c <HAL_RCC_ClockConfig+0x1c8>)
 80024c8:	689b      	ldr	r3, [r3, #8]
 80024ca:	f003 020c 	and.w	r2, r3, #12
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	685b      	ldr	r3, [r3, #4]
 80024d2:	009b      	lsls	r3, r3, #2
 80024d4:	429a      	cmp	r2, r3
 80024d6:	d1eb      	bne.n	80024b0 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80024d8:	4b27      	ldr	r3, [pc, #156]	@ (8002578 <HAL_RCC_ClockConfig+0x1c4>)
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	f003 030f 	and.w	r3, r3, #15
 80024e0:	683a      	ldr	r2, [r7, #0]
 80024e2:	429a      	cmp	r2, r3
 80024e4:	d210      	bcs.n	8002508 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80024e6:	4b24      	ldr	r3, [pc, #144]	@ (8002578 <HAL_RCC_ClockConfig+0x1c4>)
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	f023 020f 	bic.w	r2, r3, #15
 80024ee:	4922      	ldr	r1, [pc, #136]	@ (8002578 <HAL_RCC_ClockConfig+0x1c4>)
 80024f0:	683b      	ldr	r3, [r7, #0]
 80024f2:	4313      	orrs	r3, r2
 80024f4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80024f6:	4b20      	ldr	r3, [pc, #128]	@ (8002578 <HAL_RCC_ClockConfig+0x1c4>)
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	f003 030f 	and.w	r3, r3, #15
 80024fe:	683a      	ldr	r2, [r7, #0]
 8002500:	429a      	cmp	r2, r3
 8002502:	d001      	beq.n	8002508 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8002504:	2301      	movs	r3, #1
 8002506:	e032      	b.n	800256e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	f003 0304 	and.w	r3, r3, #4
 8002510:	2b00      	cmp	r3, #0
 8002512:	d008      	beq.n	8002526 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002514:	4b19      	ldr	r3, [pc, #100]	@ (800257c <HAL_RCC_ClockConfig+0x1c8>)
 8002516:	689b      	ldr	r3, [r3, #8]
 8002518:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	68db      	ldr	r3, [r3, #12]
 8002520:	4916      	ldr	r1, [pc, #88]	@ (800257c <HAL_RCC_ClockConfig+0x1c8>)
 8002522:	4313      	orrs	r3, r2
 8002524:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	f003 0308 	and.w	r3, r3, #8
 800252e:	2b00      	cmp	r3, #0
 8002530:	d009      	beq.n	8002546 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002532:	4b12      	ldr	r3, [pc, #72]	@ (800257c <HAL_RCC_ClockConfig+0x1c8>)
 8002534:	689b      	ldr	r3, [r3, #8]
 8002536:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	691b      	ldr	r3, [r3, #16]
 800253e:	00db      	lsls	r3, r3, #3
 8002540:	490e      	ldr	r1, [pc, #56]	@ (800257c <HAL_RCC_ClockConfig+0x1c8>)
 8002542:	4313      	orrs	r3, r2
 8002544:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002546:	f000 f821 	bl	800258c <HAL_RCC_GetSysClockFreq>
 800254a:	4602      	mov	r2, r0
 800254c:	4b0b      	ldr	r3, [pc, #44]	@ (800257c <HAL_RCC_ClockConfig+0x1c8>)
 800254e:	689b      	ldr	r3, [r3, #8]
 8002550:	091b      	lsrs	r3, r3, #4
 8002552:	f003 030f 	and.w	r3, r3, #15
 8002556:	490a      	ldr	r1, [pc, #40]	@ (8002580 <HAL_RCC_ClockConfig+0x1cc>)
 8002558:	5ccb      	ldrb	r3, [r1, r3]
 800255a:	fa22 f303 	lsr.w	r3, r2, r3
 800255e:	4a09      	ldr	r2, [pc, #36]	@ (8002584 <HAL_RCC_ClockConfig+0x1d0>)
 8002560:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002562:	4b09      	ldr	r3, [pc, #36]	@ (8002588 <HAL_RCC_ClockConfig+0x1d4>)
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	4618      	mov	r0, r3
 8002568:	f7ff f8ee 	bl	8001748 <HAL_InitTick>

  return HAL_OK;
 800256c:	2300      	movs	r3, #0
}
 800256e:	4618      	mov	r0, r3
 8002570:	3710      	adds	r7, #16
 8002572:	46bd      	mov	sp, r7
 8002574:	bd80      	pop	{r7, pc}
 8002576:	bf00      	nop
 8002578:	40023c00 	.word	0x40023c00
 800257c:	40023800 	.word	0x40023800
 8002580:	08005fe0 	.word	0x08005fe0
 8002584:	20000018 	.word	0x20000018
 8002588:	2000001c 	.word	0x2000001c

0800258c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800258c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002590:	b094      	sub	sp, #80	@ 0x50
 8002592:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8002594:	2300      	movs	r3, #0
 8002596:	647b      	str	r3, [r7, #68]	@ 0x44
 8002598:	2300      	movs	r3, #0
 800259a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800259c:	2300      	movs	r3, #0
 800259e:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0;
 80025a0:	2300      	movs	r3, #0
 80025a2:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80025a4:	4b79      	ldr	r3, [pc, #484]	@ (800278c <HAL_RCC_GetSysClockFreq+0x200>)
 80025a6:	689b      	ldr	r3, [r3, #8]
 80025a8:	f003 030c 	and.w	r3, r3, #12
 80025ac:	2b08      	cmp	r3, #8
 80025ae:	d00d      	beq.n	80025cc <HAL_RCC_GetSysClockFreq+0x40>
 80025b0:	2b08      	cmp	r3, #8
 80025b2:	f200 80e1 	bhi.w	8002778 <HAL_RCC_GetSysClockFreq+0x1ec>
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d002      	beq.n	80025c0 <HAL_RCC_GetSysClockFreq+0x34>
 80025ba:	2b04      	cmp	r3, #4
 80025bc:	d003      	beq.n	80025c6 <HAL_RCC_GetSysClockFreq+0x3a>
 80025be:	e0db      	b.n	8002778 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80025c0:	4b73      	ldr	r3, [pc, #460]	@ (8002790 <HAL_RCC_GetSysClockFreq+0x204>)
 80025c2:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80025c4:	e0db      	b.n	800277e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80025c6:	4b73      	ldr	r3, [pc, #460]	@ (8002794 <HAL_RCC_GetSysClockFreq+0x208>)
 80025c8:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80025ca:	e0d8      	b.n	800277e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80025cc:	4b6f      	ldr	r3, [pc, #444]	@ (800278c <HAL_RCC_GetSysClockFreq+0x200>)
 80025ce:	685b      	ldr	r3, [r3, #4]
 80025d0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80025d4:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80025d6:	4b6d      	ldr	r3, [pc, #436]	@ (800278c <HAL_RCC_GetSysClockFreq+0x200>)
 80025d8:	685b      	ldr	r3, [r3, #4]
 80025da:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d063      	beq.n	80026aa <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80025e2:	4b6a      	ldr	r3, [pc, #424]	@ (800278c <HAL_RCC_GetSysClockFreq+0x200>)
 80025e4:	685b      	ldr	r3, [r3, #4]
 80025e6:	099b      	lsrs	r3, r3, #6
 80025e8:	2200      	movs	r2, #0
 80025ea:	63bb      	str	r3, [r7, #56]	@ 0x38
 80025ec:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80025ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80025f0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80025f4:	633b      	str	r3, [r7, #48]	@ 0x30
 80025f6:	2300      	movs	r3, #0
 80025f8:	637b      	str	r3, [r7, #52]	@ 0x34
 80025fa:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80025fe:	4622      	mov	r2, r4
 8002600:	462b      	mov	r3, r5
 8002602:	f04f 0000 	mov.w	r0, #0
 8002606:	f04f 0100 	mov.w	r1, #0
 800260a:	0159      	lsls	r1, r3, #5
 800260c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002610:	0150      	lsls	r0, r2, #5
 8002612:	4602      	mov	r2, r0
 8002614:	460b      	mov	r3, r1
 8002616:	4621      	mov	r1, r4
 8002618:	1a51      	subs	r1, r2, r1
 800261a:	6139      	str	r1, [r7, #16]
 800261c:	4629      	mov	r1, r5
 800261e:	eb63 0301 	sbc.w	r3, r3, r1
 8002622:	617b      	str	r3, [r7, #20]
 8002624:	f04f 0200 	mov.w	r2, #0
 8002628:	f04f 0300 	mov.w	r3, #0
 800262c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002630:	4659      	mov	r1, fp
 8002632:	018b      	lsls	r3, r1, #6
 8002634:	4651      	mov	r1, sl
 8002636:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800263a:	4651      	mov	r1, sl
 800263c:	018a      	lsls	r2, r1, #6
 800263e:	4651      	mov	r1, sl
 8002640:	ebb2 0801 	subs.w	r8, r2, r1
 8002644:	4659      	mov	r1, fp
 8002646:	eb63 0901 	sbc.w	r9, r3, r1
 800264a:	f04f 0200 	mov.w	r2, #0
 800264e:	f04f 0300 	mov.w	r3, #0
 8002652:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002656:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800265a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800265e:	4690      	mov	r8, r2
 8002660:	4699      	mov	r9, r3
 8002662:	4623      	mov	r3, r4
 8002664:	eb18 0303 	adds.w	r3, r8, r3
 8002668:	60bb      	str	r3, [r7, #8]
 800266a:	462b      	mov	r3, r5
 800266c:	eb49 0303 	adc.w	r3, r9, r3
 8002670:	60fb      	str	r3, [r7, #12]
 8002672:	f04f 0200 	mov.w	r2, #0
 8002676:	f04f 0300 	mov.w	r3, #0
 800267a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800267e:	4629      	mov	r1, r5
 8002680:	024b      	lsls	r3, r1, #9
 8002682:	4621      	mov	r1, r4
 8002684:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002688:	4621      	mov	r1, r4
 800268a:	024a      	lsls	r2, r1, #9
 800268c:	4610      	mov	r0, r2
 800268e:	4619      	mov	r1, r3
 8002690:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002692:	2200      	movs	r2, #0
 8002694:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002696:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002698:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800269c:	f7fd fe20 	bl	80002e0 <__aeabi_uldivmod>
 80026a0:	4602      	mov	r2, r0
 80026a2:	460b      	mov	r3, r1
 80026a4:	4613      	mov	r3, r2
 80026a6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80026a8:	e058      	b.n	800275c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80026aa:	4b38      	ldr	r3, [pc, #224]	@ (800278c <HAL_RCC_GetSysClockFreq+0x200>)
 80026ac:	685b      	ldr	r3, [r3, #4]
 80026ae:	099b      	lsrs	r3, r3, #6
 80026b0:	2200      	movs	r2, #0
 80026b2:	4618      	mov	r0, r3
 80026b4:	4611      	mov	r1, r2
 80026b6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80026ba:	623b      	str	r3, [r7, #32]
 80026bc:	2300      	movs	r3, #0
 80026be:	627b      	str	r3, [r7, #36]	@ 0x24
 80026c0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80026c4:	4642      	mov	r2, r8
 80026c6:	464b      	mov	r3, r9
 80026c8:	f04f 0000 	mov.w	r0, #0
 80026cc:	f04f 0100 	mov.w	r1, #0
 80026d0:	0159      	lsls	r1, r3, #5
 80026d2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80026d6:	0150      	lsls	r0, r2, #5
 80026d8:	4602      	mov	r2, r0
 80026da:	460b      	mov	r3, r1
 80026dc:	4641      	mov	r1, r8
 80026de:	ebb2 0a01 	subs.w	sl, r2, r1
 80026e2:	4649      	mov	r1, r9
 80026e4:	eb63 0b01 	sbc.w	fp, r3, r1
 80026e8:	f04f 0200 	mov.w	r2, #0
 80026ec:	f04f 0300 	mov.w	r3, #0
 80026f0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80026f4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80026f8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80026fc:	ebb2 040a 	subs.w	r4, r2, sl
 8002700:	eb63 050b 	sbc.w	r5, r3, fp
 8002704:	f04f 0200 	mov.w	r2, #0
 8002708:	f04f 0300 	mov.w	r3, #0
 800270c:	00eb      	lsls	r3, r5, #3
 800270e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002712:	00e2      	lsls	r2, r4, #3
 8002714:	4614      	mov	r4, r2
 8002716:	461d      	mov	r5, r3
 8002718:	4643      	mov	r3, r8
 800271a:	18e3      	adds	r3, r4, r3
 800271c:	603b      	str	r3, [r7, #0]
 800271e:	464b      	mov	r3, r9
 8002720:	eb45 0303 	adc.w	r3, r5, r3
 8002724:	607b      	str	r3, [r7, #4]
 8002726:	f04f 0200 	mov.w	r2, #0
 800272a:	f04f 0300 	mov.w	r3, #0
 800272e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002732:	4629      	mov	r1, r5
 8002734:	028b      	lsls	r3, r1, #10
 8002736:	4621      	mov	r1, r4
 8002738:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800273c:	4621      	mov	r1, r4
 800273e:	028a      	lsls	r2, r1, #10
 8002740:	4610      	mov	r0, r2
 8002742:	4619      	mov	r1, r3
 8002744:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002746:	2200      	movs	r2, #0
 8002748:	61bb      	str	r3, [r7, #24]
 800274a:	61fa      	str	r2, [r7, #28]
 800274c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002750:	f7fd fdc6 	bl	80002e0 <__aeabi_uldivmod>
 8002754:	4602      	mov	r2, r0
 8002756:	460b      	mov	r3, r1
 8002758:	4613      	mov	r3, r2
 800275a:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 800275c:	4b0b      	ldr	r3, [pc, #44]	@ (800278c <HAL_RCC_GetSysClockFreq+0x200>)
 800275e:	685b      	ldr	r3, [r3, #4]
 8002760:	0c1b      	lsrs	r3, r3, #16
 8002762:	f003 0303 	and.w	r3, r3, #3
 8002766:	3301      	adds	r3, #1
 8002768:	005b      	lsls	r3, r3, #1
 800276a:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 800276c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800276e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002770:	fbb2 f3f3 	udiv	r3, r2, r3
 8002774:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002776:	e002      	b.n	800277e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002778:	4b05      	ldr	r3, [pc, #20]	@ (8002790 <HAL_RCC_GetSysClockFreq+0x204>)
 800277a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800277c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800277e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8002780:	4618      	mov	r0, r3
 8002782:	3750      	adds	r7, #80	@ 0x50
 8002784:	46bd      	mov	sp, r7
 8002786:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800278a:	bf00      	nop
 800278c:	40023800 	.word	0x40023800
 8002790:	00f42400 	.word	0x00f42400
 8002794:	007a1200 	.word	0x007a1200

08002798 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002798:	b480      	push	{r7}
 800279a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800279c:	4b03      	ldr	r3, [pc, #12]	@ (80027ac <HAL_RCC_GetHCLKFreq+0x14>)
 800279e:	681b      	ldr	r3, [r3, #0]
}
 80027a0:	4618      	mov	r0, r3
 80027a2:	46bd      	mov	sp, r7
 80027a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a8:	4770      	bx	lr
 80027aa:	bf00      	nop
 80027ac:	20000018 	.word	0x20000018

080027b0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80027b0:	b580      	push	{r7, lr}
 80027b2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80027b4:	f7ff fff0 	bl	8002798 <HAL_RCC_GetHCLKFreq>
 80027b8:	4602      	mov	r2, r0
 80027ba:	4b05      	ldr	r3, [pc, #20]	@ (80027d0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80027bc:	689b      	ldr	r3, [r3, #8]
 80027be:	0a9b      	lsrs	r3, r3, #10
 80027c0:	f003 0307 	and.w	r3, r3, #7
 80027c4:	4903      	ldr	r1, [pc, #12]	@ (80027d4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80027c6:	5ccb      	ldrb	r3, [r1, r3]
 80027c8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80027cc:	4618      	mov	r0, r3
 80027ce:	bd80      	pop	{r7, pc}
 80027d0:	40023800 	.word	0x40023800
 80027d4:	08005ff0 	.word	0x08005ff0

080027d8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80027d8:	b580      	push	{r7, lr}
 80027da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80027dc:	f7ff ffdc 	bl	8002798 <HAL_RCC_GetHCLKFreq>
 80027e0:	4602      	mov	r2, r0
 80027e2:	4b05      	ldr	r3, [pc, #20]	@ (80027f8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80027e4:	689b      	ldr	r3, [r3, #8]
 80027e6:	0b5b      	lsrs	r3, r3, #13
 80027e8:	f003 0307 	and.w	r3, r3, #7
 80027ec:	4903      	ldr	r1, [pc, #12]	@ (80027fc <HAL_RCC_GetPCLK2Freq+0x24>)
 80027ee:	5ccb      	ldrb	r3, [r1, r3]
 80027f0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80027f4:	4618      	mov	r0, r3
 80027f6:	bd80      	pop	{r7, pc}
 80027f8:	40023800 	.word	0x40023800
 80027fc:	08005ff0 	.word	0x08005ff0

08002800 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002800:	b580      	push	{r7, lr}
 8002802:	b088      	sub	sp, #32
 8002804:	af00      	add	r7, sp, #0
 8002806:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8002808:	2300      	movs	r3, #0
 800280a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 800280c:	2300      	movs	r3, #0
 800280e:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8002810:	2300      	movs	r3, #0
 8002812:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8002814:	2300      	movs	r3, #0
 8002816:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8002818:	2300      	movs	r3, #0
 800281a:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	f003 0301 	and.w	r3, r3, #1
 8002824:	2b00      	cmp	r3, #0
 8002826:	d012      	beq.n	800284e <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002828:	4b69      	ldr	r3, [pc, #420]	@ (80029d0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800282a:	689b      	ldr	r3, [r3, #8]
 800282c:	4a68      	ldr	r2, [pc, #416]	@ (80029d0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800282e:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8002832:	6093      	str	r3, [r2, #8]
 8002834:	4b66      	ldr	r3, [pc, #408]	@ (80029d0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002836:	689a      	ldr	r2, [r3, #8]
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800283c:	4964      	ldr	r1, [pc, #400]	@ (80029d0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800283e:	4313      	orrs	r3, r2
 8002840:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002846:	2b00      	cmp	r3, #0
 8002848:	d101      	bne.n	800284e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 800284a:	2301      	movs	r3, #1
 800284c:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002856:	2b00      	cmp	r3, #0
 8002858:	d017      	beq.n	800288a <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800285a:	4b5d      	ldr	r3, [pc, #372]	@ (80029d0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800285c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002860:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002868:	4959      	ldr	r1, [pc, #356]	@ (80029d0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800286a:	4313      	orrs	r3, r2
 800286c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002874:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002878:	d101      	bne.n	800287e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 800287a:	2301      	movs	r3, #1
 800287c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002882:	2b00      	cmp	r3, #0
 8002884:	d101      	bne.n	800288a <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8002886:	2301      	movs	r3, #1
 8002888:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002892:	2b00      	cmp	r3, #0
 8002894:	d017      	beq.n	80028c6 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002896:	4b4e      	ldr	r3, [pc, #312]	@ (80029d0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002898:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800289c:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028a4:	494a      	ldr	r1, [pc, #296]	@ (80029d0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80028a6:	4313      	orrs	r3, r2
 80028a8:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028b0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80028b4:	d101      	bne.n	80028ba <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 80028b6:	2301      	movs	r3, #1
 80028b8:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d101      	bne.n	80028c6 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 80028c2:	2301      	movs	r3, #1
 80028c4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d001      	beq.n	80028d6 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 80028d2:	2301      	movs	r3, #1
 80028d4:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	f003 0320 	and.w	r3, r3, #32
 80028de:	2b00      	cmp	r3, #0
 80028e0:	f000 808b 	beq.w	80029fa <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80028e4:	4b3a      	ldr	r3, [pc, #232]	@ (80029d0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80028e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028e8:	4a39      	ldr	r2, [pc, #228]	@ (80029d0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80028ea:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80028ee:	6413      	str	r3, [r2, #64]	@ 0x40
 80028f0:	4b37      	ldr	r3, [pc, #220]	@ (80029d0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80028f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028f4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80028f8:	60bb      	str	r3, [r7, #8]
 80028fa:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80028fc:	4b35      	ldr	r3, [pc, #212]	@ (80029d4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	4a34      	ldr	r2, [pc, #208]	@ (80029d4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002902:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002906:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002908:	f7fe ff62 	bl	80017d0 <HAL_GetTick>
 800290c:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800290e:	e008      	b.n	8002922 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002910:	f7fe ff5e 	bl	80017d0 <HAL_GetTick>
 8002914:	4602      	mov	r2, r0
 8002916:	697b      	ldr	r3, [r7, #20]
 8002918:	1ad3      	subs	r3, r2, r3
 800291a:	2b64      	cmp	r3, #100	@ 0x64
 800291c:	d901      	bls.n	8002922 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 800291e:	2303      	movs	r3, #3
 8002920:	e38f      	b.n	8003042 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002922:	4b2c      	ldr	r3, [pc, #176]	@ (80029d4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800292a:	2b00      	cmp	r3, #0
 800292c:	d0f0      	beq.n	8002910 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800292e:	4b28      	ldr	r3, [pc, #160]	@ (80029d0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002930:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002932:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002936:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002938:	693b      	ldr	r3, [r7, #16]
 800293a:	2b00      	cmp	r3, #0
 800293c:	d035      	beq.n	80029aa <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002942:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002946:	693a      	ldr	r2, [r7, #16]
 8002948:	429a      	cmp	r2, r3
 800294a:	d02e      	beq.n	80029aa <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800294c:	4b20      	ldr	r3, [pc, #128]	@ (80029d0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800294e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002950:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002954:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002956:	4b1e      	ldr	r3, [pc, #120]	@ (80029d0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002958:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800295a:	4a1d      	ldr	r2, [pc, #116]	@ (80029d0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800295c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002960:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002962:	4b1b      	ldr	r3, [pc, #108]	@ (80029d0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002964:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002966:	4a1a      	ldr	r2, [pc, #104]	@ (80029d0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002968:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800296c:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800296e:	4a18      	ldr	r2, [pc, #96]	@ (80029d0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002970:	693b      	ldr	r3, [r7, #16]
 8002972:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002974:	4b16      	ldr	r3, [pc, #88]	@ (80029d0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002976:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002978:	f003 0301 	and.w	r3, r3, #1
 800297c:	2b01      	cmp	r3, #1
 800297e:	d114      	bne.n	80029aa <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002980:	f7fe ff26 	bl	80017d0 <HAL_GetTick>
 8002984:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002986:	e00a      	b.n	800299e <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002988:	f7fe ff22 	bl	80017d0 <HAL_GetTick>
 800298c:	4602      	mov	r2, r0
 800298e:	697b      	ldr	r3, [r7, #20]
 8002990:	1ad3      	subs	r3, r2, r3
 8002992:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002996:	4293      	cmp	r3, r2
 8002998:	d901      	bls.n	800299e <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800299a:	2303      	movs	r3, #3
 800299c:	e351      	b.n	8003042 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800299e:	4b0c      	ldr	r3, [pc, #48]	@ (80029d0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80029a0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80029a2:	f003 0302 	and.w	r3, r3, #2
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d0ee      	beq.n	8002988 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029ae:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80029b2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80029b6:	d111      	bne.n	80029dc <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 80029b8:	4b05      	ldr	r3, [pc, #20]	@ (80029d0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80029ba:	689b      	ldr	r3, [r3, #8]
 80029bc:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80029c4:	4b04      	ldr	r3, [pc, #16]	@ (80029d8 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80029c6:	400b      	ands	r3, r1
 80029c8:	4901      	ldr	r1, [pc, #4]	@ (80029d0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80029ca:	4313      	orrs	r3, r2
 80029cc:	608b      	str	r3, [r1, #8]
 80029ce:	e00b      	b.n	80029e8 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 80029d0:	40023800 	.word	0x40023800
 80029d4:	40007000 	.word	0x40007000
 80029d8:	0ffffcff 	.word	0x0ffffcff
 80029dc:	4bac      	ldr	r3, [pc, #688]	@ (8002c90 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80029de:	689b      	ldr	r3, [r3, #8]
 80029e0:	4aab      	ldr	r2, [pc, #684]	@ (8002c90 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80029e2:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 80029e6:	6093      	str	r3, [r2, #8]
 80029e8:	4ba9      	ldr	r3, [pc, #676]	@ (8002c90 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80029ea:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029f0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80029f4:	49a6      	ldr	r1, [pc, #664]	@ (8002c90 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80029f6:	4313      	orrs	r3, r2
 80029f8:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	f003 0310 	and.w	r3, r3, #16
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d010      	beq.n	8002a28 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8002a06:	4ba2      	ldr	r3, [pc, #648]	@ (8002c90 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002a08:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002a0c:	4aa0      	ldr	r2, [pc, #640]	@ (8002c90 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002a0e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002a12:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8002a16:	4b9e      	ldr	r3, [pc, #632]	@ (8002c90 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002a18:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002a20:	499b      	ldr	r1, [pc, #620]	@ (8002c90 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002a22:	4313      	orrs	r3, r2
 8002a24:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d00a      	beq.n	8002a4a <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002a34:	4b96      	ldr	r3, [pc, #600]	@ (8002c90 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002a36:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002a3a:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002a42:	4993      	ldr	r1, [pc, #588]	@ (8002c90 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002a44:	4313      	orrs	r3, r2
 8002a46:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d00a      	beq.n	8002a6c <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002a56:	4b8e      	ldr	r3, [pc, #568]	@ (8002c90 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002a58:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002a5c:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002a64:	498a      	ldr	r1, [pc, #552]	@ (8002c90 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002a66:	4313      	orrs	r3, r2
 8002a68:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d00a      	beq.n	8002a8e <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002a78:	4b85      	ldr	r3, [pc, #532]	@ (8002c90 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002a7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002a7e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002a86:	4982      	ldr	r1, [pc, #520]	@ (8002c90 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002a88:	4313      	orrs	r3, r2
 8002a8a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d00a      	beq.n	8002ab0 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002a9a:	4b7d      	ldr	r3, [pc, #500]	@ (8002c90 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002a9c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002aa0:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002aa8:	4979      	ldr	r1, [pc, #484]	@ (8002c90 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002aaa:	4313      	orrs	r3, r2
 8002aac:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d00a      	beq.n	8002ad2 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002abc:	4b74      	ldr	r3, [pc, #464]	@ (8002c90 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002abe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002ac2:	f023 0203 	bic.w	r2, r3, #3
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002aca:	4971      	ldr	r1, [pc, #452]	@ (8002c90 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002acc:	4313      	orrs	r3, r2
 8002ace:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d00a      	beq.n	8002af4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002ade:	4b6c      	ldr	r3, [pc, #432]	@ (8002c90 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002ae0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002ae4:	f023 020c 	bic.w	r2, r3, #12
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002aec:	4968      	ldr	r1, [pc, #416]	@ (8002c90 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002aee:	4313      	orrs	r3, r2
 8002af0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d00a      	beq.n	8002b16 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002b00:	4b63      	ldr	r3, [pc, #396]	@ (8002c90 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002b02:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002b06:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002b0e:	4960      	ldr	r1, [pc, #384]	@ (8002c90 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002b10:	4313      	orrs	r3, r2
 8002b12:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d00a      	beq.n	8002b38 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002b22:	4b5b      	ldr	r3, [pc, #364]	@ (8002c90 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002b24:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002b28:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002b30:	4957      	ldr	r1, [pc, #348]	@ (8002c90 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002b32:	4313      	orrs	r3, r2
 8002b34:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d00a      	beq.n	8002b5a <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002b44:	4b52      	ldr	r3, [pc, #328]	@ (8002c90 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002b46:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002b4a:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002b52:	494f      	ldr	r1, [pc, #316]	@ (8002c90 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002b54:	4313      	orrs	r3, r2
 8002b56:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d00a      	beq.n	8002b7c <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8002b66:	4b4a      	ldr	r3, [pc, #296]	@ (8002c90 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002b68:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002b6c:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b74:	4946      	ldr	r1, [pc, #280]	@ (8002c90 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002b76:	4313      	orrs	r3, r2
 8002b78:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d00a      	beq.n	8002b9e <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8002b88:	4b41      	ldr	r3, [pc, #260]	@ (8002c90 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002b8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002b8e:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b96:	493e      	ldr	r1, [pc, #248]	@ (8002c90 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002b98:	4313      	orrs	r3, r2
 8002b9a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d00a      	beq.n	8002bc0 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8002baa:	4b39      	ldr	r3, [pc, #228]	@ (8002c90 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002bac:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002bb0:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002bb8:	4935      	ldr	r1, [pc, #212]	@ (8002c90 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002bba:	4313      	orrs	r3, r2
 8002bbc:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d00a      	beq.n	8002be2 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002bcc:	4b30      	ldr	r3, [pc, #192]	@ (8002c90 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002bce:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002bd2:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002bda:	492d      	ldr	r1, [pc, #180]	@ (8002c90 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002bdc:	4313      	orrs	r3, r2
 8002bde:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d011      	beq.n	8002c12 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8002bee:	4b28      	ldr	r3, [pc, #160]	@ (8002c90 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002bf0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002bf4:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002bfc:	4924      	ldr	r1, [pc, #144]	@ (8002c90 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002bfe:	4313      	orrs	r3, r2
 8002c00:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002c08:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002c0c:	d101      	bne.n	8002c12 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8002c0e:	2301      	movs	r3, #1
 8002c10:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	f003 0308 	and.w	r3, r3, #8
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d001      	beq.n	8002c22 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8002c1e:	2301      	movs	r3, #1
 8002c20:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d00a      	beq.n	8002c44 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002c2e:	4b18      	ldr	r3, [pc, #96]	@ (8002c90 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002c30:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002c34:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002c3c:	4914      	ldr	r1, [pc, #80]	@ (8002c90 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002c3e:	4313      	orrs	r3, r2
 8002c40:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d00b      	beq.n	8002c68 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002c50:	4b0f      	ldr	r3, [pc, #60]	@ (8002c90 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002c52:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002c56:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002c60:	490b      	ldr	r1, [pc, #44]	@ (8002c90 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002c62:	4313      	orrs	r3, r2
 8002c64:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d00f      	beq.n	8002c94 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8002c74:	4b06      	ldr	r3, [pc, #24]	@ (8002c90 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002c76:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002c7a:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002c84:	4902      	ldr	r1, [pc, #8]	@ (8002c90 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002c86:	4313      	orrs	r3, r2
 8002c88:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8002c8c:	e002      	b.n	8002c94 <HAL_RCCEx_PeriphCLKConfig+0x494>
 8002c8e:	bf00      	nop
 8002c90:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d00b      	beq.n	8002cb8 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002ca0:	4b8a      	ldr	r3, [pc, #552]	@ (8002ecc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002ca2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002ca6:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002cb0:	4986      	ldr	r1, [pc, #536]	@ (8002ecc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002cb2:	4313      	orrs	r3, r2
 8002cb4:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d00b      	beq.n	8002cdc <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8002cc4:	4b81      	ldr	r3, [pc, #516]	@ (8002ecc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002cc6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002cca:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002cd4:	497d      	ldr	r1, [pc, #500]	@ (8002ecc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002cd6:	4313      	orrs	r3, r2
 8002cd8:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8002cdc:	69fb      	ldr	r3, [r7, #28]
 8002cde:	2b01      	cmp	r3, #1
 8002ce0:	d006      	beq.n	8002cf0 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	f000 80d6 	beq.w	8002e9c <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002cf0:	4b76      	ldr	r3, [pc, #472]	@ (8002ecc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	4a75      	ldr	r2, [pc, #468]	@ (8002ecc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002cf6:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8002cfa:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002cfc:	f7fe fd68 	bl	80017d0 <HAL_GetTick>
 8002d00:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002d02:	e008      	b.n	8002d16 <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002d04:	f7fe fd64 	bl	80017d0 <HAL_GetTick>
 8002d08:	4602      	mov	r2, r0
 8002d0a:	697b      	ldr	r3, [r7, #20]
 8002d0c:	1ad3      	subs	r3, r2, r3
 8002d0e:	2b64      	cmp	r3, #100	@ 0x64
 8002d10:	d901      	bls.n	8002d16 <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002d12:	2303      	movs	r3, #3
 8002d14:	e195      	b.n	8003042 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002d16:	4b6d      	ldr	r3, [pc, #436]	@ (8002ecc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d1f0      	bne.n	8002d04 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	f003 0301 	and.w	r3, r3, #1
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d021      	beq.n	8002d72 <HAL_RCCEx_PeriphCLKConfig+0x572>
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d11d      	bne.n	8002d72 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002d36:	4b65      	ldr	r3, [pc, #404]	@ (8002ecc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002d38:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002d3c:	0c1b      	lsrs	r3, r3, #16
 8002d3e:	f003 0303 	and.w	r3, r3, #3
 8002d42:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002d44:	4b61      	ldr	r3, [pc, #388]	@ (8002ecc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002d46:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002d4a:	0e1b      	lsrs	r3, r3, #24
 8002d4c:	f003 030f 	and.w	r3, r3, #15
 8002d50:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	685b      	ldr	r3, [r3, #4]
 8002d56:	019a      	lsls	r2, r3, #6
 8002d58:	693b      	ldr	r3, [r7, #16]
 8002d5a:	041b      	lsls	r3, r3, #16
 8002d5c:	431a      	orrs	r2, r3
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	061b      	lsls	r3, r3, #24
 8002d62:	431a      	orrs	r2, r3
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	689b      	ldr	r3, [r3, #8]
 8002d68:	071b      	lsls	r3, r3, #28
 8002d6a:	4958      	ldr	r1, [pc, #352]	@ (8002ecc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002d6c:	4313      	orrs	r3, r2
 8002d6e:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d004      	beq.n	8002d88 <HAL_RCCEx_PeriphCLKConfig+0x588>
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002d82:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002d86:	d00a      	beq.n	8002d9e <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d02e      	beq.n	8002df2 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d98:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002d9c:	d129      	bne.n	8002df2 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002d9e:	4b4b      	ldr	r3, [pc, #300]	@ (8002ecc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002da0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002da4:	0c1b      	lsrs	r3, r3, #16
 8002da6:	f003 0303 	and.w	r3, r3, #3
 8002daa:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002dac:	4b47      	ldr	r3, [pc, #284]	@ (8002ecc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002dae:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002db2:	0f1b      	lsrs	r3, r3, #28
 8002db4:	f003 0307 	and.w	r3, r3, #7
 8002db8:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	685b      	ldr	r3, [r3, #4]
 8002dbe:	019a      	lsls	r2, r3, #6
 8002dc0:	693b      	ldr	r3, [r7, #16]
 8002dc2:	041b      	lsls	r3, r3, #16
 8002dc4:	431a      	orrs	r2, r3
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	68db      	ldr	r3, [r3, #12]
 8002dca:	061b      	lsls	r3, r3, #24
 8002dcc:	431a      	orrs	r2, r3
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	071b      	lsls	r3, r3, #28
 8002dd2:	493e      	ldr	r1, [pc, #248]	@ (8002ecc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002dd4:	4313      	orrs	r3, r2
 8002dd6:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8002dda:	4b3c      	ldr	r3, [pc, #240]	@ (8002ecc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002ddc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002de0:	f023 021f 	bic.w	r2, r3, #31
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002de8:	3b01      	subs	r3, #1
 8002dea:	4938      	ldr	r1, [pc, #224]	@ (8002ecc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002dec:	4313      	orrs	r3, r2
 8002dee:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d01d      	beq.n	8002e3a <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002dfe:	4b33      	ldr	r3, [pc, #204]	@ (8002ecc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002e00:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002e04:	0e1b      	lsrs	r3, r3, #24
 8002e06:	f003 030f 	and.w	r3, r3, #15
 8002e0a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002e0c:	4b2f      	ldr	r3, [pc, #188]	@ (8002ecc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002e0e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002e12:	0f1b      	lsrs	r3, r3, #28
 8002e14:	f003 0307 	and.w	r3, r3, #7
 8002e18:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	685b      	ldr	r3, [r3, #4]
 8002e1e:	019a      	lsls	r2, r3, #6
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	691b      	ldr	r3, [r3, #16]
 8002e24:	041b      	lsls	r3, r3, #16
 8002e26:	431a      	orrs	r2, r3
 8002e28:	693b      	ldr	r3, [r7, #16]
 8002e2a:	061b      	lsls	r3, r3, #24
 8002e2c:	431a      	orrs	r2, r3
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	071b      	lsls	r3, r3, #28
 8002e32:	4926      	ldr	r1, [pc, #152]	@ (8002ecc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002e34:	4313      	orrs	r3, r2
 8002e36:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d011      	beq.n	8002e6a <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	685b      	ldr	r3, [r3, #4]
 8002e4a:	019a      	lsls	r2, r3, #6
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	691b      	ldr	r3, [r3, #16]
 8002e50:	041b      	lsls	r3, r3, #16
 8002e52:	431a      	orrs	r2, r3
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	68db      	ldr	r3, [r3, #12]
 8002e58:	061b      	lsls	r3, r3, #24
 8002e5a:	431a      	orrs	r2, r3
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	689b      	ldr	r3, [r3, #8]
 8002e60:	071b      	lsls	r3, r3, #28
 8002e62:	491a      	ldr	r1, [pc, #104]	@ (8002ecc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002e64:	4313      	orrs	r3, r2
 8002e66:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8002e6a:	4b18      	ldr	r3, [pc, #96]	@ (8002ecc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	4a17      	ldr	r2, [pc, #92]	@ (8002ecc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002e70:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8002e74:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002e76:	f7fe fcab 	bl	80017d0 <HAL_GetTick>
 8002e7a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002e7c:	e008      	b.n	8002e90 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002e7e:	f7fe fca7 	bl	80017d0 <HAL_GetTick>
 8002e82:	4602      	mov	r2, r0
 8002e84:	697b      	ldr	r3, [r7, #20]
 8002e86:	1ad3      	subs	r3, r2, r3
 8002e88:	2b64      	cmp	r3, #100	@ 0x64
 8002e8a:	d901      	bls.n	8002e90 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002e8c:	2303      	movs	r3, #3
 8002e8e:	e0d8      	b.n	8003042 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002e90:	4b0e      	ldr	r3, [pc, #56]	@ (8002ecc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d0f0      	beq.n	8002e7e <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8002e9c:	69bb      	ldr	r3, [r7, #24]
 8002e9e:	2b01      	cmp	r3, #1
 8002ea0:	f040 80ce 	bne.w	8003040 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8002ea4:	4b09      	ldr	r3, [pc, #36]	@ (8002ecc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	4a08      	ldr	r2, [pc, #32]	@ (8002ecc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002eaa:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002eae:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002eb0:	f7fe fc8e 	bl	80017d0 <HAL_GetTick>
 8002eb4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002eb6:	e00b      	b.n	8002ed0 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002eb8:	f7fe fc8a 	bl	80017d0 <HAL_GetTick>
 8002ebc:	4602      	mov	r2, r0
 8002ebe:	697b      	ldr	r3, [r7, #20]
 8002ec0:	1ad3      	subs	r3, r2, r3
 8002ec2:	2b64      	cmp	r3, #100	@ 0x64
 8002ec4:	d904      	bls.n	8002ed0 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002ec6:	2303      	movs	r3, #3
 8002ec8:	e0bb      	b.n	8003042 <HAL_RCCEx_PeriphCLKConfig+0x842>
 8002eca:	bf00      	nop
 8002ecc:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002ed0:	4b5e      	ldr	r3, [pc, #376]	@ (800304c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002ed8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002edc:	d0ec      	beq.n	8002eb8 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d003      	beq.n	8002ef2 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d009      	beq.n	8002f06 <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d02e      	beq.n	8002f5c <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d12a      	bne.n	8002f5c <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002f06:	4b51      	ldr	r3, [pc, #324]	@ (800304c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002f08:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002f0c:	0c1b      	lsrs	r3, r3, #16
 8002f0e:	f003 0303 	and.w	r3, r3, #3
 8002f12:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002f14:	4b4d      	ldr	r3, [pc, #308]	@ (800304c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002f16:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002f1a:	0f1b      	lsrs	r3, r3, #28
 8002f1c:	f003 0307 	and.w	r3, r3, #7
 8002f20:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	695b      	ldr	r3, [r3, #20]
 8002f26:	019a      	lsls	r2, r3, #6
 8002f28:	693b      	ldr	r3, [r7, #16]
 8002f2a:	041b      	lsls	r3, r3, #16
 8002f2c:	431a      	orrs	r2, r3
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	699b      	ldr	r3, [r3, #24]
 8002f32:	061b      	lsls	r3, r3, #24
 8002f34:	431a      	orrs	r2, r3
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	071b      	lsls	r3, r3, #28
 8002f3a:	4944      	ldr	r1, [pc, #272]	@ (800304c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002f3c:	4313      	orrs	r3, r2
 8002f3e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8002f42:	4b42      	ldr	r3, [pc, #264]	@ (800304c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002f44:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002f48:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f50:	3b01      	subs	r3, #1
 8002f52:	021b      	lsls	r3, r3, #8
 8002f54:	493d      	ldr	r1, [pc, #244]	@ (800304c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002f56:	4313      	orrs	r3, r2
 8002f58:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d022      	beq.n	8002fae <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002f6c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002f70:	d11d      	bne.n	8002fae <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002f72:	4b36      	ldr	r3, [pc, #216]	@ (800304c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002f74:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002f78:	0e1b      	lsrs	r3, r3, #24
 8002f7a:	f003 030f 	and.w	r3, r3, #15
 8002f7e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002f80:	4b32      	ldr	r3, [pc, #200]	@ (800304c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002f82:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002f86:	0f1b      	lsrs	r3, r3, #28
 8002f88:	f003 0307 	and.w	r3, r3, #7
 8002f8c:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	695b      	ldr	r3, [r3, #20]
 8002f92:	019a      	lsls	r2, r3, #6
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	6a1b      	ldr	r3, [r3, #32]
 8002f98:	041b      	lsls	r3, r3, #16
 8002f9a:	431a      	orrs	r2, r3
 8002f9c:	693b      	ldr	r3, [r7, #16]
 8002f9e:	061b      	lsls	r3, r3, #24
 8002fa0:	431a      	orrs	r2, r3
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	071b      	lsls	r3, r3, #28
 8002fa6:	4929      	ldr	r1, [pc, #164]	@ (800304c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002fa8:	4313      	orrs	r3, r2
 8002faa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	f003 0308 	and.w	r3, r3, #8
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d028      	beq.n	800300c <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002fba:	4b24      	ldr	r3, [pc, #144]	@ (800304c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002fbc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002fc0:	0e1b      	lsrs	r3, r3, #24
 8002fc2:	f003 030f 	and.w	r3, r3, #15
 8002fc6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002fc8:	4b20      	ldr	r3, [pc, #128]	@ (800304c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002fca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002fce:	0c1b      	lsrs	r3, r3, #16
 8002fd0:	f003 0303 	and.w	r3, r3, #3
 8002fd4:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	695b      	ldr	r3, [r3, #20]
 8002fda:	019a      	lsls	r2, r3, #6
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	041b      	lsls	r3, r3, #16
 8002fe0:	431a      	orrs	r2, r3
 8002fe2:	693b      	ldr	r3, [r7, #16]
 8002fe4:	061b      	lsls	r3, r3, #24
 8002fe6:	431a      	orrs	r2, r3
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	69db      	ldr	r3, [r3, #28]
 8002fec:	071b      	lsls	r3, r3, #28
 8002fee:	4917      	ldr	r1, [pc, #92]	@ (800304c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002ff0:	4313      	orrs	r3, r2
 8002ff2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8002ff6:	4b15      	ldr	r3, [pc, #84]	@ (800304c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002ff8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002ffc:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003004:	4911      	ldr	r1, [pc, #68]	@ (800304c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003006:	4313      	orrs	r3, r2
 8003008:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800300c:	4b0f      	ldr	r3, [pc, #60]	@ (800304c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	4a0e      	ldr	r2, [pc, #56]	@ (800304c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003012:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003016:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003018:	f7fe fbda 	bl	80017d0 <HAL_GetTick>
 800301c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800301e:	e008      	b.n	8003032 <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003020:	f7fe fbd6 	bl	80017d0 <HAL_GetTick>
 8003024:	4602      	mov	r2, r0
 8003026:	697b      	ldr	r3, [r7, #20]
 8003028:	1ad3      	subs	r3, r2, r3
 800302a:	2b64      	cmp	r3, #100	@ 0x64
 800302c:	d901      	bls.n	8003032 <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800302e:	2303      	movs	r3, #3
 8003030:	e007      	b.n	8003042 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003032:	4b06      	ldr	r3, [pc, #24]	@ (800304c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800303a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800303e:	d1ef      	bne.n	8003020 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8003040:	2300      	movs	r3, #0
}
 8003042:	4618      	mov	r0, r3
 8003044:	3720      	adds	r7, #32
 8003046:	46bd      	mov	sp, r7
 8003048:	bd80      	pop	{r7, pc}
 800304a:	bf00      	nop
 800304c:	40023800 	.word	0x40023800

08003050 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003050:	b580      	push	{r7, lr}
 8003052:	b082      	sub	sp, #8
 8003054:	af00      	add	r7, sp, #0
 8003056:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	2b00      	cmp	r3, #0
 800305c:	d101      	bne.n	8003062 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800305e:	2301      	movs	r3, #1
 8003060:	e049      	b.n	80030f6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003068:	b2db      	uxtb	r3, r3
 800306a:	2b00      	cmp	r3, #0
 800306c:	d106      	bne.n	800307c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	2200      	movs	r2, #0
 8003072:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003076:	6878      	ldr	r0, [r7, #4]
 8003078:	f7fe f98a 	bl	8001390 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	2202      	movs	r2, #2
 8003080:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681a      	ldr	r2, [r3, #0]
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	3304      	adds	r3, #4
 800308c:	4619      	mov	r1, r3
 800308e:	4610      	mov	r0, r2
 8003090:	f000 ff68 	bl	8003f64 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	2201      	movs	r2, #1
 8003098:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	2201      	movs	r2, #1
 80030a0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	2201      	movs	r2, #1
 80030a8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	2201      	movs	r2, #1
 80030b0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	2201      	movs	r2, #1
 80030b8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	2201      	movs	r2, #1
 80030c0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	2201      	movs	r2, #1
 80030c8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	2201      	movs	r2, #1
 80030d0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	2201      	movs	r2, #1
 80030d8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	2201      	movs	r2, #1
 80030e0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	2201      	movs	r2, #1
 80030e8:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	2201      	movs	r2, #1
 80030f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80030f4:	2300      	movs	r3, #0
}
 80030f6:	4618      	mov	r0, r3
 80030f8:	3708      	adds	r7, #8
 80030fa:	46bd      	mov	sp, r7
 80030fc:	bd80      	pop	{r7, pc}

080030fe <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80030fe:	b580      	push	{r7, lr}
 8003100:	b082      	sub	sp, #8
 8003102:	af00      	add	r7, sp, #0
 8003104:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	2b00      	cmp	r3, #0
 800310a:	d101      	bne.n	8003110 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800310c:	2301      	movs	r3, #1
 800310e:	e049      	b.n	80031a4 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003116:	b2db      	uxtb	r3, r3
 8003118:	2b00      	cmp	r3, #0
 800311a:	d106      	bne.n	800312a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	2200      	movs	r2, #0
 8003120:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003124:	6878      	ldr	r0, [r7, #4]
 8003126:	f7fe f9bb 	bl	80014a0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	2202      	movs	r2, #2
 800312e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681a      	ldr	r2, [r3, #0]
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	3304      	adds	r3, #4
 800313a:	4619      	mov	r1, r3
 800313c:	4610      	mov	r0, r2
 800313e:	f000 ff11 	bl	8003f64 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	2201      	movs	r2, #1
 8003146:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	2201      	movs	r2, #1
 800314e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	2201      	movs	r2, #1
 8003156:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	2201      	movs	r2, #1
 800315e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	2201      	movs	r2, #1
 8003166:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	2201      	movs	r2, #1
 800316e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	2201      	movs	r2, #1
 8003176:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	2201      	movs	r2, #1
 800317e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	2201      	movs	r2, #1
 8003186:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	2201      	movs	r2, #1
 800318e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	2201      	movs	r2, #1
 8003196:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	2201      	movs	r2, #1
 800319e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80031a2:	2300      	movs	r3, #0
}
 80031a4:	4618      	mov	r0, r3
 80031a6:	3708      	adds	r7, #8
 80031a8:	46bd      	mov	sp, r7
 80031aa:	bd80      	pop	{r7, pc}

080031ac <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80031ac:	b580      	push	{r7, lr}
 80031ae:	b084      	sub	sp, #16
 80031b0:	af00      	add	r7, sp, #0
 80031b2:	6078      	str	r0, [r7, #4]
 80031b4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80031b6:	683b      	ldr	r3, [r7, #0]
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d109      	bne.n	80031d0 <HAL_TIM_PWM_Start+0x24>
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80031c2:	b2db      	uxtb	r3, r3
 80031c4:	2b01      	cmp	r3, #1
 80031c6:	bf14      	ite	ne
 80031c8:	2301      	movne	r3, #1
 80031ca:	2300      	moveq	r3, #0
 80031cc:	b2db      	uxtb	r3, r3
 80031ce:	e03c      	b.n	800324a <HAL_TIM_PWM_Start+0x9e>
 80031d0:	683b      	ldr	r3, [r7, #0]
 80031d2:	2b04      	cmp	r3, #4
 80031d4:	d109      	bne.n	80031ea <HAL_TIM_PWM_Start+0x3e>
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80031dc:	b2db      	uxtb	r3, r3
 80031de:	2b01      	cmp	r3, #1
 80031e0:	bf14      	ite	ne
 80031e2:	2301      	movne	r3, #1
 80031e4:	2300      	moveq	r3, #0
 80031e6:	b2db      	uxtb	r3, r3
 80031e8:	e02f      	b.n	800324a <HAL_TIM_PWM_Start+0x9e>
 80031ea:	683b      	ldr	r3, [r7, #0]
 80031ec:	2b08      	cmp	r3, #8
 80031ee:	d109      	bne.n	8003204 <HAL_TIM_PWM_Start+0x58>
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80031f6:	b2db      	uxtb	r3, r3
 80031f8:	2b01      	cmp	r3, #1
 80031fa:	bf14      	ite	ne
 80031fc:	2301      	movne	r3, #1
 80031fe:	2300      	moveq	r3, #0
 8003200:	b2db      	uxtb	r3, r3
 8003202:	e022      	b.n	800324a <HAL_TIM_PWM_Start+0x9e>
 8003204:	683b      	ldr	r3, [r7, #0]
 8003206:	2b0c      	cmp	r3, #12
 8003208:	d109      	bne.n	800321e <HAL_TIM_PWM_Start+0x72>
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003210:	b2db      	uxtb	r3, r3
 8003212:	2b01      	cmp	r3, #1
 8003214:	bf14      	ite	ne
 8003216:	2301      	movne	r3, #1
 8003218:	2300      	moveq	r3, #0
 800321a:	b2db      	uxtb	r3, r3
 800321c:	e015      	b.n	800324a <HAL_TIM_PWM_Start+0x9e>
 800321e:	683b      	ldr	r3, [r7, #0]
 8003220:	2b10      	cmp	r3, #16
 8003222:	d109      	bne.n	8003238 <HAL_TIM_PWM_Start+0x8c>
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800322a:	b2db      	uxtb	r3, r3
 800322c:	2b01      	cmp	r3, #1
 800322e:	bf14      	ite	ne
 8003230:	2301      	movne	r3, #1
 8003232:	2300      	moveq	r3, #0
 8003234:	b2db      	uxtb	r3, r3
 8003236:	e008      	b.n	800324a <HAL_TIM_PWM_Start+0x9e>
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800323e:	b2db      	uxtb	r3, r3
 8003240:	2b01      	cmp	r3, #1
 8003242:	bf14      	ite	ne
 8003244:	2301      	movne	r3, #1
 8003246:	2300      	moveq	r3, #0
 8003248:	b2db      	uxtb	r3, r3
 800324a:	2b00      	cmp	r3, #0
 800324c:	d001      	beq.n	8003252 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800324e:	2301      	movs	r3, #1
 8003250:	e092      	b.n	8003378 <HAL_TIM_PWM_Start+0x1cc>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003252:	683b      	ldr	r3, [r7, #0]
 8003254:	2b00      	cmp	r3, #0
 8003256:	d104      	bne.n	8003262 <HAL_TIM_PWM_Start+0xb6>
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	2202      	movs	r2, #2
 800325c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003260:	e023      	b.n	80032aa <HAL_TIM_PWM_Start+0xfe>
 8003262:	683b      	ldr	r3, [r7, #0]
 8003264:	2b04      	cmp	r3, #4
 8003266:	d104      	bne.n	8003272 <HAL_TIM_PWM_Start+0xc6>
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	2202      	movs	r2, #2
 800326c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003270:	e01b      	b.n	80032aa <HAL_TIM_PWM_Start+0xfe>
 8003272:	683b      	ldr	r3, [r7, #0]
 8003274:	2b08      	cmp	r3, #8
 8003276:	d104      	bne.n	8003282 <HAL_TIM_PWM_Start+0xd6>
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	2202      	movs	r2, #2
 800327c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003280:	e013      	b.n	80032aa <HAL_TIM_PWM_Start+0xfe>
 8003282:	683b      	ldr	r3, [r7, #0]
 8003284:	2b0c      	cmp	r3, #12
 8003286:	d104      	bne.n	8003292 <HAL_TIM_PWM_Start+0xe6>
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	2202      	movs	r2, #2
 800328c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003290:	e00b      	b.n	80032aa <HAL_TIM_PWM_Start+0xfe>
 8003292:	683b      	ldr	r3, [r7, #0]
 8003294:	2b10      	cmp	r3, #16
 8003296:	d104      	bne.n	80032a2 <HAL_TIM_PWM_Start+0xf6>
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	2202      	movs	r2, #2
 800329c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80032a0:	e003      	b.n	80032aa <HAL_TIM_PWM_Start+0xfe>
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	2202      	movs	r2, #2
 80032a6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	2201      	movs	r2, #1
 80032b0:	6839      	ldr	r1, [r7, #0]
 80032b2:	4618      	mov	r0, r3
 80032b4:	f001 fbb8 	bl	8004a28 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	4a30      	ldr	r2, [pc, #192]	@ (8003380 <HAL_TIM_PWM_Start+0x1d4>)
 80032be:	4293      	cmp	r3, r2
 80032c0:	d004      	beq.n	80032cc <HAL_TIM_PWM_Start+0x120>
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	4a2f      	ldr	r2, [pc, #188]	@ (8003384 <HAL_TIM_PWM_Start+0x1d8>)
 80032c8:	4293      	cmp	r3, r2
 80032ca:	d101      	bne.n	80032d0 <HAL_TIM_PWM_Start+0x124>
 80032cc:	2301      	movs	r3, #1
 80032ce:	e000      	b.n	80032d2 <HAL_TIM_PWM_Start+0x126>
 80032d0:	2300      	movs	r3, #0
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d007      	beq.n	80032e6 <HAL_TIM_PWM_Start+0x13a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80032e4:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	4a25      	ldr	r2, [pc, #148]	@ (8003380 <HAL_TIM_PWM_Start+0x1d4>)
 80032ec:	4293      	cmp	r3, r2
 80032ee:	d022      	beq.n	8003336 <HAL_TIM_PWM_Start+0x18a>
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80032f8:	d01d      	beq.n	8003336 <HAL_TIM_PWM_Start+0x18a>
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	4a22      	ldr	r2, [pc, #136]	@ (8003388 <HAL_TIM_PWM_Start+0x1dc>)
 8003300:	4293      	cmp	r3, r2
 8003302:	d018      	beq.n	8003336 <HAL_TIM_PWM_Start+0x18a>
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	4a20      	ldr	r2, [pc, #128]	@ (800338c <HAL_TIM_PWM_Start+0x1e0>)
 800330a:	4293      	cmp	r3, r2
 800330c:	d013      	beq.n	8003336 <HAL_TIM_PWM_Start+0x18a>
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	4a1f      	ldr	r2, [pc, #124]	@ (8003390 <HAL_TIM_PWM_Start+0x1e4>)
 8003314:	4293      	cmp	r3, r2
 8003316:	d00e      	beq.n	8003336 <HAL_TIM_PWM_Start+0x18a>
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	4a19      	ldr	r2, [pc, #100]	@ (8003384 <HAL_TIM_PWM_Start+0x1d8>)
 800331e:	4293      	cmp	r3, r2
 8003320:	d009      	beq.n	8003336 <HAL_TIM_PWM_Start+0x18a>
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	4a1b      	ldr	r2, [pc, #108]	@ (8003394 <HAL_TIM_PWM_Start+0x1e8>)
 8003328:	4293      	cmp	r3, r2
 800332a:	d004      	beq.n	8003336 <HAL_TIM_PWM_Start+0x18a>
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	4a19      	ldr	r2, [pc, #100]	@ (8003398 <HAL_TIM_PWM_Start+0x1ec>)
 8003332:	4293      	cmp	r3, r2
 8003334:	d115      	bne.n	8003362 <HAL_TIM_PWM_Start+0x1b6>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	689a      	ldr	r2, [r3, #8]
 800333c:	4b17      	ldr	r3, [pc, #92]	@ (800339c <HAL_TIM_PWM_Start+0x1f0>)
 800333e:	4013      	ands	r3, r2
 8003340:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	2b06      	cmp	r3, #6
 8003346:	d015      	beq.n	8003374 <HAL_TIM_PWM_Start+0x1c8>
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800334e:	d011      	beq.n	8003374 <HAL_TIM_PWM_Start+0x1c8>
    {
      __HAL_TIM_ENABLE(htim);
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	681a      	ldr	r2, [r3, #0]
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	f042 0201 	orr.w	r2, r2, #1
 800335e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003360:	e008      	b.n	8003374 <HAL_TIM_PWM_Start+0x1c8>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	681a      	ldr	r2, [r3, #0]
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	f042 0201 	orr.w	r2, r2, #1
 8003370:	601a      	str	r2, [r3, #0]
 8003372:	e000      	b.n	8003376 <HAL_TIM_PWM_Start+0x1ca>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003374:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003376:	2300      	movs	r3, #0
}
 8003378:	4618      	mov	r0, r3
 800337a:	3710      	adds	r7, #16
 800337c:	46bd      	mov	sp, r7
 800337e:	bd80      	pop	{r7, pc}
 8003380:	40010000 	.word	0x40010000
 8003384:	40010400 	.word	0x40010400
 8003388:	40000400 	.word	0x40000400
 800338c:	40000800 	.word	0x40000800
 8003390:	40000c00 	.word	0x40000c00
 8003394:	40014000 	.word	0x40014000
 8003398:	40001800 	.word	0x40001800
 800339c:	00010007 	.word	0x00010007

080033a0 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 80033a0:	b580      	push	{r7, lr}
 80033a2:	b082      	sub	sp, #8
 80033a4:	af00      	add	r7, sp, #0
 80033a6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d101      	bne.n	80033b2 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 80033ae:	2301      	movs	r3, #1
 80033b0:	e049      	b.n	8003446 <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80033b8:	b2db      	uxtb	r3, r3
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d106      	bne.n	80033cc <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	2200      	movs	r2, #0
 80033c2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 80033c6:	6878      	ldr	r0, [r7, #4]
 80033c8:	f000 f841 	bl	800344e <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	2202      	movs	r2, #2
 80033d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681a      	ldr	r2, [r3, #0]
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	3304      	adds	r3, #4
 80033dc:	4619      	mov	r1, r3
 80033de:	4610      	mov	r0, r2
 80033e0:	f000 fdc0 	bl	8003f64 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	2201      	movs	r2, #1
 80033e8:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	2201      	movs	r2, #1
 80033f0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	2201      	movs	r2, #1
 80033f8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	2201      	movs	r2, #1
 8003400:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	2201      	movs	r2, #1
 8003408:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	2201      	movs	r2, #1
 8003410:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	2201      	movs	r2, #1
 8003418:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	2201      	movs	r2, #1
 8003420:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	2201      	movs	r2, #1
 8003428:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	2201      	movs	r2, #1
 8003430:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	2201      	movs	r2, #1
 8003438:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	2201      	movs	r2, #1
 8003440:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003444:	2300      	movs	r3, #0
}
 8003446:	4618      	mov	r0, r3
 8003448:	3708      	adds	r7, #8
 800344a:	46bd      	mov	sp, r7
 800344c:	bd80      	pop	{r7, pc}

0800344e <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 800344e:	b480      	push	{r7}
 8003450:	b083      	sub	sp, #12
 8003452:	af00      	add	r7, sp, #0
 8003454:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8003456:	bf00      	nop
 8003458:	370c      	adds	r7, #12
 800345a:	46bd      	mov	sp, r7
 800345c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003460:	4770      	bx	lr
	...

08003464 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003464:	b580      	push	{r7, lr}
 8003466:	b084      	sub	sp, #16
 8003468:	af00      	add	r7, sp, #0
 800346a:	6078      	str	r0, [r7, #4]
 800346c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800346e:	2300      	movs	r3, #0
 8003470:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8003472:	683b      	ldr	r3, [r7, #0]
 8003474:	2b00      	cmp	r3, #0
 8003476:	d104      	bne.n	8003482 <HAL_TIM_IC_Start_IT+0x1e>
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800347e:	b2db      	uxtb	r3, r3
 8003480:	e023      	b.n	80034ca <HAL_TIM_IC_Start_IT+0x66>
 8003482:	683b      	ldr	r3, [r7, #0]
 8003484:	2b04      	cmp	r3, #4
 8003486:	d104      	bne.n	8003492 <HAL_TIM_IC_Start_IT+0x2e>
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800348e:	b2db      	uxtb	r3, r3
 8003490:	e01b      	b.n	80034ca <HAL_TIM_IC_Start_IT+0x66>
 8003492:	683b      	ldr	r3, [r7, #0]
 8003494:	2b08      	cmp	r3, #8
 8003496:	d104      	bne.n	80034a2 <HAL_TIM_IC_Start_IT+0x3e>
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800349e:	b2db      	uxtb	r3, r3
 80034a0:	e013      	b.n	80034ca <HAL_TIM_IC_Start_IT+0x66>
 80034a2:	683b      	ldr	r3, [r7, #0]
 80034a4:	2b0c      	cmp	r3, #12
 80034a6:	d104      	bne.n	80034b2 <HAL_TIM_IC_Start_IT+0x4e>
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80034ae:	b2db      	uxtb	r3, r3
 80034b0:	e00b      	b.n	80034ca <HAL_TIM_IC_Start_IT+0x66>
 80034b2:	683b      	ldr	r3, [r7, #0]
 80034b4:	2b10      	cmp	r3, #16
 80034b6:	d104      	bne.n	80034c2 <HAL_TIM_IC_Start_IT+0x5e>
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80034be:	b2db      	uxtb	r3, r3
 80034c0:	e003      	b.n	80034ca <HAL_TIM_IC_Start_IT+0x66>
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80034c8:	b2db      	uxtb	r3, r3
 80034ca:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 80034cc:	683b      	ldr	r3, [r7, #0]
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d104      	bne.n	80034dc <HAL_TIM_IC_Start_IT+0x78>
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80034d8:	b2db      	uxtb	r3, r3
 80034da:	e013      	b.n	8003504 <HAL_TIM_IC_Start_IT+0xa0>
 80034dc:	683b      	ldr	r3, [r7, #0]
 80034de:	2b04      	cmp	r3, #4
 80034e0:	d104      	bne.n	80034ec <HAL_TIM_IC_Start_IT+0x88>
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80034e8:	b2db      	uxtb	r3, r3
 80034ea:	e00b      	b.n	8003504 <HAL_TIM_IC_Start_IT+0xa0>
 80034ec:	683b      	ldr	r3, [r7, #0]
 80034ee:	2b08      	cmp	r3, #8
 80034f0:	d104      	bne.n	80034fc <HAL_TIM_IC_Start_IT+0x98>
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 80034f8:	b2db      	uxtb	r3, r3
 80034fa:	e003      	b.n	8003504 <HAL_TIM_IC_Start_IT+0xa0>
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	f893 3047 	ldrb.w	r3, [r3, #71]	@ 0x47
 8003502:	b2db      	uxtb	r3, r3
 8003504:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8003506:	7bbb      	ldrb	r3, [r7, #14]
 8003508:	2b01      	cmp	r3, #1
 800350a:	d102      	bne.n	8003512 <HAL_TIM_IC_Start_IT+0xae>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 800350c:	7b7b      	ldrb	r3, [r7, #13]
 800350e:	2b01      	cmp	r3, #1
 8003510:	d001      	beq.n	8003516 <HAL_TIM_IC_Start_IT+0xb2>
  {
    return HAL_ERROR;
 8003512:	2301      	movs	r3, #1
 8003514:	e0e2      	b.n	80036dc <HAL_TIM_IC_Start_IT+0x278>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003516:	683b      	ldr	r3, [r7, #0]
 8003518:	2b00      	cmp	r3, #0
 800351a:	d104      	bne.n	8003526 <HAL_TIM_IC_Start_IT+0xc2>
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	2202      	movs	r2, #2
 8003520:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003524:	e023      	b.n	800356e <HAL_TIM_IC_Start_IT+0x10a>
 8003526:	683b      	ldr	r3, [r7, #0]
 8003528:	2b04      	cmp	r3, #4
 800352a:	d104      	bne.n	8003536 <HAL_TIM_IC_Start_IT+0xd2>
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	2202      	movs	r2, #2
 8003530:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003534:	e01b      	b.n	800356e <HAL_TIM_IC_Start_IT+0x10a>
 8003536:	683b      	ldr	r3, [r7, #0]
 8003538:	2b08      	cmp	r3, #8
 800353a:	d104      	bne.n	8003546 <HAL_TIM_IC_Start_IT+0xe2>
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	2202      	movs	r2, #2
 8003540:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003544:	e013      	b.n	800356e <HAL_TIM_IC_Start_IT+0x10a>
 8003546:	683b      	ldr	r3, [r7, #0]
 8003548:	2b0c      	cmp	r3, #12
 800354a:	d104      	bne.n	8003556 <HAL_TIM_IC_Start_IT+0xf2>
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	2202      	movs	r2, #2
 8003550:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003554:	e00b      	b.n	800356e <HAL_TIM_IC_Start_IT+0x10a>
 8003556:	683b      	ldr	r3, [r7, #0]
 8003558:	2b10      	cmp	r3, #16
 800355a:	d104      	bne.n	8003566 <HAL_TIM_IC_Start_IT+0x102>
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	2202      	movs	r2, #2
 8003560:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003564:	e003      	b.n	800356e <HAL_TIM_IC_Start_IT+0x10a>
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	2202      	movs	r2, #2
 800356a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800356e:	683b      	ldr	r3, [r7, #0]
 8003570:	2b00      	cmp	r3, #0
 8003572:	d104      	bne.n	800357e <HAL_TIM_IC_Start_IT+0x11a>
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	2202      	movs	r2, #2
 8003578:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800357c:	e013      	b.n	80035a6 <HAL_TIM_IC_Start_IT+0x142>
 800357e:	683b      	ldr	r3, [r7, #0]
 8003580:	2b04      	cmp	r3, #4
 8003582:	d104      	bne.n	800358e <HAL_TIM_IC_Start_IT+0x12a>
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	2202      	movs	r2, #2
 8003588:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800358c:	e00b      	b.n	80035a6 <HAL_TIM_IC_Start_IT+0x142>
 800358e:	683b      	ldr	r3, [r7, #0]
 8003590:	2b08      	cmp	r3, #8
 8003592:	d104      	bne.n	800359e <HAL_TIM_IC_Start_IT+0x13a>
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	2202      	movs	r2, #2
 8003598:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800359c:	e003      	b.n	80035a6 <HAL_TIM_IC_Start_IT+0x142>
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	2202      	movs	r2, #2
 80035a2:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  switch (Channel)
 80035a6:	683b      	ldr	r3, [r7, #0]
 80035a8:	2b0c      	cmp	r3, #12
 80035aa:	d841      	bhi.n	8003630 <HAL_TIM_IC_Start_IT+0x1cc>
 80035ac:	a201      	add	r2, pc, #4	@ (adr r2, 80035b4 <HAL_TIM_IC_Start_IT+0x150>)
 80035ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80035b2:	bf00      	nop
 80035b4:	080035e9 	.word	0x080035e9
 80035b8:	08003631 	.word	0x08003631
 80035bc:	08003631 	.word	0x08003631
 80035c0:	08003631 	.word	0x08003631
 80035c4:	080035fb 	.word	0x080035fb
 80035c8:	08003631 	.word	0x08003631
 80035cc:	08003631 	.word	0x08003631
 80035d0:	08003631 	.word	0x08003631
 80035d4:	0800360d 	.word	0x0800360d
 80035d8:	08003631 	.word	0x08003631
 80035dc:	08003631 	.word	0x08003631
 80035e0:	08003631 	.word	0x08003631
 80035e4:	0800361f 	.word	0x0800361f
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	68da      	ldr	r2, [r3, #12]
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	f042 0202 	orr.w	r2, r2, #2
 80035f6:	60da      	str	r2, [r3, #12]
      break;
 80035f8:	e01d      	b.n	8003636 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	68da      	ldr	r2, [r3, #12]
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	f042 0204 	orr.w	r2, r2, #4
 8003608:	60da      	str	r2, [r3, #12]
      break;
 800360a:	e014      	b.n	8003636 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	68da      	ldr	r2, [r3, #12]
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	f042 0208 	orr.w	r2, r2, #8
 800361a:	60da      	str	r2, [r3, #12]
      break;
 800361c:	e00b      	b.n	8003636 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	68da      	ldr	r2, [r3, #12]
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	f042 0210 	orr.w	r2, r2, #16
 800362c:	60da      	str	r2, [r3, #12]
      break;
 800362e:	e002      	b.n	8003636 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    default:
      status = HAL_ERROR;
 8003630:	2301      	movs	r3, #1
 8003632:	73fb      	strb	r3, [r7, #15]
      break;
 8003634:	bf00      	nop
  }

  if (status == HAL_OK)
 8003636:	7bfb      	ldrb	r3, [r7, #15]
 8003638:	2b00      	cmp	r3, #0
 800363a:	d14e      	bne.n	80036da <HAL_TIM_IC_Start_IT+0x276>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	2201      	movs	r2, #1
 8003642:	6839      	ldr	r1, [r7, #0]
 8003644:	4618      	mov	r0, r3
 8003646:	f001 f9ef 	bl	8004a28 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	4a25      	ldr	r2, [pc, #148]	@ (80036e4 <HAL_TIM_IC_Start_IT+0x280>)
 8003650:	4293      	cmp	r3, r2
 8003652:	d022      	beq.n	800369a <HAL_TIM_IC_Start_IT+0x236>
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800365c:	d01d      	beq.n	800369a <HAL_TIM_IC_Start_IT+0x236>
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	4a21      	ldr	r2, [pc, #132]	@ (80036e8 <HAL_TIM_IC_Start_IT+0x284>)
 8003664:	4293      	cmp	r3, r2
 8003666:	d018      	beq.n	800369a <HAL_TIM_IC_Start_IT+0x236>
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	4a1f      	ldr	r2, [pc, #124]	@ (80036ec <HAL_TIM_IC_Start_IT+0x288>)
 800366e:	4293      	cmp	r3, r2
 8003670:	d013      	beq.n	800369a <HAL_TIM_IC_Start_IT+0x236>
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	4a1e      	ldr	r2, [pc, #120]	@ (80036f0 <HAL_TIM_IC_Start_IT+0x28c>)
 8003678:	4293      	cmp	r3, r2
 800367a:	d00e      	beq.n	800369a <HAL_TIM_IC_Start_IT+0x236>
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	4a1c      	ldr	r2, [pc, #112]	@ (80036f4 <HAL_TIM_IC_Start_IT+0x290>)
 8003682:	4293      	cmp	r3, r2
 8003684:	d009      	beq.n	800369a <HAL_TIM_IC_Start_IT+0x236>
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	4a1b      	ldr	r2, [pc, #108]	@ (80036f8 <HAL_TIM_IC_Start_IT+0x294>)
 800368c:	4293      	cmp	r3, r2
 800368e:	d004      	beq.n	800369a <HAL_TIM_IC_Start_IT+0x236>
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	4a19      	ldr	r2, [pc, #100]	@ (80036fc <HAL_TIM_IC_Start_IT+0x298>)
 8003696:	4293      	cmp	r3, r2
 8003698:	d115      	bne.n	80036c6 <HAL_TIM_IC_Start_IT+0x262>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	689a      	ldr	r2, [r3, #8]
 80036a0:	4b17      	ldr	r3, [pc, #92]	@ (8003700 <HAL_TIM_IC_Start_IT+0x29c>)
 80036a2:	4013      	ands	r3, r2
 80036a4:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80036a6:	68bb      	ldr	r3, [r7, #8]
 80036a8:	2b06      	cmp	r3, #6
 80036aa:	d015      	beq.n	80036d8 <HAL_TIM_IC_Start_IT+0x274>
 80036ac:	68bb      	ldr	r3, [r7, #8]
 80036ae:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80036b2:	d011      	beq.n	80036d8 <HAL_TIM_IC_Start_IT+0x274>
      {
        __HAL_TIM_ENABLE(htim);
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	681a      	ldr	r2, [r3, #0]
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	f042 0201 	orr.w	r2, r2, #1
 80036c2:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80036c4:	e008      	b.n	80036d8 <HAL_TIM_IC_Start_IT+0x274>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	681a      	ldr	r2, [r3, #0]
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	f042 0201 	orr.w	r2, r2, #1
 80036d4:	601a      	str	r2, [r3, #0]
 80036d6:	e000      	b.n	80036da <HAL_TIM_IC_Start_IT+0x276>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80036d8:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 80036da:	7bfb      	ldrb	r3, [r7, #15]
}
 80036dc:	4618      	mov	r0, r3
 80036de:	3710      	adds	r7, #16
 80036e0:	46bd      	mov	sp, r7
 80036e2:	bd80      	pop	{r7, pc}
 80036e4:	40010000 	.word	0x40010000
 80036e8:	40000400 	.word	0x40000400
 80036ec:	40000800 	.word	0x40000800
 80036f0:	40000c00 	.word	0x40000c00
 80036f4:	40010400 	.word	0x40010400
 80036f8:	40014000 	.word	0x40014000
 80036fc:	40001800 	.word	0x40001800
 8003700:	00010007 	.word	0x00010007

08003704 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003704:	b580      	push	{r7, lr}
 8003706:	b084      	sub	sp, #16
 8003708:	af00      	add	r7, sp, #0
 800370a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	68db      	ldr	r3, [r3, #12]
 8003712:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	691b      	ldr	r3, [r3, #16]
 800371a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800371c:	68bb      	ldr	r3, [r7, #8]
 800371e:	f003 0302 	and.w	r3, r3, #2
 8003722:	2b00      	cmp	r3, #0
 8003724:	d020      	beq.n	8003768 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	f003 0302 	and.w	r3, r3, #2
 800372c:	2b00      	cmp	r3, #0
 800372e:	d01b      	beq.n	8003768 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	f06f 0202 	mvn.w	r2, #2
 8003738:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	2201      	movs	r2, #1
 800373e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	699b      	ldr	r3, [r3, #24]
 8003746:	f003 0303 	and.w	r3, r3, #3
 800374a:	2b00      	cmp	r3, #0
 800374c:	d003      	beq.n	8003756 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800374e:	6878      	ldr	r0, [r7, #4]
 8003750:	f7fd f886 	bl	8000860 <HAL_TIM_IC_CaptureCallback>
 8003754:	e005      	b.n	8003762 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003756:	6878      	ldr	r0, [r7, #4]
 8003758:	f000 fbe6 	bl	8003f28 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800375c:	6878      	ldr	r0, [r7, #4]
 800375e:	f000 fbed 	bl	8003f3c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	2200      	movs	r2, #0
 8003766:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003768:	68bb      	ldr	r3, [r7, #8]
 800376a:	f003 0304 	and.w	r3, r3, #4
 800376e:	2b00      	cmp	r3, #0
 8003770:	d020      	beq.n	80037b4 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	f003 0304 	and.w	r3, r3, #4
 8003778:	2b00      	cmp	r3, #0
 800377a:	d01b      	beq.n	80037b4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	f06f 0204 	mvn.w	r2, #4
 8003784:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	2202      	movs	r2, #2
 800378a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	699b      	ldr	r3, [r3, #24]
 8003792:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003796:	2b00      	cmp	r3, #0
 8003798:	d003      	beq.n	80037a2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800379a:	6878      	ldr	r0, [r7, #4]
 800379c:	f7fd f860 	bl	8000860 <HAL_TIM_IC_CaptureCallback>
 80037a0:	e005      	b.n	80037ae <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80037a2:	6878      	ldr	r0, [r7, #4]
 80037a4:	f000 fbc0 	bl	8003f28 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80037a8:	6878      	ldr	r0, [r7, #4]
 80037aa:	f000 fbc7 	bl	8003f3c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	2200      	movs	r2, #0
 80037b2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80037b4:	68bb      	ldr	r3, [r7, #8]
 80037b6:	f003 0308 	and.w	r3, r3, #8
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d020      	beq.n	8003800 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	f003 0308 	and.w	r3, r3, #8
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d01b      	beq.n	8003800 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	f06f 0208 	mvn.w	r2, #8
 80037d0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	2204      	movs	r2, #4
 80037d6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	69db      	ldr	r3, [r3, #28]
 80037de:	f003 0303 	and.w	r3, r3, #3
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d003      	beq.n	80037ee <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80037e6:	6878      	ldr	r0, [r7, #4]
 80037e8:	f7fd f83a 	bl	8000860 <HAL_TIM_IC_CaptureCallback>
 80037ec:	e005      	b.n	80037fa <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80037ee:	6878      	ldr	r0, [r7, #4]
 80037f0:	f000 fb9a 	bl	8003f28 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80037f4:	6878      	ldr	r0, [r7, #4]
 80037f6:	f000 fba1 	bl	8003f3c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	2200      	movs	r2, #0
 80037fe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003800:	68bb      	ldr	r3, [r7, #8]
 8003802:	f003 0310 	and.w	r3, r3, #16
 8003806:	2b00      	cmp	r3, #0
 8003808:	d020      	beq.n	800384c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	f003 0310 	and.w	r3, r3, #16
 8003810:	2b00      	cmp	r3, #0
 8003812:	d01b      	beq.n	800384c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	f06f 0210 	mvn.w	r2, #16
 800381c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	2208      	movs	r2, #8
 8003822:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	69db      	ldr	r3, [r3, #28]
 800382a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800382e:	2b00      	cmp	r3, #0
 8003830:	d003      	beq.n	800383a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003832:	6878      	ldr	r0, [r7, #4]
 8003834:	f7fd f814 	bl	8000860 <HAL_TIM_IC_CaptureCallback>
 8003838:	e005      	b.n	8003846 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800383a:	6878      	ldr	r0, [r7, #4]
 800383c:	f000 fb74 	bl	8003f28 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003840:	6878      	ldr	r0, [r7, #4]
 8003842:	f000 fb7b 	bl	8003f3c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	2200      	movs	r2, #0
 800384a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800384c:	68bb      	ldr	r3, [r7, #8]
 800384e:	f003 0301 	and.w	r3, r3, #1
 8003852:	2b00      	cmp	r3, #0
 8003854:	d00c      	beq.n	8003870 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	f003 0301 	and.w	r3, r3, #1
 800385c:	2b00      	cmp	r3, #0
 800385e:	d007      	beq.n	8003870 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	f06f 0201 	mvn.w	r2, #1
 8003868:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800386a:	6878      	ldr	r0, [r7, #4]
 800386c:	f000 fb52 	bl	8003f14 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8003870:	68bb      	ldr	r3, [r7, #8]
 8003872:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003876:	2b00      	cmp	r3, #0
 8003878:	d104      	bne.n	8003884 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800387a:	68bb      	ldr	r3, [r7, #8]
 800387c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8003880:	2b00      	cmp	r3, #0
 8003882:	d00c      	beq.n	800389e <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800388a:	2b00      	cmp	r3, #0
 800388c:	d007      	beq.n	800389e <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8003896:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003898:	6878      	ldr	r0, [r7, #4]
 800389a:	f001 f983 	bl	8004ba4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800389e:	68bb      	ldr	r3, [r7, #8]
 80038a0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d00c      	beq.n	80038c2 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d007      	beq.n	80038c2 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 80038ba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80038bc:	6878      	ldr	r0, [r7, #4]
 80038be:	f001 f97b 	bl	8004bb8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80038c2:	68bb      	ldr	r3, [r7, #8]
 80038c4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d00c      	beq.n	80038e6 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d007      	beq.n	80038e6 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80038de:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80038e0:	6878      	ldr	r0, [r7, #4]
 80038e2:	f000 fb35 	bl	8003f50 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80038e6:	68bb      	ldr	r3, [r7, #8]
 80038e8:	f003 0320 	and.w	r3, r3, #32
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d00c      	beq.n	800390a <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	f003 0320 	and.w	r3, r3, #32
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d007      	beq.n	800390a <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	f06f 0220 	mvn.w	r2, #32
 8003902:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003904:	6878      	ldr	r0, [r7, #4]
 8003906:	f001 f943 	bl	8004b90 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800390a:	bf00      	nop
 800390c:	3710      	adds	r7, #16
 800390e:	46bd      	mov	sp, r7
 8003910:	bd80      	pop	{r7, pc}

08003912 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8003912:	b580      	push	{r7, lr}
 8003914:	b086      	sub	sp, #24
 8003916:	af00      	add	r7, sp, #0
 8003918:	60f8      	str	r0, [r7, #12]
 800391a:	60b9      	str	r1, [r7, #8]
 800391c:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800391e:	2300      	movs	r3, #0
 8003920:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003928:	2b01      	cmp	r3, #1
 800392a:	d101      	bne.n	8003930 <HAL_TIM_IC_ConfigChannel+0x1e>
 800392c:	2302      	movs	r3, #2
 800392e:	e088      	b.n	8003a42 <HAL_TIM_IC_ConfigChannel+0x130>
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	2201      	movs	r2, #1
 8003934:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	2b00      	cmp	r3, #0
 800393c:	d11b      	bne.n	8003976 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8003942:	68bb      	ldr	r3, [r7, #8]
 8003944:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8003946:	68bb      	ldr	r3, [r7, #8]
 8003948:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800394a:	68bb      	ldr	r3, [r7, #8]
 800394c:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 800394e:	f000 fea7 	bl	80046a0 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	699a      	ldr	r2, [r3, #24]
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	f022 020c 	bic.w	r2, r2, #12
 8003960:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	6999      	ldr	r1, [r3, #24]
 8003968:	68bb      	ldr	r3, [r7, #8]
 800396a:	689a      	ldr	r2, [r3, #8]
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	430a      	orrs	r2, r1
 8003972:	619a      	str	r2, [r3, #24]
 8003974:	e060      	b.n	8003a38 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	2b04      	cmp	r3, #4
 800397a:	d11c      	bne.n	80039b6 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8003980:	68bb      	ldr	r3, [r7, #8]
 8003982:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8003984:	68bb      	ldr	r3, [r7, #8]
 8003986:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8003988:	68bb      	ldr	r3, [r7, #8]
 800398a:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 800398c:	f000 ff2b 	bl	80047e6 <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	699a      	ldr	r2, [r3, #24]
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 800399e:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	6999      	ldr	r1, [r3, #24]
 80039a6:	68bb      	ldr	r3, [r7, #8]
 80039a8:	689b      	ldr	r3, [r3, #8]
 80039aa:	021a      	lsls	r2, r3, #8
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	430a      	orrs	r2, r1
 80039b2:	619a      	str	r2, [r3, #24]
 80039b4:	e040      	b.n	8003a38 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	2b08      	cmp	r3, #8
 80039ba:	d11b      	bne.n	80039f4 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80039c0:	68bb      	ldr	r3, [r7, #8]
 80039c2:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80039c4:	68bb      	ldr	r3, [r7, #8]
 80039c6:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80039c8:	68bb      	ldr	r3, [r7, #8]
 80039ca:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 80039cc:	f000 ff78 	bl	80048c0 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	69da      	ldr	r2, [r3, #28]
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	f022 020c 	bic.w	r2, r2, #12
 80039de:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	69d9      	ldr	r1, [r3, #28]
 80039e6:	68bb      	ldr	r3, [r7, #8]
 80039e8:	689a      	ldr	r2, [r3, #8]
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	430a      	orrs	r2, r1
 80039f0:	61da      	str	r2, [r3, #28]
 80039f2:	e021      	b.n	8003a38 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	2b0c      	cmp	r3, #12
 80039f8:	d11c      	bne.n	8003a34 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80039fe:	68bb      	ldr	r3, [r7, #8]
 8003a00:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8003a02:	68bb      	ldr	r3, [r7, #8]
 8003a04:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8003a06:	68bb      	ldr	r3, [r7, #8]
 8003a08:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 8003a0a:	f000 ff95 	bl	8004938 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	69da      	ldr	r2, [r3, #28]
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8003a1c:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	69d9      	ldr	r1, [r3, #28]
 8003a24:	68bb      	ldr	r3, [r7, #8]
 8003a26:	689b      	ldr	r3, [r3, #8]
 8003a28:	021a      	lsls	r2, r3, #8
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	430a      	orrs	r2, r1
 8003a30:	61da      	str	r2, [r3, #28]
 8003a32:	e001      	b.n	8003a38 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8003a34:	2301      	movs	r3, #1
 8003a36:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	2200      	movs	r2, #0
 8003a3c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003a40:	7dfb      	ldrb	r3, [r7, #23]
}
 8003a42:	4618      	mov	r0, r3
 8003a44:	3718      	adds	r7, #24
 8003a46:	46bd      	mov	sp, r7
 8003a48:	bd80      	pop	{r7, pc}
	...

08003a4c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003a4c:	b580      	push	{r7, lr}
 8003a4e:	b086      	sub	sp, #24
 8003a50:	af00      	add	r7, sp, #0
 8003a52:	60f8      	str	r0, [r7, #12]
 8003a54:	60b9      	str	r1, [r7, #8]
 8003a56:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003a58:	2300      	movs	r3, #0
 8003a5a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003a62:	2b01      	cmp	r3, #1
 8003a64:	d101      	bne.n	8003a6a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003a66:	2302      	movs	r3, #2
 8003a68:	e0ff      	b.n	8003c6a <HAL_TIM_PWM_ConfigChannel+0x21e>
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	2201      	movs	r2, #1
 8003a6e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	2b14      	cmp	r3, #20
 8003a76:	f200 80f0 	bhi.w	8003c5a <HAL_TIM_PWM_ConfigChannel+0x20e>
 8003a7a:	a201      	add	r2, pc, #4	@ (adr r2, 8003a80 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003a7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a80:	08003ad5 	.word	0x08003ad5
 8003a84:	08003c5b 	.word	0x08003c5b
 8003a88:	08003c5b 	.word	0x08003c5b
 8003a8c:	08003c5b 	.word	0x08003c5b
 8003a90:	08003b15 	.word	0x08003b15
 8003a94:	08003c5b 	.word	0x08003c5b
 8003a98:	08003c5b 	.word	0x08003c5b
 8003a9c:	08003c5b 	.word	0x08003c5b
 8003aa0:	08003b57 	.word	0x08003b57
 8003aa4:	08003c5b 	.word	0x08003c5b
 8003aa8:	08003c5b 	.word	0x08003c5b
 8003aac:	08003c5b 	.word	0x08003c5b
 8003ab0:	08003b97 	.word	0x08003b97
 8003ab4:	08003c5b 	.word	0x08003c5b
 8003ab8:	08003c5b 	.word	0x08003c5b
 8003abc:	08003c5b 	.word	0x08003c5b
 8003ac0:	08003bd9 	.word	0x08003bd9
 8003ac4:	08003c5b 	.word	0x08003c5b
 8003ac8:	08003c5b 	.word	0x08003c5b
 8003acc:	08003c5b 	.word	0x08003c5b
 8003ad0:	08003c19 	.word	0x08003c19
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	68b9      	ldr	r1, [r7, #8]
 8003ada:	4618      	mov	r0, r3
 8003adc:	f000 faee 	bl	80040bc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	699a      	ldr	r2, [r3, #24]
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	f042 0208 	orr.w	r2, r2, #8
 8003aee:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	699a      	ldr	r2, [r3, #24]
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	f022 0204 	bic.w	r2, r2, #4
 8003afe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	6999      	ldr	r1, [r3, #24]
 8003b06:	68bb      	ldr	r3, [r7, #8]
 8003b08:	691a      	ldr	r2, [r3, #16]
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	430a      	orrs	r2, r1
 8003b10:	619a      	str	r2, [r3, #24]
      break;
 8003b12:	e0a5      	b.n	8003c60 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	68b9      	ldr	r1, [r7, #8]
 8003b1a:	4618      	mov	r0, r3
 8003b1c:	f000 fb40 	bl	80041a0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	699a      	ldr	r2, [r3, #24]
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003b2e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	699a      	ldr	r2, [r3, #24]
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003b3e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	6999      	ldr	r1, [r3, #24]
 8003b46:	68bb      	ldr	r3, [r7, #8]
 8003b48:	691b      	ldr	r3, [r3, #16]
 8003b4a:	021a      	lsls	r2, r3, #8
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	430a      	orrs	r2, r1
 8003b52:	619a      	str	r2, [r3, #24]
      break;
 8003b54:	e084      	b.n	8003c60 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	68b9      	ldr	r1, [r7, #8]
 8003b5c:	4618      	mov	r0, r3
 8003b5e:	f000 fb97 	bl	8004290 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	69da      	ldr	r2, [r3, #28]
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	f042 0208 	orr.w	r2, r2, #8
 8003b70:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	69da      	ldr	r2, [r3, #28]
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	f022 0204 	bic.w	r2, r2, #4
 8003b80:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	69d9      	ldr	r1, [r3, #28]
 8003b88:	68bb      	ldr	r3, [r7, #8]
 8003b8a:	691a      	ldr	r2, [r3, #16]
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	430a      	orrs	r2, r1
 8003b92:	61da      	str	r2, [r3, #28]
      break;
 8003b94:	e064      	b.n	8003c60 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	68b9      	ldr	r1, [r7, #8]
 8003b9c:	4618      	mov	r0, r3
 8003b9e:	f000 fbed 	bl	800437c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	69da      	ldr	r2, [r3, #28]
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003bb0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	69da      	ldr	r2, [r3, #28]
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003bc0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	69d9      	ldr	r1, [r3, #28]
 8003bc8:	68bb      	ldr	r3, [r7, #8]
 8003bca:	691b      	ldr	r3, [r3, #16]
 8003bcc:	021a      	lsls	r2, r3, #8
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	430a      	orrs	r2, r1
 8003bd4:	61da      	str	r2, [r3, #28]
      break;
 8003bd6:	e043      	b.n	8003c60 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	68b9      	ldr	r1, [r7, #8]
 8003bde:	4618      	mov	r0, r3
 8003be0:	f000 fc24 	bl	800442c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	f042 0208 	orr.w	r2, r2, #8
 8003bf2:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	f022 0204 	bic.w	r2, r2, #4
 8003c02:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8003c0a:	68bb      	ldr	r3, [r7, #8]
 8003c0c:	691a      	ldr	r2, [r3, #16]
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	430a      	orrs	r2, r1
 8003c14:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8003c16:	e023      	b.n	8003c60 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	68b9      	ldr	r1, [r7, #8]
 8003c1e:	4618      	mov	r0, r3
 8003c20:	f000 fc56 	bl	80044d0 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003c32:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003c42:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8003c4a:	68bb      	ldr	r3, [r7, #8]
 8003c4c:	691b      	ldr	r3, [r3, #16]
 8003c4e:	021a      	lsls	r2, r3, #8
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	430a      	orrs	r2, r1
 8003c56:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8003c58:	e002      	b.n	8003c60 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8003c5a:	2301      	movs	r3, #1
 8003c5c:	75fb      	strb	r3, [r7, #23]
      break;
 8003c5e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	2200      	movs	r2, #0
 8003c64:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003c68:	7dfb      	ldrb	r3, [r7, #23]
}
 8003c6a:	4618      	mov	r0, r3
 8003c6c:	3718      	adds	r7, #24
 8003c6e:	46bd      	mov	sp, r7
 8003c70:	bd80      	pop	{r7, pc}
 8003c72:	bf00      	nop

08003c74 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003c74:	b580      	push	{r7, lr}
 8003c76:	b084      	sub	sp, #16
 8003c78:	af00      	add	r7, sp, #0
 8003c7a:	6078      	str	r0, [r7, #4]
 8003c7c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003c7e:	2300      	movs	r3, #0
 8003c80:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003c88:	2b01      	cmp	r3, #1
 8003c8a:	d101      	bne.n	8003c90 <HAL_TIM_ConfigClockSource+0x1c>
 8003c8c:	2302      	movs	r3, #2
 8003c8e:	e0b4      	b.n	8003dfa <HAL_TIM_ConfigClockSource+0x186>
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	2201      	movs	r2, #1
 8003c94:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	2202      	movs	r2, #2
 8003c9c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	689b      	ldr	r3, [r3, #8]
 8003ca6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003ca8:	68ba      	ldr	r2, [r7, #8]
 8003caa:	4b56      	ldr	r3, [pc, #344]	@ (8003e04 <HAL_TIM_ConfigClockSource+0x190>)
 8003cac:	4013      	ands	r3, r2
 8003cae:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003cb0:	68bb      	ldr	r3, [r7, #8]
 8003cb2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003cb6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	68ba      	ldr	r2, [r7, #8]
 8003cbe:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003cc0:	683b      	ldr	r3, [r7, #0]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003cc8:	d03e      	beq.n	8003d48 <HAL_TIM_ConfigClockSource+0xd4>
 8003cca:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003cce:	f200 8087 	bhi.w	8003de0 <HAL_TIM_ConfigClockSource+0x16c>
 8003cd2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003cd6:	f000 8086 	beq.w	8003de6 <HAL_TIM_ConfigClockSource+0x172>
 8003cda:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003cde:	d87f      	bhi.n	8003de0 <HAL_TIM_ConfigClockSource+0x16c>
 8003ce0:	2b70      	cmp	r3, #112	@ 0x70
 8003ce2:	d01a      	beq.n	8003d1a <HAL_TIM_ConfigClockSource+0xa6>
 8003ce4:	2b70      	cmp	r3, #112	@ 0x70
 8003ce6:	d87b      	bhi.n	8003de0 <HAL_TIM_ConfigClockSource+0x16c>
 8003ce8:	2b60      	cmp	r3, #96	@ 0x60
 8003cea:	d050      	beq.n	8003d8e <HAL_TIM_ConfigClockSource+0x11a>
 8003cec:	2b60      	cmp	r3, #96	@ 0x60
 8003cee:	d877      	bhi.n	8003de0 <HAL_TIM_ConfigClockSource+0x16c>
 8003cf0:	2b50      	cmp	r3, #80	@ 0x50
 8003cf2:	d03c      	beq.n	8003d6e <HAL_TIM_ConfigClockSource+0xfa>
 8003cf4:	2b50      	cmp	r3, #80	@ 0x50
 8003cf6:	d873      	bhi.n	8003de0 <HAL_TIM_ConfigClockSource+0x16c>
 8003cf8:	2b40      	cmp	r3, #64	@ 0x40
 8003cfa:	d058      	beq.n	8003dae <HAL_TIM_ConfigClockSource+0x13a>
 8003cfc:	2b40      	cmp	r3, #64	@ 0x40
 8003cfe:	d86f      	bhi.n	8003de0 <HAL_TIM_ConfigClockSource+0x16c>
 8003d00:	2b30      	cmp	r3, #48	@ 0x30
 8003d02:	d064      	beq.n	8003dce <HAL_TIM_ConfigClockSource+0x15a>
 8003d04:	2b30      	cmp	r3, #48	@ 0x30
 8003d06:	d86b      	bhi.n	8003de0 <HAL_TIM_ConfigClockSource+0x16c>
 8003d08:	2b20      	cmp	r3, #32
 8003d0a:	d060      	beq.n	8003dce <HAL_TIM_ConfigClockSource+0x15a>
 8003d0c:	2b20      	cmp	r3, #32
 8003d0e:	d867      	bhi.n	8003de0 <HAL_TIM_ConfigClockSource+0x16c>
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d05c      	beq.n	8003dce <HAL_TIM_ConfigClockSource+0x15a>
 8003d14:	2b10      	cmp	r3, #16
 8003d16:	d05a      	beq.n	8003dce <HAL_TIM_ConfigClockSource+0x15a>
 8003d18:	e062      	b.n	8003de0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003d1e:	683b      	ldr	r3, [r7, #0]
 8003d20:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003d22:	683b      	ldr	r3, [r7, #0]
 8003d24:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003d26:	683b      	ldr	r3, [r7, #0]
 8003d28:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003d2a:	f000 fe5d 	bl	80049e8 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	689b      	ldr	r3, [r3, #8]
 8003d34:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003d36:	68bb      	ldr	r3, [r7, #8]
 8003d38:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8003d3c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	68ba      	ldr	r2, [r7, #8]
 8003d44:	609a      	str	r2, [r3, #8]
      break;
 8003d46:	e04f      	b.n	8003de8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003d4c:	683b      	ldr	r3, [r7, #0]
 8003d4e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003d50:	683b      	ldr	r3, [r7, #0]
 8003d52:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003d54:	683b      	ldr	r3, [r7, #0]
 8003d56:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003d58:	f000 fe46 	bl	80049e8 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	689a      	ldr	r2, [r3, #8]
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003d6a:	609a      	str	r2, [r3, #8]
      break;
 8003d6c:	e03c      	b.n	8003de8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003d72:	683b      	ldr	r3, [r7, #0]
 8003d74:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003d76:	683b      	ldr	r3, [r7, #0]
 8003d78:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003d7a:	461a      	mov	r2, r3
 8003d7c:	f000 fd04 	bl	8004788 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	2150      	movs	r1, #80	@ 0x50
 8003d86:	4618      	mov	r0, r3
 8003d88:	f000 fe13 	bl	80049b2 <TIM_ITRx_SetConfig>
      break;
 8003d8c:	e02c      	b.n	8003de8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003d92:	683b      	ldr	r3, [r7, #0]
 8003d94:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003d96:	683b      	ldr	r3, [r7, #0]
 8003d98:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003d9a:	461a      	mov	r2, r3
 8003d9c:	f000 fd60 	bl	8004860 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	2160      	movs	r1, #96	@ 0x60
 8003da6:	4618      	mov	r0, r3
 8003da8:	f000 fe03 	bl	80049b2 <TIM_ITRx_SetConfig>
      break;
 8003dac:	e01c      	b.n	8003de8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003db2:	683b      	ldr	r3, [r7, #0]
 8003db4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003db6:	683b      	ldr	r3, [r7, #0]
 8003db8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003dba:	461a      	mov	r2, r3
 8003dbc:	f000 fce4 	bl	8004788 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	2140      	movs	r1, #64	@ 0x40
 8003dc6:	4618      	mov	r0, r3
 8003dc8:	f000 fdf3 	bl	80049b2 <TIM_ITRx_SetConfig>
      break;
 8003dcc:	e00c      	b.n	8003de8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681a      	ldr	r2, [r3, #0]
 8003dd2:	683b      	ldr	r3, [r7, #0]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	4619      	mov	r1, r3
 8003dd8:	4610      	mov	r0, r2
 8003dda:	f000 fdea 	bl	80049b2 <TIM_ITRx_SetConfig>
      break;
 8003dde:	e003      	b.n	8003de8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003de0:	2301      	movs	r3, #1
 8003de2:	73fb      	strb	r3, [r7, #15]
      break;
 8003de4:	e000      	b.n	8003de8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003de6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	2201      	movs	r2, #1
 8003dec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	2200      	movs	r2, #0
 8003df4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003df8:	7bfb      	ldrb	r3, [r7, #15]
}
 8003dfa:	4618      	mov	r0, r3
 8003dfc:	3710      	adds	r7, #16
 8003dfe:	46bd      	mov	sp, r7
 8003e00:	bd80      	pop	{r7, pc}
 8003e02:	bf00      	nop
 8003e04:	fffeff88 	.word	0xfffeff88

08003e08 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8003e08:	b580      	push	{r7, lr}
 8003e0a:	b082      	sub	sp, #8
 8003e0c:	af00      	add	r7, sp, #0
 8003e0e:	6078      	str	r0, [r7, #4]
 8003e10:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003e18:	2b01      	cmp	r3, #1
 8003e1a:	d101      	bne.n	8003e20 <HAL_TIM_SlaveConfigSynchro+0x18>
 8003e1c:	2302      	movs	r3, #2
 8003e1e:	e031      	b.n	8003e84 <HAL_TIM_SlaveConfigSynchro+0x7c>
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	2201      	movs	r2, #1
 8003e24:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	2202      	movs	r2, #2
 8003e2c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8003e30:	6839      	ldr	r1, [r7, #0]
 8003e32:	6878      	ldr	r0, [r7, #4]
 8003e34:	f000 fba0 	bl	8004578 <TIM_SlaveTimer_SetConfig>
 8003e38:	4603      	mov	r3, r0
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d009      	beq.n	8003e52 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	2201      	movs	r2, #1
 8003e42:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    __HAL_UNLOCK(htim);
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	2200      	movs	r2, #0
 8003e4a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    return HAL_ERROR;
 8003e4e:	2301      	movs	r3, #1
 8003e50:	e018      	b.n	8003e84 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	68da      	ldr	r2, [r3, #12]
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003e60:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	68da      	ldr	r2, [r3, #12]
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8003e70:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	2201      	movs	r2, #1
 8003e76:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	2200      	movs	r2, #0
 8003e7e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003e82:	2300      	movs	r3, #0
}
 8003e84:	4618      	mov	r0, r3
 8003e86:	3708      	adds	r7, #8
 8003e88:	46bd      	mov	sp, r7
 8003e8a:	bd80      	pop	{r7, pc}

08003e8c <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003e8c:	b480      	push	{r7}
 8003e8e:	b085      	sub	sp, #20
 8003e90:	af00      	add	r7, sp, #0
 8003e92:	6078      	str	r0, [r7, #4]
 8003e94:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8003e96:	2300      	movs	r3, #0
 8003e98:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 8003e9a:	683b      	ldr	r3, [r7, #0]
 8003e9c:	2b0c      	cmp	r3, #12
 8003e9e:	d831      	bhi.n	8003f04 <HAL_TIM_ReadCapturedValue+0x78>
 8003ea0:	a201      	add	r2, pc, #4	@ (adr r2, 8003ea8 <HAL_TIM_ReadCapturedValue+0x1c>)
 8003ea2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ea6:	bf00      	nop
 8003ea8:	08003edd 	.word	0x08003edd
 8003eac:	08003f05 	.word	0x08003f05
 8003eb0:	08003f05 	.word	0x08003f05
 8003eb4:	08003f05 	.word	0x08003f05
 8003eb8:	08003ee7 	.word	0x08003ee7
 8003ebc:	08003f05 	.word	0x08003f05
 8003ec0:	08003f05 	.word	0x08003f05
 8003ec4:	08003f05 	.word	0x08003f05
 8003ec8:	08003ef1 	.word	0x08003ef1
 8003ecc:	08003f05 	.word	0x08003f05
 8003ed0:	08003f05 	.word	0x08003f05
 8003ed4:	08003f05 	.word	0x08003f05
 8003ed8:	08003efb 	.word	0x08003efb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003ee2:	60fb      	str	r3, [r7, #12]

      break;
 8003ee4:	e00f      	b.n	8003f06 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003eec:	60fb      	str	r3, [r7, #12]

      break;
 8003eee:	e00a      	b.n	8003f06 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003ef6:	60fb      	str	r3, [r7, #12]

      break;
 8003ef8:	e005      	b.n	8003f06 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f00:	60fb      	str	r3, [r7, #12]

      break;
 8003f02:	e000      	b.n	8003f06 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8003f04:	bf00      	nop
  }

  return tmpreg;
 8003f06:	68fb      	ldr	r3, [r7, #12]
}
 8003f08:	4618      	mov	r0, r3
 8003f0a:	3714      	adds	r7, #20
 8003f0c:	46bd      	mov	sp, r7
 8003f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f12:	4770      	bx	lr

08003f14 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003f14:	b480      	push	{r7}
 8003f16:	b083      	sub	sp, #12
 8003f18:	af00      	add	r7, sp, #0
 8003f1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8003f1c:	bf00      	nop
 8003f1e:	370c      	adds	r7, #12
 8003f20:	46bd      	mov	sp, r7
 8003f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f26:	4770      	bx	lr

08003f28 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003f28:	b480      	push	{r7}
 8003f2a:	b083      	sub	sp, #12
 8003f2c:	af00      	add	r7, sp, #0
 8003f2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003f30:	bf00      	nop
 8003f32:	370c      	adds	r7, #12
 8003f34:	46bd      	mov	sp, r7
 8003f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f3a:	4770      	bx	lr

08003f3c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003f3c:	b480      	push	{r7}
 8003f3e:	b083      	sub	sp, #12
 8003f40:	af00      	add	r7, sp, #0
 8003f42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003f44:	bf00      	nop
 8003f46:	370c      	adds	r7, #12
 8003f48:	46bd      	mov	sp, r7
 8003f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f4e:	4770      	bx	lr

08003f50 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003f50:	b480      	push	{r7}
 8003f52:	b083      	sub	sp, #12
 8003f54:	af00      	add	r7, sp, #0
 8003f56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003f58:	bf00      	nop
 8003f5a:	370c      	adds	r7, #12
 8003f5c:	46bd      	mov	sp, r7
 8003f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f62:	4770      	bx	lr

08003f64 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003f64:	b480      	push	{r7}
 8003f66:	b085      	sub	sp, #20
 8003f68:	af00      	add	r7, sp, #0
 8003f6a:	6078      	str	r0, [r7, #4]
 8003f6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	4a46      	ldr	r2, [pc, #280]	@ (8004090 <TIM_Base_SetConfig+0x12c>)
 8003f78:	4293      	cmp	r3, r2
 8003f7a:	d013      	beq.n	8003fa4 <TIM_Base_SetConfig+0x40>
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003f82:	d00f      	beq.n	8003fa4 <TIM_Base_SetConfig+0x40>
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	4a43      	ldr	r2, [pc, #268]	@ (8004094 <TIM_Base_SetConfig+0x130>)
 8003f88:	4293      	cmp	r3, r2
 8003f8a:	d00b      	beq.n	8003fa4 <TIM_Base_SetConfig+0x40>
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	4a42      	ldr	r2, [pc, #264]	@ (8004098 <TIM_Base_SetConfig+0x134>)
 8003f90:	4293      	cmp	r3, r2
 8003f92:	d007      	beq.n	8003fa4 <TIM_Base_SetConfig+0x40>
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	4a41      	ldr	r2, [pc, #260]	@ (800409c <TIM_Base_SetConfig+0x138>)
 8003f98:	4293      	cmp	r3, r2
 8003f9a:	d003      	beq.n	8003fa4 <TIM_Base_SetConfig+0x40>
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	4a40      	ldr	r2, [pc, #256]	@ (80040a0 <TIM_Base_SetConfig+0x13c>)
 8003fa0:	4293      	cmp	r3, r2
 8003fa2:	d108      	bne.n	8003fb6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003faa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003fac:	683b      	ldr	r3, [r7, #0]
 8003fae:	685b      	ldr	r3, [r3, #4]
 8003fb0:	68fa      	ldr	r2, [r7, #12]
 8003fb2:	4313      	orrs	r3, r2
 8003fb4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	4a35      	ldr	r2, [pc, #212]	@ (8004090 <TIM_Base_SetConfig+0x12c>)
 8003fba:	4293      	cmp	r3, r2
 8003fbc:	d02b      	beq.n	8004016 <TIM_Base_SetConfig+0xb2>
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003fc4:	d027      	beq.n	8004016 <TIM_Base_SetConfig+0xb2>
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	4a32      	ldr	r2, [pc, #200]	@ (8004094 <TIM_Base_SetConfig+0x130>)
 8003fca:	4293      	cmp	r3, r2
 8003fcc:	d023      	beq.n	8004016 <TIM_Base_SetConfig+0xb2>
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	4a31      	ldr	r2, [pc, #196]	@ (8004098 <TIM_Base_SetConfig+0x134>)
 8003fd2:	4293      	cmp	r3, r2
 8003fd4:	d01f      	beq.n	8004016 <TIM_Base_SetConfig+0xb2>
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	4a30      	ldr	r2, [pc, #192]	@ (800409c <TIM_Base_SetConfig+0x138>)
 8003fda:	4293      	cmp	r3, r2
 8003fdc:	d01b      	beq.n	8004016 <TIM_Base_SetConfig+0xb2>
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	4a2f      	ldr	r2, [pc, #188]	@ (80040a0 <TIM_Base_SetConfig+0x13c>)
 8003fe2:	4293      	cmp	r3, r2
 8003fe4:	d017      	beq.n	8004016 <TIM_Base_SetConfig+0xb2>
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	4a2e      	ldr	r2, [pc, #184]	@ (80040a4 <TIM_Base_SetConfig+0x140>)
 8003fea:	4293      	cmp	r3, r2
 8003fec:	d013      	beq.n	8004016 <TIM_Base_SetConfig+0xb2>
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	4a2d      	ldr	r2, [pc, #180]	@ (80040a8 <TIM_Base_SetConfig+0x144>)
 8003ff2:	4293      	cmp	r3, r2
 8003ff4:	d00f      	beq.n	8004016 <TIM_Base_SetConfig+0xb2>
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	4a2c      	ldr	r2, [pc, #176]	@ (80040ac <TIM_Base_SetConfig+0x148>)
 8003ffa:	4293      	cmp	r3, r2
 8003ffc:	d00b      	beq.n	8004016 <TIM_Base_SetConfig+0xb2>
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	4a2b      	ldr	r2, [pc, #172]	@ (80040b0 <TIM_Base_SetConfig+0x14c>)
 8004002:	4293      	cmp	r3, r2
 8004004:	d007      	beq.n	8004016 <TIM_Base_SetConfig+0xb2>
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	4a2a      	ldr	r2, [pc, #168]	@ (80040b4 <TIM_Base_SetConfig+0x150>)
 800400a:	4293      	cmp	r3, r2
 800400c:	d003      	beq.n	8004016 <TIM_Base_SetConfig+0xb2>
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	4a29      	ldr	r2, [pc, #164]	@ (80040b8 <TIM_Base_SetConfig+0x154>)
 8004012:	4293      	cmp	r3, r2
 8004014:	d108      	bne.n	8004028 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800401c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800401e:	683b      	ldr	r3, [r7, #0]
 8004020:	68db      	ldr	r3, [r3, #12]
 8004022:	68fa      	ldr	r2, [r7, #12]
 8004024:	4313      	orrs	r3, r2
 8004026:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800402e:	683b      	ldr	r3, [r7, #0]
 8004030:	695b      	ldr	r3, [r3, #20]
 8004032:	4313      	orrs	r3, r2
 8004034:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	68fa      	ldr	r2, [r7, #12]
 800403a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800403c:	683b      	ldr	r3, [r7, #0]
 800403e:	689a      	ldr	r2, [r3, #8]
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004044:	683b      	ldr	r3, [r7, #0]
 8004046:	681a      	ldr	r2, [r3, #0]
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	4a10      	ldr	r2, [pc, #64]	@ (8004090 <TIM_Base_SetConfig+0x12c>)
 8004050:	4293      	cmp	r3, r2
 8004052:	d003      	beq.n	800405c <TIM_Base_SetConfig+0xf8>
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	4a12      	ldr	r2, [pc, #72]	@ (80040a0 <TIM_Base_SetConfig+0x13c>)
 8004058:	4293      	cmp	r3, r2
 800405a:	d103      	bne.n	8004064 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800405c:	683b      	ldr	r3, [r7, #0]
 800405e:	691a      	ldr	r2, [r3, #16]
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	2201      	movs	r2, #1
 8004068:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	691b      	ldr	r3, [r3, #16]
 800406e:	f003 0301 	and.w	r3, r3, #1
 8004072:	2b01      	cmp	r3, #1
 8004074:	d105      	bne.n	8004082 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	691b      	ldr	r3, [r3, #16]
 800407a:	f023 0201 	bic.w	r2, r3, #1
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	611a      	str	r2, [r3, #16]
  }
}
 8004082:	bf00      	nop
 8004084:	3714      	adds	r7, #20
 8004086:	46bd      	mov	sp, r7
 8004088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800408c:	4770      	bx	lr
 800408e:	bf00      	nop
 8004090:	40010000 	.word	0x40010000
 8004094:	40000400 	.word	0x40000400
 8004098:	40000800 	.word	0x40000800
 800409c:	40000c00 	.word	0x40000c00
 80040a0:	40010400 	.word	0x40010400
 80040a4:	40014000 	.word	0x40014000
 80040a8:	40014400 	.word	0x40014400
 80040ac:	40014800 	.word	0x40014800
 80040b0:	40001800 	.word	0x40001800
 80040b4:	40001c00 	.word	0x40001c00
 80040b8:	40002000 	.word	0x40002000

080040bc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80040bc:	b480      	push	{r7}
 80040be:	b087      	sub	sp, #28
 80040c0:	af00      	add	r7, sp, #0
 80040c2:	6078      	str	r0, [r7, #4]
 80040c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	6a1b      	ldr	r3, [r3, #32]
 80040ca:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	6a1b      	ldr	r3, [r3, #32]
 80040d0:	f023 0201 	bic.w	r2, r3, #1
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	685b      	ldr	r3, [r3, #4]
 80040dc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	699b      	ldr	r3, [r3, #24]
 80040e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80040e4:	68fa      	ldr	r2, [r7, #12]
 80040e6:	4b2b      	ldr	r3, [pc, #172]	@ (8004194 <TIM_OC1_SetConfig+0xd8>)
 80040e8:	4013      	ands	r3, r2
 80040ea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	f023 0303 	bic.w	r3, r3, #3
 80040f2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80040f4:	683b      	ldr	r3, [r7, #0]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	68fa      	ldr	r2, [r7, #12]
 80040fa:	4313      	orrs	r3, r2
 80040fc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80040fe:	697b      	ldr	r3, [r7, #20]
 8004100:	f023 0302 	bic.w	r3, r3, #2
 8004104:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004106:	683b      	ldr	r3, [r7, #0]
 8004108:	689b      	ldr	r3, [r3, #8]
 800410a:	697a      	ldr	r2, [r7, #20]
 800410c:	4313      	orrs	r3, r2
 800410e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	4a21      	ldr	r2, [pc, #132]	@ (8004198 <TIM_OC1_SetConfig+0xdc>)
 8004114:	4293      	cmp	r3, r2
 8004116:	d003      	beq.n	8004120 <TIM_OC1_SetConfig+0x64>
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	4a20      	ldr	r2, [pc, #128]	@ (800419c <TIM_OC1_SetConfig+0xe0>)
 800411c:	4293      	cmp	r3, r2
 800411e:	d10c      	bne.n	800413a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004120:	697b      	ldr	r3, [r7, #20]
 8004122:	f023 0308 	bic.w	r3, r3, #8
 8004126:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004128:	683b      	ldr	r3, [r7, #0]
 800412a:	68db      	ldr	r3, [r3, #12]
 800412c:	697a      	ldr	r2, [r7, #20]
 800412e:	4313      	orrs	r3, r2
 8004130:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004132:	697b      	ldr	r3, [r7, #20]
 8004134:	f023 0304 	bic.w	r3, r3, #4
 8004138:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	4a16      	ldr	r2, [pc, #88]	@ (8004198 <TIM_OC1_SetConfig+0xdc>)
 800413e:	4293      	cmp	r3, r2
 8004140:	d003      	beq.n	800414a <TIM_OC1_SetConfig+0x8e>
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	4a15      	ldr	r2, [pc, #84]	@ (800419c <TIM_OC1_SetConfig+0xe0>)
 8004146:	4293      	cmp	r3, r2
 8004148:	d111      	bne.n	800416e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800414a:	693b      	ldr	r3, [r7, #16]
 800414c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004150:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004152:	693b      	ldr	r3, [r7, #16]
 8004154:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004158:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800415a:	683b      	ldr	r3, [r7, #0]
 800415c:	695b      	ldr	r3, [r3, #20]
 800415e:	693a      	ldr	r2, [r7, #16]
 8004160:	4313      	orrs	r3, r2
 8004162:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004164:	683b      	ldr	r3, [r7, #0]
 8004166:	699b      	ldr	r3, [r3, #24]
 8004168:	693a      	ldr	r2, [r7, #16]
 800416a:	4313      	orrs	r3, r2
 800416c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	693a      	ldr	r2, [r7, #16]
 8004172:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	68fa      	ldr	r2, [r7, #12]
 8004178:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800417a:	683b      	ldr	r3, [r7, #0]
 800417c:	685a      	ldr	r2, [r3, #4]
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	697a      	ldr	r2, [r7, #20]
 8004186:	621a      	str	r2, [r3, #32]
}
 8004188:	bf00      	nop
 800418a:	371c      	adds	r7, #28
 800418c:	46bd      	mov	sp, r7
 800418e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004192:	4770      	bx	lr
 8004194:	fffeff8f 	.word	0xfffeff8f
 8004198:	40010000 	.word	0x40010000
 800419c:	40010400 	.word	0x40010400

080041a0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80041a0:	b480      	push	{r7}
 80041a2:	b087      	sub	sp, #28
 80041a4:	af00      	add	r7, sp, #0
 80041a6:	6078      	str	r0, [r7, #4]
 80041a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	6a1b      	ldr	r3, [r3, #32]
 80041ae:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	6a1b      	ldr	r3, [r3, #32]
 80041b4:	f023 0210 	bic.w	r2, r3, #16
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	685b      	ldr	r3, [r3, #4]
 80041c0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	699b      	ldr	r3, [r3, #24]
 80041c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80041c8:	68fa      	ldr	r2, [r7, #12]
 80041ca:	4b2e      	ldr	r3, [pc, #184]	@ (8004284 <TIM_OC2_SetConfig+0xe4>)
 80041cc:	4013      	ands	r3, r2
 80041ce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80041d6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80041d8:	683b      	ldr	r3, [r7, #0]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	021b      	lsls	r3, r3, #8
 80041de:	68fa      	ldr	r2, [r7, #12]
 80041e0:	4313      	orrs	r3, r2
 80041e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80041e4:	697b      	ldr	r3, [r7, #20]
 80041e6:	f023 0320 	bic.w	r3, r3, #32
 80041ea:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80041ec:	683b      	ldr	r3, [r7, #0]
 80041ee:	689b      	ldr	r3, [r3, #8]
 80041f0:	011b      	lsls	r3, r3, #4
 80041f2:	697a      	ldr	r2, [r7, #20]
 80041f4:	4313      	orrs	r3, r2
 80041f6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	4a23      	ldr	r2, [pc, #140]	@ (8004288 <TIM_OC2_SetConfig+0xe8>)
 80041fc:	4293      	cmp	r3, r2
 80041fe:	d003      	beq.n	8004208 <TIM_OC2_SetConfig+0x68>
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	4a22      	ldr	r2, [pc, #136]	@ (800428c <TIM_OC2_SetConfig+0xec>)
 8004204:	4293      	cmp	r3, r2
 8004206:	d10d      	bne.n	8004224 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004208:	697b      	ldr	r3, [r7, #20]
 800420a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800420e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004210:	683b      	ldr	r3, [r7, #0]
 8004212:	68db      	ldr	r3, [r3, #12]
 8004214:	011b      	lsls	r3, r3, #4
 8004216:	697a      	ldr	r2, [r7, #20]
 8004218:	4313      	orrs	r3, r2
 800421a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800421c:	697b      	ldr	r3, [r7, #20]
 800421e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004222:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	4a18      	ldr	r2, [pc, #96]	@ (8004288 <TIM_OC2_SetConfig+0xe8>)
 8004228:	4293      	cmp	r3, r2
 800422a:	d003      	beq.n	8004234 <TIM_OC2_SetConfig+0x94>
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	4a17      	ldr	r2, [pc, #92]	@ (800428c <TIM_OC2_SetConfig+0xec>)
 8004230:	4293      	cmp	r3, r2
 8004232:	d113      	bne.n	800425c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004234:	693b      	ldr	r3, [r7, #16]
 8004236:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800423a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800423c:	693b      	ldr	r3, [r7, #16]
 800423e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004242:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004244:	683b      	ldr	r3, [r7, #0]
 8004246:	695b      	ldr	r3, [r3, #20]
 8004248:	009b      	lsls	r3, r3, #2
 800424a:	693a      	ldr	r2, [r7, #16]
 800424c:	4313      	orrs	r3, r2
 800424e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004250:	683b      	ldr	r3, [r7, #0]
 8004252:	699b      	ldr	r3, [r3, #24]
 8004254:	009b      	lsls	r3, r3, #2
 8004256:	693a      	ldr	r2, [r7, #16]
 8004258:	4313      	orrs	r3, r2
 800425a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	693a      	ldr	r2, [r7, #16]
 8004260:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	68fa      	ldr	r2, [r7, #12]
 8004266:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004268:	683b      	ldr	r3, [r7, #0]
 800426a:	685a      	ldr	r2, [r3, #4]
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	697a      	ldr	r2, [r7, #20]
 8004274:	621a      	str	r2, [r3, #32]
}
 8004276:	bf00      	nop
 8004278:	371c      	adds	r7, #28
 800427a:	46bd      	mov	sp, r7
 800427c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004280:	4770      	bx	lr
 8004282:	bf00      	nop
 8004284:	feff8fff 	.word	0xfeff8fff
 8004288:	40010000 	.word	0x40010000
 800428c:	40010400 	.word	0x40010400

08004290 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004290:	b480      	push	{r7}
 8004292:	b087      	sub	sp, #28
 8004294:	af00      	add	r7, sp, #0
 8004296:	6078      	str	r0, [r7, #4]
 8004298:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	6a1b      	ldr	r3, [r3, #32]
 800429e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	6a1b      	ldr	r3, [r3, #32]
 80042a4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	685b      	ldr	r3, [r3, #4]
 80042b0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	69db      	ldr	r3, [r3, #28]
 80042b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80042b8:	68fa      	ldr	r2, [r7, #12]
 80042ba:	4b2d      	ldr	r3, [pc, #180]	@ (8004370 <TIM_OC3_SetConfig+0xe0>)
 80042bc:	4013      	ands	r3, r2
 80042be:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	f023 0303 	bic.w	r3, r3, #3
 80042c6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80042c8:	683b      	ldr	r3, [r7, #0]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	68fa      	ldr	r2, [r7, #12]
 80042ce:	4313      	orrs	r3, r2
 80042d0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80042d2:	697b      	ldr	r3, [r7, #20]
 80042d4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80042d8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80042da:	683b      	ldr	r3, [r7, #0]
 80042dc:	689b      	ldr	r3, [r3, #8]
 80042de:	021b      	lsls	r3, r3, #8
 80042e0:	697a      	ldr	r2, [r7, #20]
 80042e2:	4313      	orrs	r3, r2
 80042e4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	4a22      	ldr	r2, [pc, #136]	@ (8004374 <TIM_OC3_SetConfig+0xe4>)
 80042ea:	4293      	cmp	r3, r2
 80042ec:	d003      	beq.n	80042f6 <TIM_OC3_SetConfig+0x66>
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	4a21      	ldr	r2, [pc, #132]	@ (8004378 <TIM_OC3_SetConfig+0xe8>)
 80042f2:	4293      	cmp	r3, r2
 80042f4:	d10d      	bne.n	8004312 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80042f6:	697b      	ldr	r3, [r7, #20]
 80042f8:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80042fc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80042fe:	683b      	ldr	r3, [r7, #0]
 8004300:	68db      	ldr	r3, [r3, #12]
 8004302:	021b      	lsls	r3, r3, #8
 8004304:	697a      	ldr	r2, [r7, #20]
 8004306:	4313      	orrs	r3, r2
 8004308:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800430a:	697b      	ldr	r3, [r7, #20]
 800430c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004310:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	4a17      	ldr	r2, [pc, #92]	@ (8004374 <TIM_OC3_SetConfig+0xe4>)
 8004316:	4293      	cmp	r3, r2
 8004318:	d003      	beq.n	8004322 <TIM_OC3_SetConfig+0x92>
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	4a16      	ldr	r2, [pc, #88]	@ (8004378 <TIM_OC3_SetConfig+0xe8>)
 800431e:	4293      	cmp	r3, r2
 8004320:	d113      	bne.n	800434a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004322:	693b      	ldr	r3, [r7, #16]
 8004324:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004328:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800432a:	693b      	ldr	r3, [r7, #16]
 800432c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004330:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004332:	683b      	ldr	r3, [r7, #0]
 8004334:	695b      	ldr	r3, [r3, #20]
 8004336:	011b      	lsls	r3, r3, #4
 8004338:	693a      	ldr	r2, [r7, #16]
 800433a:	4313      	orrs	r3, r2
 800433c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800433e:	683b      	ldr	r3, [r7, #0]
 8004340:	699b      	ldr	r3, [r3, #24]
 8004342:	011b      	lsls	r3, r3, #4
 8004344:	693a      	ldr	r2, [r7, #16]
 8004346:	4313      	orrs	r3, r2
 8004348:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	693a      	ldr	r2, [r7, #16]
 800434e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	68fa      	ldr	r2, [r7, #12]
 8004354:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004356:	683b      	ldr	r3, [r7, #0]
 8004358:	685a      	ldr	r2, [r3, #4]
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	697a      	ldr	r2, [r7, #20]
 8004362:	621a      	str	r2, [r3, #32]
}
 8004364:	bf00      	nop
 8004366:	371c      	adds	r7, #28
 8004368:	46bd      	mov	sp, r7
 800436a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800436e:	4770      	bx	lr
 8004370:	fffeff8f 	.word	0xfffeff8f
 8004374:	40010000 	.word	0x40010000
 8004378:	40010400 	.word	0x40010400

0800437c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800437c:	b480      	push	{r7}
 800437e:	b087      	sub	sp, #28
 8004380:	af00      	add	r7, sp, #0
 8004382:	6078      	str	r0, [r7, #4]
 8004384:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	6a1b      	ldr	r3, [r3, #32]
 800438a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	6a1b      	ldr	r3, [r3, #32]
 8004390:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	685b      	ldr	r3, [r3, #4]
 800439c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	69db      	ldr	r3, [r3, #28]
 80043a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80043a4:	68fa      	ldr	r2, [r7, #12]
 80043a6:	4b1e      	ldr	r3, [pc, #120]	@ (8004420 <TIM_OC4_SetConfig+0xa4>)
 80043a8:	4013      	ands	r3, r2
 80043aa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80043b2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80043b4:	683b      	ldr	r3, [r7, #0]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	021b      	lsls	r3, r3, #8
 80043ba:	68fa      	ldr	r2, [r7, #12]
 80043bc:	4313      	orrs	r3, r2
 80043be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80043c0:	693b      	ldr	r3, [r7, #16]
 80043c2:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80043c6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80043c8:	683b      	ldr	r3, [r7, #0]
 80043ca:	689b      	ldr	r3, [r3, #8]
 80043cc:	031b      	lsls	r3, r3, #12
 80043ce:	693a      	ldr	r2, [r7, #16]
 80043d0:	4313      	orrs	r3, r2
 80043d2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	4a13      	ldr	r2, [pc, #76]	@ (8004424 <TIM_OC4_SetConfig+0xa8>)
 80043d8:	4293      	cmp	r3, r2
 80043da:	d003      	beq.n	80043e4 <TIM_OC4_SetConfig+0x68>
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	4a12      	ldr	r2, [pc, #72]	@ (8004428 <TIM_OC4_SetConfig+0xac>)
 80043e0:	4293      	cmp	r3, r2
 80043e2:	d109      	bne.n	80043f8 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80043e4:	697b      	ldr	r3, [r7, #20]
 80043e6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80043ea:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80043ec:	683b      	ldr	r3, [r7, #0]
 80043ee:	695b      	ldr	r3, [r3, #20]
 80043f0:	019b      	lsls	r3, r3, #6
 80043f2:	697a      	ldr	r2, [r7, #20]
 80043f4:	4313      	orrs	r3, r2
 80043f6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	697a      	ldr	r2, [r7, #20]
 80043fc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	68fa      	ldr	r2, [r7, #12]
 8004402:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004404:	683b      	ldr	r3, [r7, #0]
 8004406:	685a      	ldr	r2, [r3, #4]
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	693a      	ldr	r2, [r7, #16]
 8004410:	621a      	str	r2, [r3, #32]
}
 8004412:	bf00      	nop
 8004414:	371c      	adds	r7, #28
 8004416:	46bd      	mov	sp, r7
 8004418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800441c:	4770      	bx	lr
 800441e:	bf00      	nop
 8004420:	feff8fff 	.word	0xfeff8fff
 8004424:	40010000 	.word	0x40010000
 8004428:	40010400 	.word	0x40010400

0800442c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800442c:	b480      	push	{r7}
 800442e:	b087      	sub	sp, #28
 8004430:	af00      	add	r7, sp, #0
 8004432:	6078      	str	r0, [r7, #4]
 8004434:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	6a1b      	ldr	r3, [r3, #32]
 800443a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	6a1b      	ldr	r3, [r3, #32]
 8004440:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	685b      	ldr	r3, [r3, #4]
 800444c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004452:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8004454:	68fa      	ldr	r2, [r7, #12]
 8004456:	4b1b      	ldr	r3, [pc, #108]	@ (80044c4 <TIM_OC5_SetConfig+0x98>)
 8004458:	4013      	ands	r3, r2
 800445a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800445c:	683b      	ldr	r3, [r7, #0]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	68fa      	ldr	r2, [r7, #12]
 8004462:	4313      	orrs	r3, r2
 8004464:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8004466:	693b      	ldr	r3, [r7, #16]
 8004468:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800446c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800446e:	683b      	ldr	r3, [r7, #0]
 8004470:	689b      	ldr	r3, [r3, #8]
 8004472:	041b      	lsls	r3, r3, #16
 8004474:	693a      	ldr	r2, [r7, #16]
 8004476:	4313      	orrs	r3, r2
 8004478:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	4a12      	ldr	r2, [pc, #72]	@ (80044c8 <TIM_OC5_SetConfig+0x9c>)
 800447e:	4293      	cmp	r3, r2
 8004480:	d003      	beq.n	800448a <TIM_OC5_SetConfig+0x5e>
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	4a11      	ldr	r2, [pc, #68]	@ (80044cc <TIM_OC5_SetConfig+0xa0>)
 8004486:	4293      	cmp	r3, r2
 8004488:	d109      	bne.n	800449e <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800448a:	697b      	ldr	r3, [r7, #20]
 800448c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004490:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8004492:	683b      	ldr	r3, [r7, #0]
 8004494:	695b      	ldr	r3, [r3, #20]
 8004496:	021b      	lsls	r3, r3, #8
 8004498:	697a      	ldr	r2, [r7, #20]
 800449a:	4313      	orrs	r3, r2
 800449c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	697a      	ldr	r2, [r7, #20]
 80044a2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	68fa      	ldr	r2, [r7, #12]
 80044a8:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80044aa:	683b      	ldr	r3, [r7, #0]
 80044ac:	685a      	ldr	r2, [r3, #4]
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	693a      	ldr	r2, [r7, #16]
 80044b6:	621a      	str	r2, [r3, #32]
}
 80044b8:	bf00      	nop
 80044ba:	371c      	adds	r7, #28
 80044bc:	46bd      	mov	sp, r7
 80044be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044c2:	4770      	bx	lr
 80044c4:	fffeff8f 	.word	0xfffeff8f
 80044c8:	40010000 	.word	0x40010000
 80044cc:	40010400 	.word	0x40010400

080044d0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80044d0:	b480      	push	{r7}
 80044d2:	b087      	sub	sp, #28
 80044d4:	af00      	add	r7, sp, #0
 80044d6:	6078      	str	r0, [r7, #4]
 80044d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	6a1b      	ldr	r3, [r3, #32]
 80044de:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	6a1b      	ldr	r3, [r3, #32]
 80044e4:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	685b      	ldr	r3, [r3, #4]
 80044f0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80044f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80044f8:	68fa      	ldr	r2, [r7, #12]
 80044fa:	4b1c      	ldr	r3, [pc, #112]	@ (800456c <TIM_OC6_SetConfig+0x9c>)
 80044fc:	4013      	ands	r3, r2
 80044fe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004500:	683b      	ldr	r3, [r7, #0]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	021b      	lsls	r3, r3, #8
 8004506:	68fa      	ldr	r2, [r7, #12]
 8004508:	4313      	orrs	r3, r2
 800450a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800450c:	693b      	ldr	r3, [r7, #16]
 800450e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8004512:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8004514:	683b      	ldr	r3, [r7, #0]
 8004516:	689b      	ldr	r3, [r3, #8]
 8004518:	051b      	lsls	r3, r3, #20
 800451a:	693a      	ldr	r2, [r7, #16]
 800451c:	4313      	orrs	r3, r2
 800451e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	4a13      	ldr	r2, [pc, #76]	@ (8004570 <TIM_OC6_SetConfig+0xa0>)
 8004524:	4293      	cmp	r3, r2
 8004526:	d003      	beq.n	8004530 <TIM_OC6_SetConfig+0x60>
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	4a12      	ldr	r2, [pc, #72]	@ (8004574 <TIM_OC6_SetConfig+0xa4>)
 800452c:	4293      	cmp	r3, r2
 800452e:	d109      	bne.n	8004544 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8004530:	697b      	ldr	r3, [r7, #20]
 8004532:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004536:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8004538:	683b      	ldr	r3, [r7, #0]
 800453a:	695b      	ldr	r3, [r3, #20]
 800453c:	029b      	lsls	r3, r3, #10
 800453e:	697a      	ldr	r2, [r7, #20]
 8004540:	4313      	orrs	r3, r2
 8004542:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	697a      	ldr	r2, [r7, #20]
 8004548:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	68fa      	ldr	r2, [r7, #12]
 800454e:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8004550:	683b      	ldr	r3, [r7, #0]
 8004552:	685a      	ldr	r2, [r3, #4]
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	693a      	ldr	r2, [r7, #16]
 800455c:	621a      	str	r2, [r3, #32]
}
 800455e:	bf00      	nop
 8004560:	371c      	adds	r7, #28
 8004562:	46bd      	mov	sp, r7
 8004564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004568:	4770      	bx	lr
 800456a:	bf00      	nop
 800456c:	feff8fff 	.word	0xfeff8fff
 8004570:	40010000 	.word	0x40010000
 8004574:	40010400 	.word	0x40010400

08004578 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8004578:	b580      	push	{r7, lr}
 800457a:	b086      	sub	sp, #24
 800457c:	af00      	add	r7, sp, #0
 800457e:	6078      	str	r0, [r7, #4]
 8004580:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004582:	2300      	movs	r3, #0
 8004584:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	689b      	ldr	r3, [r3, #8]
 800458c:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800458e:	693b      	ldr	r3, [r7, #16]
 8004590:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004594:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8004596:	683b      	ldr	r3, [r7, #0]
 8004598:	685b      	ldr	r3, [r3, #4]
 800459a:	693a      	ldr	r2, [r7, #16]
 800459c:	4313      	orrs	r3, r2
 800459e:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 80045a0:	693a      	ldr	r2, [r7, #16]
 80045a2:	4b3e      	ldr	r3, [pc, #248]	@ (800469c <TIM_SlaveTimer_SetConfig+0x124>)
 80045a4:	4013      	ands	r3, r2
 80045a6:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 80045a8:	683b      	ldr	r3, [r7, #0]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	693a      	ldr	r2, [r7, #16]
 80045ae:	4313      	orrs	r3, r2
 80045b0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	693a      	ldr	r2, [r7, #16]
 80045b8:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 80045ba:	683b      	ldr	r3, [r7, #0]
 80045bc:	685b      	ldr	r3, [r3, #4]
 80045be:	2b70      	cmp	r3, #112	@ 0x70
 80045c0:	d01a      	beq.n	80045f8 <TIM_SlaveTimer_SetConfig+0x80>
 80045c2:	2b70      	cmp	r3, #112	@ 0x70
 80045c4:	d860      	bhi.n	8004688 <TIM_SlaveTimer_SetConfig+0x110>
 80045c6:	2b60      	cmp	r3, #96	@ 0x60
 80045c8:	d054      	beq.n	8004674 <TIM_SlaveTimer_SetConfig+0xfc>
 80045ca:	2b60      	cmp	r3, #96	@ 0x60
 80045cc:	d85c      	bhi.n	8004688 <TIM_SlaveTimer_SetConfig+0x110>
 80045ce:	2b50      	cmp	r3, #80	@ 0x50
 80045d0:	d046      	beq.n	8004660 <TIM_SlaveTimer_SetConfig+0xe8>
 80045d2:	2b50      	cmp	r3, #80	@ 0x50
 80045d4:	d858      	bhi.n	8004688 <TIM_SlaveTimer_SetConfig+0x110>
 80045d6:	2b40      	cmp	r3, #64	@ 0x40
 80045d8:	d019      	beq.n	800460e <TIM_SlaveTimer_SetConfig+0x96>
 80045da:	2b40      	cmp	r3, #64	@ 0x40
 80045dc:	d854      	bhi.n	8004688 <TIM_SlaveTimer_SetConfig+0x110>
 80045de:	2b30      	cmp	r3, #48	@ 0x30
 80045e0:	d055      	beq.n	800468e <TIM_SlaveTimer_SetConfig+0x116>
 80045e2:	2b30      	cmp	r3, #48	@ 0x30
 80045e4:	d850      	bhi.n	8004688 <TIM_SlaveTimer_SetConfig+0x110>
 80045e6:	2b20      	cmp	r3, #32
 80045e8:	d051      	beq.n	800468e <TIM_SlaveTimer_SetConfig+0x116>
 80045ea:	2b20      	cmp	r3, #32
 80045ec:	d84c      	bhi.n	8004688 <TIM_SlaveTimer_SetConfig+0x110>
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d04d      	beq.n	800468e <TIM_SlaveTimer_SetConfig+0x116>
 80045f2:	2b10      	cmp	r3, #16
 80045f4:	d04b      	beq.n	800468e <TIM_SlaveTimer_SetConfig+0x116>
 80045f6:	e047      	b.n	8004688 <TIM_SlaveTimer_SetConfig+0x110>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	6818      	ldr	r0, [r3, #0]
                        sSlaveConfig->TriggerPrescaler,
 80045fc:	683b      	ldr	r3, [r7, #0]
 80045fe:	68d9      	ldr	r1, [r3, #12]
                        sSlaveConfig->TriggerPolarity,
 8004600:	683b      	ldr	r3, [r7, #0]
 8004602:	689a      	ldr	r2, [r3, #8]
                        sSlaveConfig->TriggerFilter);
 8004604:	683b      	ldr	r3, [r7, #0]
 8004606:	691b      	ldr	r3, [r3, #16]
      TIM_ETR_SetConfig(htim->Instance,
 8004608:	f000 f9ee 	bl	80049e8 <TIM_ETR_SetConfig>
      break;
 800460c:	e040      	b.n	8004690 <TIM_SlaveTimer_SetConfig+0x118>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 800460e:	683b      	ldr	r3, [r7, #0]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	2b05      	cmp	r3, #5
 8004614:	d101      	bne.n	800461a <TIM_SlaveTimer_SetConfig+0xa2>
      {
        return HAL_ERROR;
 8004616:	2301      	movs	r3, #1
 8004618:	e03b      	b.n	8004692 <TIM_SlaveTimer_SetConfig+0x11a>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	6a1b      	ldr	r3, [r3, #32]
 8004620:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	6a1a      	ldr	r2, [r3, #32]
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	f022 0201 	bic.w	r2, r2, #1
 8004630:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	699b      	ldr	r3, [r3, #24]
 8004638:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800463a:	68bb      	ldr	r3, [r7, #8]
 800463c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004640:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8004642:	683b      	ldr	r3, [r7, #0]
 8004644:	691b      	ldr	r3, [r3, #16]
 8004646:	011b      	lsls	r3, r3, #4
 8004648:	68ba      	ldr	r2, [r7, #8]
 800464a:	4313      	orrs	r3, r2
 800464c:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	68ba      	ldr	r2, [r7, #8]
 8004654:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	68fa      	ldr	r2, [r7, #12]
 800465c:	621a      	str	r2, [r3, #32]
      break;
 800465e:	e017      	b.n	8004690 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 8004664:	683b      	ldr	r3, [r7, #0]
 8004666:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 8004668:	683b      	ldr	r3, [r7, #0]
 800466a:	691b      	ldr	r3, [r3, #16]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800466c:	461a      	mov	r2, r3
 800466e:	f000 f88b 	bl	8004788 <TIM_TI1_ConfigInputStage>
      break;
 8004672:	e00d      	b.n	8004690 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 8004678:	683b      	ldr	r3, [r7, #0]
 800467a:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 800467c:	683b      	ldr	r3, [r7, #0]
 800467e:	691b      	ldr	r3, [r3, #16]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004680:	461a      	mov	r2, r3
 8004682:	f000 f8ed 	bl	8004860 <TIM_TI2_ConfigInputStage>
      break;
 8004686:	e003      	b.n	8004690 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 8004688:	2301      	movs	r3, #1
 800468a:	75fb      	strb	r3, [r7, #23]
      break;
 800468c:	e000      	b.n	8004690 <TIM_SlaveTimer_SetConfig+0x118>
      break;
 800468e:	bf00      	nop
  }

  return status;
 8004690:	7dfb      	ldrb	r3, [r7, #23]
}
 8004692:	4618      	mov	r0, r3
 8004694:	3718      	adds	r7, #24
 8004696:	46bd      	mov	sp, r7
 8004698:	bd80      	pop	{r7, pc}
 800469a:	bf00      	nop
 800469c:	fffefff8 	.word	0xfffefff8

080046a0 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 80046a0:	b480      	push	{r7}
 80046a2:	b087      	sub	sp, #28
 80046a4:	af00      	add	r7, sp, #0
 80046a6:	60f8      	str	r0, [r7, #12]
 80046a8:	60b9      	str	r1, [r7, #8]
 80046aa:	607a      	str	r2, [r7, #4]
 80046ac:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	6a1b      	ldr	r3, [r3, #32]
 80046b2:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	6a1b      	ldr	r3, [r3, #32]
 80046b8:	f023 0201 	bic.w	r2, r3, #1
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	699b      	ldr	r3, [r3, #24]
 80046c4:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	4a28      	ldr	r2, [pc, #160]	@ (800476c <TIM_TI1_SetConfig+0xcc>)
 80046ca:	4293      	cmp	r3, r2
 80046cc:	d01b      	beq.n	8004706 <TIM_TI1_SetConfig+0x66>
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80046d4:	d017      	beq.n	8004706 <TIM_TI1_SetConfig+0x66>
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	4a25      	ldr	r2, [pc, #148]	@ (8004770 <TIM_TI1_SetConfig+0xd0>)
 80046da:	4293      	cmp	r3, r2
 80046dc:	d013      	beq.n	8004706 <TIM_TI1_SetConfig+0x66>
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	4a24      	ldr	r2, [pc, #144]	@ (8004774 <TIM_TI1_SetConfig+0xd4>)
 80046e2:	4293      	cmp	r3, r2
 80046e4:	d00f      	beq.n	8004706 <TIM_TI1_SetConfig+0x66>
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	4a23      	ldr	r2, [pc, #140]	@ (8004778 <TIM_TI1_SetConfig+0xd8>)
 80046ea:	4293      	cmp	r3, r2
 80046ec:	d00b      	beq.n	8004706 <TIM_TI1_SetConfig+0x66>
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	4a22      	ldr	r2, [pc, #136]	@ (800477c <TIM_TI1_SetConfig+0xdc>)
 80046f2:	4293      	cmp	r3, r2
 80046f4:	d007      	beq.n	8004706 <TIM_TI1_SetConfig+0x66>
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	4a21      	ldr	r2, [pc, #132]	@ (8004780 <TIM_TI1_SetConfig+0xe0>)
 80046fa:	4293      	cmp	r3, r2
 80046fc:	d003      	beq.n	8004706 <TIM_TI1_SetConfig+0x66>
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	4a20      	ldr	r2, [pc, #128]	@ (8004784 <TIM_TI1_SetConfig+0xe4>)
 8004702:	4293      	cmp	r3, r2
 8004704:	d101      	bne.n	800470a <TIM_TI1_SetConfig+0x6a>
 8004706:	2301      	movs	r3, #1
 8004708:	e000      	b.n	800470c <TIM_TI1_SetConfig+0x6c>
 800470a:	2300      	movs	r3, #0
 800470c:	2b00      	cmp	r3, #0
 800470e:	d008      	beq.n	8004722 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8004710:	697b      	ldr	r3, [r7, #20]
 8004712:	f023 0303 	bic.w	r3, r3, #3
 8004716:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8004718:	697a      	ldr	r2, [r7, #20]
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	4313      	orrs	r3, r2
 800471e:	617b      	str	r3, [r7, #20]
 8004720:	e003      	b.n	800472a <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8004722:	697b      	ldr	r3, [r7, #20]
 8004724:	f043 0301 	orr.w	r3, r3, #1
 8004728:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800472a:	697b      	ldr	r3, [r7, #20]
 800472c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004730:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8004732:	683b      	ldr	r3, [r7, #0]
 8004734:	011b      	lsls	r3, r3, #4
 8004736:	b2db      	uxtb	r3, r3
 8004738:	697a      	ldr	r2, [r7, #20]
 800473a:	4313      	orrs	r3, r2
 800473c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800473e:	693b      	ldr	r3, [r7, #16]
 8004740:	f023 030a 	bic.w	r3, r3, #10
 8004744:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8004746:	68bb      	ldr	r3, [r7, #8]
 8004748:	f003 030a 	and.w	r3, r3, #10
 800474c:	693a      	ldr	r2, [r7, #16]
 800474e:	4313      	orrs	r3, r2
 8004750:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	697a      	ldr	r2, [r7, #20]
 8004756:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	693a      	ldr	r2, [r7, #16]
 800475c:	621a      	str	r2, [r3, #32]
}
 800475e:	bf00      	nop
 8004760:	371c      	adds	r7, #28
 8004762:	46bd      	mov	sp, r7
 8004764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004768:	4770      	bx	lr
 800476a:	bf00      	nop
 800476c:	40010000 	.word	0x40010000
 8004770:	40000400 	.word	0x40000400
 8004774:	40000800 	.word	0x40000800
 8004778:	40000c00 	.word	0x40000c00
 800477c:	40010400 	.word	0x40010400
 8004780:	40014000 	.word	0x40014000
 8004784:	40001800 	.word	0x40001800

08004788 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004788:	b480      	push	{r7}
 800478a:	b087      	sub	sp, #28
 800478c:	af00      	add	r7, sp, #0
 800478e:	60f8      	str	r0, [r7, #12]
 8004790:	60b9      	str	r1, [r7, #8]
 8004792:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	6a1b      	ldr	r3, [r3, #32]
 8004798:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	6a1b      	ldr	r3, [r3, #32]
 800479e:	f023 0201 	bic.w	r2, r3, #1
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	699b      	ldr	r3, [r3, #24]
 80047aa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80047ac:	693b      	ldr	r3, [r7, #16]
 80047ae:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80047b2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	011b      	lsls	r3, r3, #4
 80047b8:	693a      	ldr	r2, [r7, #16]
 80047ba:	4313      	orrs	r3, r2
 80047bc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80047be:	697b      	ldr	r3, [r7, #20]
 80047c0:	f023 030a 	bic.w	r3, r3, #10
 80047c4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80047c6:	697a      	ldr	r2, [r7, #20]
 80047c8:	68bb      	ldr	r3, [r7, #8]
 80047ca:	4313      	orrs	r3, r2
 80047cc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	693a      	ldr	r2, [r7, #16]
 80047d2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	697a      	ldr	r2, [r7, #20]
 80047d8:	621a      	str	r2, [r3, #32]
}
 80047da:	bf00      	nop
 80047dc:	371c      	adds	r7, #28
 80047de:	46bd      	mov	sp, r7
 80047e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047e4:	4770      	bx	lr

080047e6 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80047e6:	b480      	push	{r7}
 80047e8:	b087      	sub	sp, #28
 80047ea:	af00      	add	r7, sp, #0
 80047ec:	60f8      	str	r0, [r7, #12]
 80047ee:	60b9      	str	r1, [r7, #8]
 80047f0:	607a      	str	r2, [r7, #4]
 80047f2:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	6a1b      	ldr	r3, [r3, #32]
 80047f8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	6a1b      	ldr	r3, [r3, #32]
 80047fe:	f023 0210 	bic.w	r2, r3, #16
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	699b      	ldr	r3, [r3, #24]
 800480a:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 800480c:	693b      	ldr	r3, [r7, #16]
 800480e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004812:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	021b      	lsls	r3, r3, #8
 8004818:	693a      	ldr	r2, [r7, #16]
 800481a:	4313      	orrs	r3, r2
 800481c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800481e:	693b      	ldr	r3, [r7, #16]
 8004820:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004824:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8004826:	683b      	ldr	r3, [r7, #0]
 8004828:	031b      	lsls	r3, r3, #12
 800482a:	b29b      	uxth	r3, r3
 800482c:	693a      	ldr	r2, [r7, #16]
 800482e:	4313      	orrs	r3, r2
 8004830:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004832:	697b      	ldr	r3, [r7, #20]
 8004834:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8004838:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800483a:	68bb      	ldr	r3, [r7, #8]
 800483c:	011b      	lsls	r3, r3, #4
 800483e:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 8004842:	697a      	ldr	r2, [r7, #20]
 8004844:	4313      	orrs	r3, r2
 8004846:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	693a      	ldr	r2, [r7, #16]
 800484c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	697a      	ldr	r2, [r7, #20]
 8004852:	621a      	str	r2, [r3, #32]
}
 8004854:	bf00      	nop
 8004856:	371c      	adds	r7, #28
 8004858:	46bd      	mov	sp, r7
 800485a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800485e:	4770      	bx	lr

08004860 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004860:	b480      	push	{r7}
 8004862:	b087      	sub	sp, #28
 8004864:	af00      	add	r7, sp, #0
 8004866:	60f8      	str	r0, [r7, #12]
 8004868:	60b9      	str	r1, [r7, #8]
 800486a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	6a1b      	ldr	r3, [r3, #32]
 8004870:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	6a1b      	ldr	r3, [r3, #32]
 8004876:	f023 0210 	bic.w	r2, r3, #16
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	699b      	ldr	r3, [r3, #24]
 8004882:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004884:	693b      	ldr	r3, [r7, #16]
 8004886:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800488a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	031b      	lsls	r3, r3, #12
 8004890:	693a      	ldr	r2, [r7, #16]
 8004892:	4313      	orrs	r3, r2
 8004894:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004896:	697b      	ldr	r3, [r7, #20]
 8004898:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800489c:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800489e:	68bb      	ldr	r3, [r7, #8]
 80048a0:	011b      	lsls	r3, r3, #4
 80048a2:	697a      	ldr	r2, [r7, #20]
 80048a4:	4313      	orrs	r3, r2
 80048a6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	693a      	ldr	r2, [r7, #16]
 80048ac:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	697a      	ldr	r2, [r7, #20]
 80048b2:	621a      	str	r2, [r3, #32]
}
 80048b4:	bf00      	nop
 80048b6:	371c      	adds	r7, #28
 80048b8:	46bd      	mov	sp, r7
 80048ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048be:	4770      	bx	lr

080048c0 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80048c0:	b480      	push	{r7}
 80048c2:	b087      	sub	sp, #28
 80048c4:	af00      	add	r7, sp, #0
 80048c6:	60f8      	str	r0, [r7, #12]
 80048c8:	60b9      	str	r1, [r7, #8]
 80048ca:	607a      	str	r2, [r7, #4]
 80048cc:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	6a1b      	ldr	r3, [r3, #32]
 80048d2:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	6a1b      	ldr	r3, [r3, #32]
 80048d8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	69db      	ldr	r3, [r3, #28]
 80048e4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 80048e6:	693b      	ldr	r3, [r7, #16]
 80048e8:	f023 0303 	bic.w	r3, r3, #3
 80048ec:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 80048ee:	693a      	ldr	r2, [r7, #16]
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	4313      	orrs	r3, r2
 80048f4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 80048f6:	693b      	ldr	r3, [r7, #16]
 80048f8:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80048fc:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 80048fe:	683b      	ldr	r3, [r7, #0]
 8004900:	011b      	lsls	r3, r3, #4
 8004902:	b2db      	uxtb	r3, r3
 8004904:	693a      	ldr	r2, [r7, #16]
 8004906:	4313      	orrs	r3, r2
 8004908:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800490a:	697b      	ldr	r3, [r7, #20]
 800490c:	f423 6320 	bic.w	r3, r3, #2560	@ 0xa00
 8004910:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8004912:	68bb      	ldr	r3, [r7, #8]
 8004914:	021b      	lsls	r3, r3, #8
 8004916:	f403 6320 	and.w	r3, r3, #2560	@ 0xa00
 800491a:	697a      	ldr	r2, [r7, #20]
 800491c:	4313      	orrs	r3, r2
 800491e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	693a      	ldr	r2, [r7, #16]
 8004924:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	697a      	ldr	r2, [r7, #20]
 800492a:	621a      	str	r2, [r3, #32]
}
 800492c:	bf00      	nop
 800492e:	371c      	adds	r7, #28
 8004930:	46bd      	mov	sp, r7
 8004932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004936:	4770      	bx	lr

08004938 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004938:	b480      	push	{r7}
 800493a:	b087      	sub	sp, #28
 800493c:	af00      	add	r7, sp, #0
 800493e:	60f8      	str	r0, [r7, #12]
 8004940:	60b9      	str	r1, [r7, #8]
 8004942:	607a      	str	r2, [r7, #4]
 8004944:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	6a1b      	ldr	r3, [r3, #32]
 800494a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	6a1b      	ldr	r3, [r3, #32]
 8004950:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	69db      	ldr	r3, [r3, #28]
 800495c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800495e:	693b      	ldr	r3, [r7, #16]
 8004960:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004964:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	021b      	lsls	r3, r3, #8
 800496a:	693a      	ldr	r2, [r7, #16]
 800496c:	4313      	orrs	r3, r2
 800496e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8004970:	693b      	ldr	r3, [r7, #16]
 8004972:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004976:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8004978:	683b      	ldr	r3, [r7, #0]
 800497a:	031b      	lsls	r3, r3, #12
 800497c:	b29b      	uxth	r3, r3
 800497e:	693a      	ldr	r2, [r7, #16]
 8004980:	4313      	orrs	r3, r2
 8004982:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8004984:	697b      	ldr	r3, [r7, #20]
 8004986:	f423 4320 	bic.w	r3, r3, #40960	@ 0xa000
 800498a:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 800498c:	68bb      	ldr	r3, [r7, #8]
 800498e:	031b      	lsls	r3, r3, #12
 8004990:	f403 4320 	and.w	r3, r3, #40960	@ 0xa000
 8004994:	697a      	ldr	r2, [r7, #20]
 8004996:	4313      	orrs	r3, r2
 8004998:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	693a      	ldr	r2, [r7, #16]
 800499e:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	697a      	ldr	r2, [r7, #20]
 80049a4:	621a      	str	r2, [r3, #32]
}
 80049a6:	bf00      	nop
 80049a8:	371c      	adds	r7, #28
 80049aa:	46bd      	mov	sp, r7
 80049ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049b0:	4770      	bx	lr

080049b2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80049b2:	b480      	push	{r7}
 80049b4:	b085      	sub	sp, #20
 80049b6:	af00      	add	r7, sp, #0
 80049b8:	6078      	str	r0, [r7, #4]
 80049ba:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	689b      	ldr	r3, [r3, #8]
 80049c0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80049c8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80049ca:	683a      	ldr	r2, [r7, #0]
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	4313      	orrs	r3, r2
 80049d0:	f043 0307 	orr.w	r3, r3, #7
 80049d4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	68fa      	ldr	r2, [r7, #12]
 80049da:	609a      	str	r2, [r3, #8]
}
 80049dc:	bf00      	nop
 80049de:	3714      	adds	r7, #20
 80049e0:	46bd      	mov	sp, r7
 80049e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049e6:	4770      	bx	lr

080049e8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80049e8:	b480      	push	{r7}
 80049ea:	b087      	sub	sp, #28
 80049ec:	af00      	add	r7, sp, #0
 80049ee:	60f8      	str	r0, [r7, #12]
 80049f0:	60b9      	str	r1, [r7, #8]
 80049f2:	607a      	str	r2, [r7, #4]
 80049f4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	689b      	ldr	r3, [r3, #8]
 80049fa:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80049fc:	697b      	ldr	r3, [r7, #20]
 80049fe:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004a02:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004a04:	683b      	ldr	r3, [r7, #0]
 8004a06:	021a      	lsls	r2, r3, #8
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	431a      	orrs	r2, r3
 8004a0c:	68bb      	ldr	r3, [r7, #8]
 8004a0e:	4313      	orrs	r3, r2
 8004a10:	697a      	ldr	r2, [r7, #20]
 8004a12:	4313      	orrs	r3, r2
 8004a14:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	697a      	ldr	r2, [r7, #20]
 8004a1a:	609a      	str	r2, [r3, #8]
}
 8004a1c:	bf00      	nop
 8004a1e:	371c      	adds	r7, #28
 8004a20:	46bd      	mov	sp, r7
 8004a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a26:	4770      	bx	lr

08004a28 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004a28:	b480      	push	{r7}
 8004a2a:	b087      	sub	sp, #28
 8004a2c:	af00      	add	r7, sp, #0
 8004a2e:	60f8      	str	r0, [r7, #12]
 8004a30:	60b9      	str	r1, [r7, #8]
 8004a32:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004a34:	68bb      	ldr	r3, [r7, #8]
 8004a36:	f003 031f 	and.w	r3, r3, #31
 8004a3a:	2201      	movs	r2, #1
 8004a3c:	fa02 f303 	lsl.w	r3, r2, r3
 8004a40:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	6a1a      	ldr	r2, [r3, #32]
 8004a46:	697b      	ldr	r3, [r7, #20]
 8004a48:	43db      	mvns	r3, r3
 8004a4a:	401a      	ands	r2, r3
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	6a1a      	ldr	r2, [r3, #32]
 8004a54:	68bb      	ldr	r3, [r7, #8]
 8004a56:	f003 031f 	and.w	r3, r3, #31
 8004a5a:	6879      	ldr	r1, [r7, #4]
 8004a5c:	fa01 f303 	lsl.w	r3, r1, r3
 8004a60:	431a      	orrs	r2, r3
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	621a      	str	r2, [r3, #32]
}
 8004a66:	bf00      	nop
 8004a68:	371c      	adds	r7, #28
 8004a6a:	46bd      	mov	sp, r7
 8004a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a70:	4770      	bx	lr
	...

08004a74 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004a74:	b480      	push	{r7}
 8004a76:	b085      	sub	sp, #20
 8004a78:	af00      	add	r7, sp, #0
 8004a7a:	6078      	str	r0, [r7, #4]
 8004a7c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004a84:	2b01      	cmp	r3, #1
 8004a86:	d101      	bne.n	8004a8c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004a88:	2302      	movs	r3, #2
 8004a8a:	e06d      	b.n	8004b68 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	2201      	movs	r2, #1
 8004a90:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	2202      	movs	r2, #2
 8004a98:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	685b      	ldr	r3, [r3, #4]
 8004aa2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	689b      	ldr	r3, [r3, #8]
 8004aaa:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	4a30      	ldr	r2, [pc, #192]	@ (8004b74 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8004ab2:	4293      	cmp	r3, r2
 8004ab4:	d004      	beq.n	8004ac0 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	4a2f      	ldr	r2, [pc, #188]	@ (8004b78 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8004abc:	4293      	cmp	r3, r2
 8004abe:	d108      	bne.n	8004ad2 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8004ac6:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004ac8:	683b      	ldr	r3, [r7, #0]
 8004aca:	685b      	ldr	r3, [r3, #4]
 8004acc:	68fa      	ldr	r2, [r7, #12]
 8004ace:	4313      	orrs	r3, r2
 8004ad0:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004ad8:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004ada:	683b      	ldr	r3, [r7, #0]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	68fa      	ldr	r2, [r7, #12]
 8004ae0:	4313      	orrs	r3, r2
 8004ae2:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	68fa      	ldr	r2, [r7, #12]
 8004aea:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	4a20      	ldr	r2, [pc, #128]	@ (8004b74 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8004af2:	4293      	cmp	r3, r2
 8004af4:	d022      	beq.n	8004b3c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004afe:	d01d      	beq.n	8004b3c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	4a1d      	ldr	r2, [pc, #116]	@ (8004b7c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8004b06:	4293      	cmp	r3, r2
 8004b08:	d018      	beq.n	8004b3c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	4a1c      	ldr	r2, [pc, #112]	@ (8004b80 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8004b10:	4293      	cmp	r3, r2
 8004b12:	d013      	beq.n	8004b3c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	4a1a      	ldr	r2, [pc, #104]	@ (8004b84 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8004b1a:	4293      	cmp	r3, r2
 8004b1c:	d00e      	beq.n	8004b3c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	4a15      	ldr	r2, [pc, #84]	@ (8004b78 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8004b24:	4293      	cmp	r3, r2
 8004b26:	d009      	beq.n	8004b3c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	4a16      	ldr	r2, [pc, #88]	@ (8004b88 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8004b2e:	4293      	cmp	r3, r2
 8004b30:	d004      	beq.n	8004b3c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	4a15      	ldr	r2, [pc, #84]	@ (8004b8c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8004b38:	4293      	cmp	r3, r2
 8004b3a:	d10c      	bne.n	8004b56 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004b3c:	68bb      	ldr	r3, [r7, #8]
 8004b3e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004b42:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004b44:	683b      	ldr	r3, [r7, #0]
 8004b46:	689b      	ldr	r3, [r3, #8]
 8004b48:	68ba      	ldr	r2, [r7, #8]
 8004b4a:	4313      	orrs	r3, r2
 8004b4c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	68ba      	ldr	r2, [r7, #8]
 8004b54:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	2201      	movs	r2, #1
 8004b5a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	2200      	movs	r2, #0
 8004b62:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004b66:	2300      	movs	r3, #0
}
 8004b68:	4618      	mov	r0, r3
 8004b6a:	3714      	adds	r7, #20
 8004b6c:	46bd      	mov	sp, r7
 8004b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b72:	4770      	bx	lr
 8004b74:	40010000 	.word	0x40010000
 8004b78:	40010400 	.word	0x40010400
 8004b7c:	40000400 	.word	0x40000400
 8004b80:	40000800 	.word	0x40000800
 8004b84:	40000c00 	.word	0x40000c00
 8004b88:	40014000 	.word	0x40014000
 8004b8c:	40001800 	.word	0x40001800

08004b90 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004b90:	b480      	push	{r7}
 8004b92:	b083      	sub	sp, #12
 8004b94:	af00      	add	r7, sp, #0
 8004b96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004b98:	bf00      	nop
 8004b9a:	370c      	adds	r7, #12
 8004b9c:	46bd      	mov	sp, r7
 8004b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ba2:	4770      	bx	lr

08004ba4 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004ba4:	b480      	push	{r7}
 8004ba6:	b083      	sub	sp, #12
 8004ba8:	af00      	add	r7, sp, #0
 8004baa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004bac:	bf00      	nop
 8004bae:	370c      	adds	r7, #12
 8004bb0:	46bd      	mov	sp, r7
 8004bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bb6:	4770      	bx	lr

08004bb8 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004bb8:	b480      	push	{r7}
 8004bba:	b083      	sub	sp, #12
 8004bbc:	af00      	add	r7, sp, #0
 8004bbe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004bc0:	bf00      	nop
 8004bc2:	370c      	adds	r7, #12
 8004bc4:	46bd      	mov	sp, r7
 8004bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bca:	4770      	bx	lr

08004bcc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004bcc:	b580      	push	{r7, lr}
 8004bce:	b082      	sub	sp, #8
 8004bd0:	af00      	add	r7, sp, #0
 8004bd2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d101      	bne.n	8004bde <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004bda:	2301      	movs	r3, #1
 8004bdc:	e040      	b.n	8004c60 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d106      	bne.n	8004bf4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	2200      	movs	r2, #0
 8004bea:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004bee:	6878      	ldr	r0, [r7, #4]
 8004bf0:	f7fc fd14 	bl	800161c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	2224      	movs	r2, #36	@ 0x24
 8004bf8:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	681a      	ldr	r2, [r3, #0]
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	f022 0201 	bic.w	r2, r2, #1
 8004c08:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d002      	beq.n	8004c18 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8004c12:	6878      	ldr	r0, [r7, #4]
 8004c14:	f000 fb16 	bl	8005244 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004c18:	6878      	ldr	r0, [r7, #4]
 8004c1a:	f000 f8af 	bl	8004d7c <UART_SetConfig>
 8004c1e:	4603      	mov	r3, r0
 8004c20:	2b01      	cmp	r3, #1
 8004c22:	d101      	bne.n	8004c28 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8004c24:	2301      	movs	r3, #1
 8004c26:	e01b      	b.n	8004c60 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	685a      	ldr	r2, [r3, #4]
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004c36:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	689a      	ldr	r2, [r3, #8]
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004c46:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	681a      	ldr	r2, [r3, #0]
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	f042 0201 	orr.w	r2, r2, #1
 8004c56:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004c58:	6878      	ldr	r0, [r7, #4]
 8004c5a:	f000 fb95 	bl	8005388 <UART_CheckIdleState>
 8004c5e:	4603      	mov	r3, r0
}
 8004c60:	4618      	mov	r0, r3
 8004c62:	3708      	adds	r7, #8
 8004c64:	46bd      	mov	sp, r7
 8004c66:	bd80      	pop	{r7, pc}

08004c68 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004c68:	b580      	push	{r7, lr}
 8004c6a:	b08a      	sub	sp, #40	@ 0x28
 8004c6c:	af02      	add	r7, sp, #8
 8004c6e:	60f8      	str	r0, [r7, #12]
 8004c70:	60b9      	str	r1, [r7, #8]
 8004c72:	603b      	str	r3, [r7, #0]
 8004c74:	4613      	mov	r3, r2
 8004c76:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004c7c:	2b20      	cmp	r3, #32
 8004c7e:	d177      	bne.n	8004d70 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8004c80:	68bb      	ldr	r3, [r7, #8]
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d002      	beq.n	8004c8c <HAL_UART_Transmit+0x24>
 8004c86:	88fb      	ldrh	r3, [r7, #6]
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d101      	bne.n	8004c90 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8004c8c:	2301      	movs	r3, #1
 8004c8e:	e070      	b.n	8004d72 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	2200      	movs	r2, #0
 8004c94:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	2221      	movs	r2, #33	@ 0x21
 8004c9c:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004c9e:	f7fc fd97 	bl	80017d0 <HAL_GetTick>
 8004ca2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	88fa      	ldrh	r2, [r7, #6]
 8004ca8:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	88fa      	ldrh	r2, [r7, #6]
 8004cb0:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	689b      	ldr	r3, [r3, #8]
 8004cb8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004cbc:	d108      	bne.n	8004cd0 <HAL_UART_Transmit+0x68>
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	691b      	ldr	r3, [r3, #16]
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d104      	bne.n	8004cd0 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8004cc6:	2300      	movs	r3, #0
 8004cc8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004cca:	68bb      	ldr	r3, [r7, #8]
 8004ccc:	61bb      	str	r3, [r7, #24]
 8004cce:	e003      	b.n	8004cd8 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8004cd0:	68bb      	ldr	r3, [r7, #8]
 8004cd2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004cd4:	2300      	movs	r3, #0
 8004cd6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004cd8:	e02f      	b.n	8004d3a <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004cda:	683b      	ldr	r3, [r7, #0]
 8004cdc:	9300      	str	r3, [sp, #0]
 8004cde:	697b      	ldr	r3, [r7, #20]
 8004ce0:	2200      	movs	r2, #0
 8004ce2:	2180      	movs	r1, #128	@ 0x80
 8004ce4:	68f8      	ldr	r0, [r7, #12]
 8004ce6:	f000 fbf7 	bl	80054d8 <UART_WaitOnFlagUntilTimeout>
 8004cea:	4603      	mov	r3, r0
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d004      	beq.n	8004cfa <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	2220      	movs	r2, #32
 8004cf4:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8004cf6:	2303      	movs	r3, #3
 8004cf8:	e03b      	b.n	8004d72 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8004cfa:	69fb      	ldr	r3, [r7, #28]
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d10b      	bne.n	8004d18 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004d00:	69bb      	ldr	r3, [r7, #24]
 8004d02:	881b      	ldrh	r3, [r3, #0]
 8004d04:	461a      	mov	r2, r3
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004d0e:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8004d10:	69bb      	ldr	r3, [r7, #24]
 8004d12:	3302      	adds	r3, #2
 8004d14:	61bb      	str	r3, [r7, #24]
 8004d16:	e007      	b.n	8004d28 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004d18:	69fb      	ldr	r3, [r7, #28]
 8004d1a:	781a      	ldrb	r2, [r3, #0]
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8004d22:	69fb      	ldr	r3, [r7, #28]
 8004d24:	3301      	adds	r3, #1
 8004d26:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8004d2e:	b29b      	uxth	r3, r3
 8004d30:	3b01      	subs	r3, #1
 8004d32:	b29a      	uxth	r2, r3
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8004d40:	b29b      	uxth	r3, r3
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d1c9      	bne.n	8004cda <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004d46:	683b      	ldr	r3, [r7, #0]
 8004d48:	9300      	str	r3, [sp, #0]
 8004d4a:	697b      	ldr	r3, [r7, #20]
 8004d4c:	2200      	movs	r2, #0
 8004d4e:	2140      	movs	r1, #64	@ 0x40
 8004d50:	68f8      	ldr	r0, [r7, #12]
 8004d52:	f000 fbc1 	bl	80054d8 <UART_WaitOnFlagUntilTimeout>
 8004d56:	4603      	mov	r3, r0
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d004      	beq.n	8004d66 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	2220      	movs	r2, #32
 8004d60:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8004d62:	2303      	movs	r3, #3
 8004d64:	e005      	b.n	8004d72 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	2220      	movs	r2, #32
 8004d6a:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8004d6c:	2300      	movs	r3, #0
 8004d6e:	e000      	b.n	8004d72 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8004d70:	2302      	movs	r3, #2
  }
}
 8004d72:	4618      	mov	r0, r3
 8004d74:	3720      	adds	r7, #32
 8004d76:	46bd      	mov	sp, r7
 8004d78:	bd80      	pop	{r7, pc}
	...

08004d7c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004d7c:	b580      	push	{r7, lr}
 8004d7e:	b088      	sub	sp, #32
 8004d80:	af00      	add	r7, sp, #0
 8004d82:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004d84:	2300      	movs	r3, #0
 8004d86:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	689a      	ldr	r2, [r3, #8]
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	691b      	ldr	r3, [r3, #16]
 8004d90:	431a      	orrs	r2, r3
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	695b      	ldr	r3, [r3, #20]
 8004d96:	431a      	orrs	r2, r3
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	69db      	ldr	r3, [r3, #28]
 8004d9c:	4313      	orrs	r3, r2
 8004d9e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	681a      	ldr	r2, [r3, #0]
 8004da6:	4ba6      	ldr	r3, [pc, #664]	@ (8005040 <UART_SetConfig+0x2c4>)
 8004da8:	4013      	ands	r3, r2
 8004daa:	687a      	ldr	r2, [r7, #4]
 8004dac:	6812      	ldr	r2, [r2, #0]
 8004dae:	6979      	ldr	r1, [r7, #20]
 8004db0:	430b      	orrs	r3, r1
 8004db2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	685b      	ldr	r3, [r3, #4]
 8004dba:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	68da      	ldr	r2, [r3, #12]
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	430a      	orrs	r2, r1
 8004dc8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	699b      	ldr	r3, [r3, #24]
 8004dce:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	6a1b      	ldr	r3, [r3, #32]
 8004dd4:	697a      	ldr	r2, [r7, #20]
 8004dd6:	4313      	orrs	r3, r2
 8004dd8:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	689b      	ldr	r3, [r3, #8]
 8004de0:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	697a      	ldr	r2, [r7, #20]
 8004dea:	430a      	orrs	r2, r1
 8004dec:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	4a94      	ldr	r2, [pc, #592]	@ (8005044 <UART_SetConfig+0x2c8>)
 8004df4:	4293      	cmp	r3, r2
 8004df6:	d120      	bne.n	8004e3a <UART_SetConfig+0xbe>
 8004df8:	4b93      	ldr	r3, [pc, #588]	@ (8005048 <UART_SetConfig+0x2cc>)
 8004dfa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004dfe:	f003 0303 	and.w	r3, r3, #3
 8004e02:	2b03      	cmp	r3, #3
 8004e04:	d816      	bhi.n	8004e34 <UART_SetConfig+0xb8>
 8004e06:	a201      	add	r2, pc, #4	@ (adr r2, 8004e0c <UART_SetConfig+0x90>)
 8004e08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e0c:	08004e1d 	.word	0x08004e1d
 8004e10:	08004e29 	.word	0x08004e29
 8004e14:	08004e23 	.word	0x08004e23
 8004e18:	08004e2f 	.word	0x08004e2f
 8004e1c:	2301      	movs	r3, #1
 8004e1e:	77fb      	strb	r3, [r7, #31]
 8004e20:	e150      	b.n	80050c4 <UART_SetConfig+0x348>
 8004e22:	2302      	movs	r3, #2
 8004e24:	77fb      	strb	r3, [r7, #31]
 8004e26:	e14d      	b.n	80050c4 <UART_SetConfig+0x348>
 8004e28:	2304      	movs	r3, #4
 8004e2a:	77fb      	strb	r3, [r7, #31]
 8004e2c:	e14a      	b.n	80050c4 <UART_SetConfig+0x348>
 8004e2e:	2308      	movs	r3, #8
 8004e30:	77fb      	strb	r3, [r7, #31]
 8004e32:	e147      	b.n	80050c4 <UART_SetConfig+0x348>
 8004e34:	2310      	movs	r3, #16
 8004e36:	77fb      	strb	r3, [r7, #31]
 8004e38:	e144      	b.n	80050c4 <UART_SetConfig+0x348>
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	4a83      	ldr	r2, [pc, #524]	@ (800504c <UART_SetConfig+0x2d0>)
 8004e40:	4293      	cmp	r3, r2
 8004e42:	d132      	bne.n	8004eaa <UART_SetConfig+0x12e>
 8004e44:	4b80      	ldr	r3, [pc, #512]	@ (8005048 <UART_SetConfig+0x2cc>)
 8004e46:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004e4a:	f003 030c 	and.w	r3, r3, #12
 8004e4e:	2b0c      	cmp	r3, #12
 8004e50:	d828      	bhi.n	8004ea4 <UART_SetConfig+0x128>
 8004e52:	a201      	add	r2, pc, #4	@ (adr r2, 8004e58 <UART_SetConfig+0xdc>)
 8004e54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e58:	08004e8d 	.word	0x08004e8d
 8004e5c:	08004ea5 	.word	0x08004ea5
 8004e60:	08004ea5 	.word	0x08004ea5
 8004e64:	08004ea5 	.word	0x08004ea5
 8004e68:	08004e99 	.word	0x08004e99
 8004e6c:	08004ea5 	.word	0x08004ea5
 8004e70:	08004ea5 	.word	0x08004ea5
 8004e74:	08004ea5 	.word	0x08004ea5
 8004e78:	08004e93 	.word	0x08004e93
 8004e7c:	08004ea5 	.word	0x08004ea5
 8004e80:	08004ea5 	.word	0x08004ea5
 8004e84:	08004ea5 	.word	0x08004ea5
 8004e88:	08004e9f 	.word	0x08004e9f
 8004e8c:	2300      	movs	r3, #0
 8004e8e:	77fb      	strb	r3, [r7, #31]
 8004e90:	e118      	b.n	80050c4 <UART_SetConfig+0x348>
 8004e92:	2302      	movs	r3, #2
 8004e94:	77fb      	strb	r3, [r7, #31]
 8004e96:	e115      	b.n	80050c4 <UART_SetConfig+0x348>
 8004e98:	2304      	movs	r3, #4
 8004e9a:	77fb      	strb	r3, [r7, #31]
 8004e9c:	e112      	b.n	80050c4 <UART_SetConfig+0x348>
 8004e9e:	2308      	movs	r3, #8
 8004ea0:	77fb      	strb	r3, [r7, #31]
 8004ea2:	e10f      	b.n	80050c4 <UART_SetConfig+0x348>
 8004ea4:	2310      	movs	r3, #16
 8004ea6:	77fb      	strb	r3, [r7, #31]
 8004ea8:	e10c      	b.n	80050c4 <UART_SetConfig+0x348>
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	4a68      	ldr	r2, [pc, #416]	@ (8005050 <UART_SetConfig+0x2d4>)
 8004eb0:	4293      	cmp	r3, r2
 8004eb2:	d120      	bne.n	8004ef6 <UART_SetConfig+0x17a>
 8004eb4:	4b64      	ldr	r3, [pc, #400]	@ (8005048 <UART_SetConfig+0x2cc>)
 8004eb6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004eba:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8004ebe:	2b30      	cmp	r3, #48	@ 0x30
 8004ec0:	d013      	beq.n	8004eea <UART_SetConfig+0x16e>
 8004ec2:	2b30      	cmp	r3, #48	@ 0x30
 8004ec4:	d814      	bhi.n	8004ef0 <UART_SetConfig+0x174>
 8004ec6:	2b20      	cmp	r3, #32
 8004ec8:	d009      	beq.n	8004ede <UART_SetConfig+0x162>
 8004eca:	2b20      	cmp	r3, #32
 8004ecc:	d810      	bhi.n	8004ef0 <UART_SetConfig+0x174>
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d002      	beq.n	8004ed8 <UART_SetConfig+0x15c>
 8004ed2:	2b10      	cmp	r3, #16
 8004ed4:	d006      	beq.n	8004ee4 <UART_SetConfig+0x168>
 8004ed6:	e00b      	b.n	8004ef0 <UART_SetConfig+0x174>
 8004ed8:	2300      	movs	r3, #0
 8004eda:	77fb      	strb	r3, [r7, #31]
 8004edc:	e0f2      	b.n	80050c4 <UART_SetConfig+0x348>
 8004ede:	2302      	movs	r3, #2
 8004ee0:	77fb      	strb	r3, [r7, #31]
 8004ee2:	e0ef      	b.n	80050c4 <UART_SetConfig+0x348>
 8004ee4:	2304      	movs	r3, #4
 8004ee6:	77fb      	strb	r3, [r7, #31]
 8004ee8:	e0ec      	b.n	80050c4 <UART_SetConfig+0x348>
 8004eea:	2308      	movs	r3, #8
 8004eec:	77fb      	strb	r3, [r7, #31]
 8004eee:	e0e9      	b.n	80050c4 <UART_SetConfig+0x348>
 8004ef0:	2310      	movs	r3, #16
 8004ef2:	77fb      	strb	r3, [r7, #31]
 8004ef4:	e0e6      	b.n	80050c4 <UART_SetConfig+0x348>
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	4a56      	ldr	r2, [pc, #344]	@ (8005054 <UART_SetConfig+0x2d8>)
 8004efc:	4293      	cmp	r3, r2
 8004efe:	d120      	bne.n	8004f42 <UART_SetConfig+0x1c6>
 8004f00:	4b51      	ldr	r3, [pc, #324]	@ (8005048 <UART_SetConfig+0x2cc>)
 8004f02:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004f06:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8004f0a:	2bc0      	cmp	r3, #192	@ 0xc0
 8004f0c:	d013      	beq.n	8004f36 <UART_SetConfig+0x1ba>
 8004f0e:	2bc0      	cmp	r3, #192	@ 0xc0
 8004f10:	d814      	bhi.n	8004f3c <UART_SetConfig+0x1c0>
 8004f12:	2b80      	cmp	r3, #128	@ 0x80
 8004f14:	d009      	beq.n	8004f2a <UART_SetConfig+0x1ae>
 8004f16:	2b80      	cmp	r3, #128	@ 0x80
 8004f18:	d810      	bhi.n	8004f3c <UART_SetConfig+0x1c0>
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d002      	beq.n	8004f24 <UART_SetConfig+0x1a8>
 8004f1e:	2b40      	cmp	r3, #64	@ 0x40
 8004f20:	d006      	beq.n	8004f30 <UART_SetConfig+0x1b4>
 8004f22:	e00b      	b.n	8004f3c <UART_SetConfig+0x1c0>
 8004f24:	2300      	movs	r3, #0
 8004f26:	77fb      	strb	r3, [r7, #31]
 8004f28:	e0cc      	b.n	80050c4 <UART_SetConfig+0x348>
 8004f2a:	2302      	movs	r3, #2
 8004f2c:	77fb      	strb	r3, [r7, #31]
 8004f2e:	e0c9      	b.n	80050c4 <UART_SetConfig+0x348>
 8004f30:	2304      	movs	r3, #4
 8004f32:	77fb      	strb	r3, [r7, #31]
 8004f34:	e0c6      	b.n	80050c4 <UART_SetConfig+0x348>
 8004f36:	2308      	movs	r3, #8
 8004f38:	77fb      	strb	r3, [r7, #31]
 8004f3a:	e0c3      	b.n	80050c4 <UART_SetConfig+0x348>
 8004f3c:	2310      	movs	r3, #16
 8004f3e:	77fb      	strb	r3, [r7, #31]
 8004f40:	e0c0      	b.n	80050c4 <UART_SetConfig+0x348>
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	4a44      	ldr	r2, [pc, #272]	@ (8005058 <UART_SetConfig+0x2dc>)
 8004f48:	4293      	cmp	r3, r2
 8004f4a:	d125      	bne.n	8004f98 <UART_SetConfig+0x21c>
 8004f4c:	4b3e      	ldr	r3, [pc, #248]	@ (8005048 <UART_SetConfig+0x2cc>)
 8004f4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004f52:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004f56:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004f5a:	d017      	beq.n	8004f8c <UART_SetConfig+0x210>
 8004f5c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004f60:	d817      	bhi.n	8004f92 <UART_SetConfig+0x216>
 8004f62:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004f66:	d00b      	beq.n	8004f80 <UART_SetConfig+0x204>
 8004f68:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004f6c:	d811      	bhi.n	8004f92 <UART_SetConfig+0x216>
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d003      	beq.n	8004f7a <UART_SetConfig+0x1fe>
 8004f72:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004f76:	d006      	beq.n	8004f86 <UART_SetConfig+0x20a>
 8004f78:	e00b      	b.n	8004f92 <UART_SetConfig+0x216>
 8004f7a:	2300      	movs	r3, #0
 8004f7c:	77fb      	strb	r3, [r7, #31]
 8004f7e:	e0a1      	b.n	80050c4 <UART_SetConfig+0x348>
 8004f80:	2302      	movs	r3, #2
 8004f82:	77fb      	strb	r3, [r7, #31]
 8004f84:	e09e      	b.n	80050c4 <UART_SetConfig+0x348>
 8004f86:	2304      	movs	r3, #4
 8004f88:	77fb      	strb	r3, [r7, #31]
 8004f8a:	e09b      	b.n	80050c4 <UART_SetConfig+0x348>
 8004f8c:	2308      	movs	r3, #8
 8004f8e:	77fb      	strb	r3, [r7, #31]
 8004f90:	e098      	b.n	80050c4 <UART_SetConfig+0x348>
 8004f92:	2310      	movs	r3, #16
 8004f94:	77fb      	strb	r3, [r7, #31]
 8004f96:	e095      	b.n	80050c4 <UART_SetConfig+0x348>
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	4a2f      	ldr	r2, [pc, #188]	@ (800505c <UART_SetConfig+0x2e0>)
 8004f9e:	4293      	cmp	r3, r2
 8004fa0:	d125      	bne.n	8004fee <UART_SetConfig+0x272>
 8004fa2:	4b29      	ldr	r3, [pc, #164]	@ (8005048 <UART_SetConfig+0x2cc>)
 8004fa4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004fa8:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8004fac:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004fb0:	d017      	beq.n	8004fe2 <UART_SetConfig+0x266>
 8004fb2:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004fb6:	d817      	bhi.n	8004fe8 <UART_SetConfig+0x26c>
 8004fb8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004fbc:	d00b      	beq.n	8004fd6 <UART_SetConfig+0x25a>
 8004fbe:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004fc2:	d811      	bhi.n	8004fe8 <UART_SetConfig+0x26c>
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	d003      	beq.n	8004fd0 <UART_SetConfig+0x254>
 8004fc8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004fcc:	d006      	beq.n	8004fdc <UART_SetConfig+0x260>
 8004fce:	e00b      	b.n	8004fe8 <UART_SetConfig+0x26c>
 8004fd0:	2301      	movs	r3, #1
 8004fd2:	77fb      	strb	r3, [r7, #31]
 8004fd4:	e076      	b.n	80050c4 <UART_SetConfig+0x348>
 8004fd6:	2302      	movs	r3, #2
 8004fd8:	77fb      	strb	r3, [r7, #31]
 8004fda:	e073      	b.n	80050c4 <UART_SetConfig+0x348>
 8004fdc:	2304      	movs	r3, #4
 8004fde:	77fb      	strb	r3, [r7, #31]
 8004fe0:	e070      	b.n	80050c4 <UART_SetConfig+0x348>
 8004fe2:	2308      	movs	r3, #8
 8004fe4:	77fb      	strb	r3, [r7, #31]
 8004fe6:	e06d      	b.n	80050c4 <UART_SetConfig+0x348>
 8004fe8:	2310      	movs	r3, #16
 8004fea:	77fb      	strb	r3, [r7, #31]
 8004fec:	e06a      	b.n	80050c4 <UART_SetConfig+0x348>
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	4a1b      	ldr	r2, [pc, #108]	@ (8005060 <UART_SetConfig+0x2e4>)
 8004ff4:	4293      	cmp	r3, r2
 8004ff6:	d138      	bne.n	800506a <UART_SetConfig+0x2ee>
 8004ff8:	4b13      	ldr	r3, [pc, #76]	@ (8005048 <UART_SetConfig+0x2cc>)
 8004ffa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004ffe:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8005002:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8005006:	d017      	beq.n	8005038 <UART_SetConfig+0x2bc>
 8005008:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800500c:	d82a      	bhi.n	8005064 <UART_SetConfig+0x2e8>
 800500e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005012:	d00b      	beq.n	800502c <UART_SetConfig+0x2b0>
 8005014:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005018:	d824      	bhi.n	8005064 <UART_SetConfig+0x2e8>
 800501a:	2b00      	cmp	r3, #0
 800501c:	d003      	beq.n	8005026 <UART_SetConfig+0x2aa>
 800501e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005022:	d006      	beq.n	8005032 <UART_SetConfig+0x2b6>
 8005024:	e01e      	b.n	8005064 <UART_SetConfig+0x2e8>
 8005026:	2300      	movs	r3, #0
 8005028:	77fb      	strb	r3, [r7, #31]
 800502a:	e04b      	b.n	80050c4 <UART_SetConfig+0x348>
 800502c:	2302      	movs	r3, #2
 800502e:	77fb      	strb	r3, [r7, #31]
 8005030:	e048      	b.n	80050c4 <UART_SetConfig+0x348>
 8005032:	2304      	movs	r3, #4
 8005034:	77fb      	strb	r3, [r7, #31]
 8005036:	e045      	b.n	80050c4 <UART_SetConfig+0x348>
 8005038:	2308      	movs	r3, #8
 800503a:	77fb      	strb	r3, [r7, #31]
 800503c:	e042      	b.n	80050c4 <UART_SetConfig+0x348>
 800503e:	bf00      	nop
 8005040:	efff69f3 	.word	0xefff69f3
 8005044:	40011000 	.word	0x40011000
 8005048:	40023800 	.word	0x40023800
 800504c:	40004400 	.word	0x40004400
 8005050:	40004800 	.word	0x40004800
 8005054:	40004c00 	.word	0x40004c00
 8005058:	40005000 	.word	0x40005000
 800505c:	40011400 	.word	0x40011400
 8005060:	40007800 	.word	0x40007800
 8005064:	2310      	movs	r3, #16
 8005066:	77fb      	strb	r3, [r7, #31]
 8005068:	e02c      	b.n	80050c4 <UART_SetConfig+0x348>
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	4a72      	ldr	r2, [pc, #456]	@ (8005238 <UART_SetConfig+0x4bc>)
 8005070:	4293      	cmp	r3, r2
 8005072:	d125      	bne.n	80050c0 <UART_SetConfig+0x344>
 8005074:	4b71      	ldr	r3, [pc, #452]	@ (800523c <UART_SetConfig+0x4c0>)
 8005076:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800507a:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800507e:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8005082:	d017      	beq.n	80050b4 <UART_SetConfig+0x338>
 8005084:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8005088:	d817      	bhi.n	80050ba <UART_SetConfig+0x33e>
 800508a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800508e:	d00b      	beq.n	80050a8 <UART_SetConfig+0x32c>
 8005090:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005094:	d811      	bhi.n	80050ba <UART_SetConfig+0x33e>
 8005096:	2b00      	cmp	r3, #0
 8005098:	d003      	beq.n	80050a2 <UART_SetConfig+0x326>
 800509a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800509e:	d006      	beq.n	80050ae <UART_SetConfig+0x332>
 80050a0:	e00b      	b.n	80050ba <UART_SetConfig+0x33e>
 80050a2:	2300      	movs	r3, #0
 80050a4:	77fb      	strb	r3, [r7, #31]
 80050a6:	e00d      	b.n	80050c4 <UART_SetConfig+0x348>
 80050a8:	2302      	movs	r3, #2
 80050aa:	77fb      	strb	r3, [r7, #31]
 80050ac:	e00a      	b.n	80050c4 <UART_SetConfig+0x348>
 80050ae:	2304      	movs	r3, #4
 80050b0:	77fb      	strb	r3, [r7, #31]
 80050b2:	e007      	b.n	80050c4 <UART_SetConfig+0x348>
 80050b4:	2308      	movs	r3, #8
 80050b6:	77fb      	strb	r3, [r7, #31]
 80050b8:	e004      	b.n	80050c4 <UART_SetConfig+0x348>
 80050ba:	2310      	movs	r3, #16
 80050bc:	77fb      	strb	r3, [r7, #31]
 80050be:	e001      	b.n	80050c4 <UART_SetConfig+0x348>
 80050c0:	2310      	movs	r3, #16
 80050c2:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	69db      	ldr	r3, [r3, #28]
 80050c8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80050cc:	d15b      	bne.n	8005186 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 80050ce:	7ffb      	ldrb	r3, [r7, #31]
 80050d0:	2b08      	cmp	r3, #8
 80050d2:	d828      	bhi.n	8005126 <UART_SetConfig+0x3aa>
 80050d4:	a201      	add	r2, pc, #4	@ (adr r2, 80050dc <UART_SetConfig+0x360>)
 80050d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050da:	bf00      	nop
 80050dc:	08005101 	.word	0x08005101
 80050e0:	08005109 	.word	0x08005109
 80050e4:	08005111 	.word	0x08005111
 80050e8:	08005127 	.word	0x08005127
 80050ec:	08005117 	.word	0x08005117
 80050f0:	08005127 	.word	0x08005127
 80050f4:	08005127 	.word	0x08005127
 80050f8:	08005127 	.word	0x08005127
 80050fc:	0800511f 	.word	0x0800511f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005100:	f7fd fb56 	bl	80027b0 <HAL_RCC_GetPCLK1Freq>
 8005104:	61b8      	str	r0, [r7, #24]
        break;
 8005106:	e013      	b.n	8005130 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005108:	f7fd fb66 	bl	80027d8 <HAL_RCC_GetPCLK2Freq>
 800510c:	61b8      	str	r0, [r7, #24]
        break;
 800510e:	e00f      	b.n	8005130 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005110:	4b4b      	ldr	r3, [pc, #300]	@ (8005240 <UART_SetConfig+0x4c4>)
 8005112:	61bb      	str	r3, [r7, #24]
        break;
 8005114:	e00c      	b.n	8005130 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005116:	f7fd fa39 	bl	800258c <HAL_RCC_GetSysClockFreq>
 800511a:	61b8      	str	r0, [r7, #24]
        break;
 800511c:	e008      	b.n	8005130 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800511e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005122:	61bb      	str	r3, [r7, #24]
        break;
 8005124:	e004      	b.n	8005130 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8005126:	2300      	movs	r3, #0
 8005128:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800512a:	2301      	movs	r3, #1
 800512c:	77bb      	strb	r3, [r7, #30]
        break;
 800512e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005130:	69bb      	ldr	r3, [r7, #24]
 8005132:	2b00      	cmp	r3, #0
 8005134:	d074      	beq.n	8005220 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005136:	69bb      	ldr	r3, [r7, #24]
 8005138:	005a      	lsls	r2, r3, #1
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	685b      	ldr	r3, [r3, #4]
 800513e:	085b      	lsrs	r3, r3, #1
 8005140:	441a      	add	r2, r3
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	685b      	ldr	r3, [r3, #4]
 8005146:	fbb2 f3f3 	udiv	r3, r2, r3
 800514a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800514c:	693b      	ldr	r3, [r7, #16]
 800514e:	2b0f      	cmp	r3, #15
 8005150:	d916      	bls.n	8005180 <UART_SetConfig+0x404>
 8005152:	693b      	ldr	r3, [r7, #16]
 8005154:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005158:	d212      	bcs.n	8005180 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800515a:	693b      	ldr	r3, [r7, #16]
 800515c:	b29b      	uxth	r3, r3
 800515e:	f023 030f 	bic.w	r3, r3, #15
 8005162:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005164:	693b      	ldr	r3, [r7, #16]
 8005166:	085b      	lsrs	r3, r3, #1
 8005168:	b29b      	uxth	r3, r3
 800516a:	f003 0307 	and.w	r3, r3, #7
 800516e:	b29a      	uxth	r2, r3
 8005170:	89fb      	ldrh	r3, [r7, #14]
 8005172:	4313      	orrs	r3, r2
 8005174:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	89fa      	ldrh	r2, [r7, #14]
 800517c:	60da      	str	r2, [r3, #12]
 800517e:	e04f      	b.n	8005220 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8005180:	2301      	movs	r3, #1
 8005182:	77bb      	strb	r3, [r7, #30]
 8005184:	e04c      	b.n	8005220 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005186:	7ffb      	ldrb	r3, [r7, #31]
 8005188:	2b08      	cmp	r3, #8
 800518a:	d828      	bhi.n	80051de <UART_SetConfig+0x462>
 800518c:	a201      	add	r2, pc, #4	@ (adr r2, 8005194 <UART_SetConfig+0x418>)
 800518e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005192:	bf00      	nop
 8005194:	080051b9 	.word	0x080051b9
 8005198:	080051c1 	.word	0x080051c1
 800519c:	080051c9 	.word	0x080051c9
 80051a0:	080051df 	.word	0x080051df
 80051a4:	080051cf 	.word	0x080051cf
 80051a8:	080051df 	.word	0x080051df
 80051ac:	080051df 	.word	0x080051df
 80051b0:	080051df 	.word	0x080051df
 80051b4:	080051d7 	.word	0x080051d7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80051b8:	f7fd fafa 	bl	80027b0 <HAL_RCC_GetPCLK1Freq>
 80051bc:	61b8      	str	r0, [r7, #24]
        break;
 80051be:	e013      	b.n	80051e8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80051c0:	f7fd fb0a 	bl	80027d8 <HAL_RCC_GetPCLK2Freq>
 80051c4:	61b8      	str	r0, [r7, #24]
        break;
 80051c6:	e00f      	b.n	80051e8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80051c8:	4b1d      	ldr	r3, [pc, #116]	@ (8005240 <UART_SetConfig+0x4c4>)
 80051ca:	61bb      	str	r3, [r7, #24]
        break;
 80051cc:	e00c      	b.n	80051e8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80051ce:	f7fd f9dd 	bl	800258c <HAL_RCC_GetSysClockFreq>
 80051d2:	61b8      	str	r0, [r7, #24]
        break;
 80051d4:	e008      	b.n	80051e8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80051d6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80051da:	61bb      	str	r3, [r7, #24]
        break;
 80051dc:	e004      	b.n	80051e8 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 80051de:	2300      	movs	r3, #0
 80051e0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80051e2:	2301      	movs	r3, #1
 80051e4:	77bb      	strb	r3, [r7, #30]
        break;
 80051e6:	bf00      	nop
    }

    if (pclk != 0U)
 80051e8:	69bb      	ldr	r3, [r7, #24]
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d018      	beq.n	8005220 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	685b      	ldr	r3, [r3, #4]
 80051f2:	085a      	lsrs	r2, r3, #1
 80051f4:	69bb      	ldr	r3, [r7, #24]
 80051f6:	441a      	add	r2, r3
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	685b      	ldr	r3, [r3, #4]
 80051fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8005200:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005202:	693b      	ldr	r3, [r7, #16]
 8005204:	2b0f      	cmp	r3, #15
 8005206:	d909      	bls.n	800521c <UART_SetConfig+0x4a0>
 8005208:	693b      	ldr	r3, [r7, #16]
 800520a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800520e:	d205      	bcs.n	800521c <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005210:	693b      	ldr	r3, [r7, #16]
 8005212:	b29a      	uxth	r2, r3
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	60da      	str	r2, [r3, #12]
 800521a:	e001      	b.n	8005220 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800521c:	2301      	movs	r3, #1
 800521e:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	2200      	movs	r2, #0
 8005224:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	2200      	movs	r2, #0
 800522a:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 800522c:	7fbb      	ldrb	r3, [r7, #30]
}
 800522e:	4618      	mov	r0, r3
 8005230:	3720      	adds	r7, #32
 8005232:	46bd      	mov	sp, r7
 8005234:	bd80      	pop	{r7, pc}
 8005236:	bf00      	nop
 8005238:	40007c00 	.word	0x40007c00
 800523c:	40023800 	.word	0x40023800
 8005240:	00f42400 	.word	0x00f42400

08005244 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005244:	b480      	push	{r7}
 8005246:	b083      	sub	sp, #12
 8005248:	af00      	add	r7, sp, #0
 800524a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005250:	f003 0308 	and.w	r3, r3, #8
 8005254:	2b00      	cmp	r3, #0
 8005256:	d00a      	beq.n	800526e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	685b      	ldr	r3, [r3, #4]
 800525e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	430a      	orrs	r2, r1
 800526c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005272:	f003 0301 	and.w	r3, r3, #1
 8005276:	2b00      	cmp	r3, #0
 8005278:	d00a      	beq.n	8005290 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	685b      	ldr	r3, [r3, #4]
 8005280:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	430a      	orrs	r2, r1
 800528e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005294:	f003 0302 	and.w	r3, r3, #2
 8005298:	2b00      	cmp	r3, #0
 800529a:	d00a      	beq.n	80052b2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	685b      	ldr	r3, [r3, #4]
 80052a2:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	430a      	orrs	r2, r1
 80052b0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80052b6:	f003 0304 	and.w	r3, r3, #4
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d00a      	beq.n	80052d4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	685b      	ldr	r3, [r3, #4]
 80052c4:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	430a      	orrs	r2, r1
 80052d2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80052d8:	f003 0310 	and.w	r3, r3, #16
 80052dc:	2b00      	cmp	r3, #0
 80052de:	d00a      	beq.n	80052f6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	689b      	ldr	r3, [r3, #8]
 80052e6:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	430a      	orrs	r2, r1
 80052f4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80052fa:	f003 0320 	and.w	r3, r3, #32
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d00a      	beq.n	8005318 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	689b      	ldr	r3, [r3, #8]
 8005308:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	430a      	orrs	r2, r1
 8005316:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800531c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005320:	2b00      	cmp	r3, #0
 8005322:	d01a      	beq.n	800535a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	685b      	ldr	r3, [r3, #4]
 800532a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	430a      	orrs	r2, r1
 8005338:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800533e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005342:	d10a      	bne.n	800535a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	685b      	ldr	r3, [r3, #4]
 800534a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	430a      	orrs	r2, r1
 8005358:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800535e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005362:	2b00      	cmp	r3, #0
 8005364:	d00a      	beq.n	800537c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	685b      	ldr	r3, [r3, #4]
 800536c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	430a      	orrs	r2, r1
 800537a:	605a      	str	r2, [r3, #4]
  }
}
 800537c:	bf00      	nop
 800537e:	370c      	adds	r7, #12
 8005380:	46bd      	mov	sp, r7
 8005382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005386:	4770      	bx	lr

08005388 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005388:	b580      	push	{r7, lr}
 800538a:	b098      	sub	sp, #96	@ 0x60
 800538c:	af02      	add	r7, sp, #8
 800538e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	2200      	movs	r2, #0
 8005394:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005398:	f7fc fa1a 	bl	80017d0 <HAL_GetTick>
 800539c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	f003 0308 	and.w	r3, r3, #8
 80053a8:	2b08      	cmp	r3, #8
 80053aa:	d12e      	bne.n	800540a <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80053ac:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80053b0:	9300      	str	r3, [sp, #0]
 80053b2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80053b4:	2200      	movs	r2, #0
 80053b6:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80053ba:	6878      	ldr	r0, [r7, #4]
 80053bc:	f000 f88c 	bl	80054d8 <UART_WaitOnFlagUntilTimeout>
 80053c0:	4603      	mov	r3, r0
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d021      	beq.n	800540a <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80053ce:	e853 3f00 	ldrex	r3, [r3]
 80053d2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80053d4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80053d6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80053da:	653b      	str	r3, [r7, #80]	@ 0x50
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	461a      	mov	r2, r3
 80053e2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80053e4:	647b      	str	r3, [r7, #68]	@ 0x44
 80053e6:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053e8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80053ea:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80053ec:	e841 2300 	strex	r3, r2, [r1]
 80053f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80053f2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	d1e6      	bne.n	80053c6 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	2220      	movs	r2, #32
 80053fc:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	2200      	movs	r2, #0
 8005402:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005406:	2303      	movs	r3, #3
 8005408:	e062      	b.n	80054d0 <UART_CheckIdleState+0x148>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	f003 0304 	and.w	r3, r3, #4
 8005414:	2b04      	cmp	r3, #4
 8005416:	d149      	bne.n	80054ac <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005418:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800541c:	9300      	str	r3, [sp, #0]
 800541e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005420:	2200      	movs	r2, #0
 8005422:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8005426:	6878      	ldr	r0, [r7, #4]
 8005428:	f000 f856 	bl	80054d8 <UART_WaitOnFlagUntilTimeout>
 800542c:	4603      	mov	r3, r0
 800542e:	2b00      	cmp	r3, #0
 8005430:	d03c      	beq.n	80054ac <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005438:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800543a:	e853 3f00 	ldrex	r3, [r3]
 800543e:	623b      	str	r3, [r7, #32]
   return(result);
 8005440:	6a3b      	ldr	r3, [r7, #32]
 8005442:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005446:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	461a      	mov	r2, r3
 800544e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005450:	633b      	str	r3, [r7, #48]	@ 0x30
 8005452:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005454:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005456:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005458:	e841 2300 	strex	r3, r2, [r1]
 800545c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800545e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005460:	2b00      	cmp	r3, #0
 8005462:	d1e6      	bne.n	8005432 <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	3308      	adds	r3, #8
 800546a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800546c:	693b      	ldr	r3, [r7, #16]
 800546e:	e853 3f00 	ldrex	r3, [r3]
 8005472:	60fb      	str	r3, [r7, #12]
   return(result);
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	f023 0301 	bic.w	r3, r3, #1
 800547a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	3308      	adds	r3, #8
 8005482:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005484:	61fa      	str	r2, [r7, #28]
 8005486:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005488:	69b9      	ldr	r1, [r7, #24]
 800548a:	69fa      	ldr	r2, [r7, #28]
 800548c:	e841 2300 	strex	r3, r2, [r1]
 8005490:	617b      	str	r3, [r7, #20]
   return(result);
 8005492:	697b      	ldr	r3, [r7, #20]
 8005494:	2b00      	cmp	r3, #0
 8005496:	d1e5      	bne.n	8005464 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	2220      	movs	r2, #32
 800549c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	2200      	movs	r2, #0
 80054a4:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80054a8:	2303      	movs	r3, #3
 80054aa:	e011      	b.n	80054d0 <UART_CheckIdleState+0x148>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	2220      	movs	r2, #32
 80054b0:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	2220      	movs	r2, #32
 80054b6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	2200      	movs	r2, #0
 80054be:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	2200      	movs	r2, #0
 80054c4:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	2200      	movs	r2, #0
 80054ca:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 80054ce:	2300      	movs	r3, #0
}
 80054d0:	4618      	mov	r0, r3
 80054d2:	3758      	adds	r7, #88	@ 0x58
 80054d4:	46bd      	mov	sp, r7
 80054d6:	bd80      	pop	{r7, pc}

080054d8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80054d8:	b580      	push	{r7, lr}
 80054da:	b084      	sub	sp, #16
 80054dc:	af00      	add	r7, sp, #0
 80054de:	60f8      	str	r0, [r7, #12]
 80054e0:	60b9      	str	r1, [r7, #8]
 80054e2:	603b      	str	r3, [r7, #0]
 80054e4:	4613      	mov	r3, r2
 80054e6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80054e8:	e04f      	b.n	800558a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80054ea:	69bb      	ldr	r3, [r7, #24]
 80054ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80054f0:	d04b      	beq.n	800558a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80054f2:	f7fc f96d 	bl	80017d0 <HAL_GetTick>
 80054f6:	4602      	mov	r2, r0
 80054f8:	683b      	ldr	r3, [r7, #0]
 80054fa:	1ad3      	subs	r3, r2, r3
 80054fc:	69ba      	ldr	r2, [r7, #24]
 80054fe:	429a      	cmp	r2, r3
 8005500:	d302      	bcc.n	8005508 <UART_WaitOnFlagUntilTimeout+0x30>
 8005502:	69bb      	ldr	r3, [r7, #24]
 8005504:	2b00      	cmp	r3, #0
 8005506:	d101      	bne.n	800550c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005508:	2303      	movs	r3, #3
 800550a:	e04e      	b.n	80055aa <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	f003 0304 	and.w	r3, r3, #4
 8005516:	2b00      	cmp	r3, #0
 8005518:	d037      	beq.n	800558a <UART_WaitOnFlagUntilTimeout+0xb2>
 800551a:	68bb      	ldr	r3, [r7, #8]
 800551c:	2b80      	cmp	r3, #128	@ 0x80
 800551e:	d034      	beq.n	800558a <UART_WaitOnFlagUntilTimeout+0xb2>
 8005520:	68bb      	ldr	r3, [r7, #8]
 8005522:	2b40      	cmp	r3, #64	@ 0x40
 8005524:	d031      	beq.n	800558a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	69db      	ldr	r3, [r3, #28]
 800552c:	f003 0308 	and.w	r3, r3, #8
 8005530:	2b08      	cmp	r3, #8
 8005532:	d110      	bne.n	8005556 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	2208      	movs	r2, #8
 800553a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800553c:	68f8      	ldr	r0, [r7, #12]
 800553e:	f000 f838 	bl	80055b2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	2208      	movs	r2, #8
 8005546:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	2200      	movs	r2, #0
 800554e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8005552:	2301      	movs	r3, #1
 8005554:	e029      	b.n	80055aa <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	69db      	ldr	r3, [r3, #28]
 800555c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005560:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005564:	d111      	bne.n	800558a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800556e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005570:	68f8      	ldr	r0, [r7, #12]
 8005572:	f000 f81e 	bl	80055b2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	2220      	movs	r2, #32
 800557a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	2200      	movs	r2, #0
 8005582:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8005586:	2303      	movs	r3, #3
 8005588:	e00f      	b.n	80055aa <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	69da      	ldr	r2, [r3, #28]
 8005590:	68bb      	ldr	r3, [r7, #8]
 8005592:	4013      	ands	r3, r2
 8005594:	68ba      	ldr	r2, [r7, #8]
 8005596:	429a      	cmp	r2, r3
 8005598:	bf0c      	ite	eq
 800559a:	2301      	moveq	r3, #1
 800559c:	2300      	movne	r3, #0
 800559e:	b2db      	uxtb	r3, r3
 80055a0:	461a      	mov	r2, r3
 80055a2:	79fb      	ldrb	r3, [r7, #7]
 80055a4:	429a      	cmp	r2, r3
 80055a6:	d0a0      	beq.n	80054ea <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80055a8:	2300      	movs	r3, #0
}
 80055aa:	4618      	mov	r0, r3
 80055ac:	3710      	adds	r7, #16
 80055ae:	46bd      	mov	sp, r7
 80055b0:	bd80      	pop	{r7, pc}

080055b2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80055b2:	b480      	push	{r7}
 80055b4:	b095      	sub	sp, #84	@ 0x54
 80055b6:	af00      	add	r7, sp, #0
 80055b8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055c0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80055c2:	e853 3f00 	ldrex	r3, [r3]
 80055c6:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80055c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80055ca:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80055ce:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	461a      	mov	r2, r3
 80055d6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80055d8:	643b      	str	r3, [r7, #64]	@ 0x40
 80055da:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055dc:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80055de:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80055e0:	e841 2300 	strex	r3, r2, [r1]
 80055e4:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80055e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	d1e6      	bne.n	80055ba <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	3308      	adds	r3, #8
 80055f2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055f4:	6a3b      	ldr	r3, [r7, #32]
 80055f6:	e853 3f00 	ldrex	r3, [r3]
 80055fa:	61fb      	str	r3, [r7, #28]
   return(result);
 80055fc:	69fb      	ldr	r3, [r7, #28]
 80055fe:	f023 0301 	bic.w	r3, r3, #1
 8005602:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	3308      	adds	r3, #8
 800560a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800560c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800560e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005610:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005612:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005614:	e841 2300 	strex	r3, r2, [r1]
 8005618:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800561a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800561c:	2b00      	cmp	r3, #0
 800561e:	d1e5      	bne.n	80055ec <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005624:	2b01      	cmp	r3, #1
 8005626:	d118      	bne.n	800565a <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	e853 3f00 	ldrex	r3, [r3]
 8005634:	60bb      	str	r3, [r7, #8]
   return(result);
 8005636:	68bb      	ldr	r3, [r7, #8]
 8005638:	f023 0310 	bic.w	r3, r3, #16
 800563c:	647b      	str	r3, [r7, #68]	@ 0x44
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	461a      	mov	r2, r3
 8005644:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005646:	61bb      	str	r3, [r7, #24]
 8005648:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800564a:	6979      	ldr	r1, [r7, #20]
 800564c:	69ba      	ldr	r2, [r7, #24]
 800564e:	e841 2300 	strex	r3, r2, [r1]
 8005652:	613b      	str	r3, [r7, #16]
   return(result);
 8005654:	693b      	ldr	r3, [r7, #16]
 8005656:	2b00      	cmp	r3, #0
 8005658:	d1e6      	bne.n	8005628 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	2220      	movs	r2, #32
 800565e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	2200      	movs	r2, #0
 8005666:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	2200      	movs	r2, #0
 800566c:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800566e:	bf00      	nop
 8005670:	3754      	adds	r7, #84	@ 0x54
 8005672:	46bd      	mov	sp, r7
 8005674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005678:	4770      	bx	lr
	...

0800567c <siprintf>:
 800567c:	b40e      	push	{r1, r2, r3}
 800567e:	b500      	push	{lr}
 8005680:	b09c      	sub	sp, #112	@ 0x70
 8005682:	ab1d      	add	r3, sp, #116	@ 0x74
 8005684:	9002      	str	r0, [sp, #8]
 8005686:	9006      	str	r0, [sp, #24]
 8005688:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800568c:	4809      	ldr	r0, [pc, #36]	@ (80056b4 <siprintf+0x38>)
 800568e:	9107      	str	r1, [sp, #28]
 8005690:	9104      	str	r1, [sp, #16]
 8005692:	4909      	ldr	r1, [pc, #36]	@ (80056b8 <siprintf+0x3c>)
 8005694:	f853 2b04 	ldr.w	r2, [r3], #4
 8005698:	9105      	str	r1, [sp, #20]
 800569a:	6800      	ldr	r0, [r0, #0]
 800569c:	9301      	str	r3, [sp, #4]
 800569e:	a902      	add	r1, sp, #8
 80056a0:	f000 f994 	bl	80059cc <_svfiprintf_r>
 80056a4:	9b02      	ldr	r3, [sp, #8]
 80056a6:	2200      	movs	r2, #0
 80056a8:	701a      	strb	r2, [r3, #0]
 80056aa:	b01c      	add	sp, #112	@ 0x70
 80056ac:	f85d eb04 	ldr.w	lr, [sp], #4
 80056b0:	b003      	add	sp, #12
 80056b2:	4770      	bx	lr
 80056b4:	20000024 	.word	0x20000024
 80056b8:	ffff0208 	.word	0xffff0208

080056bc <memset>:
 80056bc:	4402      	add	r2, r0
 80056be:	4603      	mov	r3, r0
 80056c0:	4293      	cmp	r3, r2
 80056c2:	d100      	bne.n	80056c6 <memset+0xa>
 80056c4:	4770      	bx	lr
 80056c6:	f803 1b01 	strb.w	r1, [r3], #1
 80056ca:	e7f9      	b.n	80056c0 <memset+0x4>

080056cc <__errno>:
 80056cc:	4b01      	ldr	r3, [pc, #4]	@ (80056d4 <__errno+0x8>)
 80056ce:	6818      	ldr	r0, [r3, #0]
 80056d0:	4770      	bx	lr
 80056d2:	bf00      	nop
 80056d4:	20000024 	.word	0x20000024

080056d8 <__libc_init_array>:
 80056d8:	b570      	push	{r4, r5, r6, lr}
 80056da:	4d0d      	ldr	r5, [pc, #52]	@ (8005710 <__libc_init_array+0x38>)
 80056dc:	4c0d      	ldr	r4, [pc, #52]	@ (8005714 <__libc_init_array+0x3c>)
 80056de:	1b64      	subs	r4, r4, r5
 80056e0:	10a4      	asrs	r4, r4, #2
 80056e2:	2600      	movs	r6, #0
 80056e4:	42a6      	cmp	r6, r4
 80056e6:	d109      	bne.n	80056fc <__libc_init_array+0x24>
 80056e8:	4d0b      	ldr	r5, [pc, #44]	@ (8005718 <__libc_init_array+0x40>)
 80056ea:	4c0c      	ldr	r4, [pc, #48]	@ (800571c <__libc_init_array+0x44>)
 80056ec:	f000 fc66 	bl	8005fbc <_init>
 80056f0:	1b64      	subs	r4, r4, r5
 80056f2:	10a4      	asrs	r4, r4, #2
 80056f4:	2600      	movs	r6, #0
 80056f6:	42a6      	cmp	r6, r4
 80056f8:	d105      	bne.n	8005706 <__libc_init_array+0x2e>
 80056fa:	bd70      	pop	{r4, r5, r6, pc}
 80056fc:	f855 3b04 	ldr.w	r3, [r5], #4
 8005700:	4798      	blx	r3
 8005702:	3601      	adds	r6, #1
 8005704:	e7ee      	b.n	80056e4 <__libc_init_array+0xc>
 8005706:	f855 3b04 	ldr.w	r3, [r5], #4
 800570a:	4798      	blx	r3
 800570c:	3601      	adds	r6, #1
 800570e:	e7f2      	b.n	80056f6 <__libc_init_array+0x1e>
 8005710:	08006034 	.word	0x08006034
 8005714:	08006034 	.word	0x08006034
 8005718:	08006034 	.word	0x08006034
 800571c:	08006038 	.word	0x08006038

08005720 <__retarget_lock_acquire_recursive>:
 8005720:	4770      	bx	lr

08005722 <__retarget_lock_release_recursive>:
 8005722:	4770      	bx	lr

08005724 <_free_r>:
 8005724:	b538      	push	{r3, r4, r5, lr}
 8005726:	4605      	mov	r5, r0
 8005728:	2900      	cmp	r1, #0
 800572a:	d041      	beq.n	80057b0 <_free_r+0x8c>
 800572c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005730:	1f0c      	subs	r4, r1, #4
 8005732:	2b00      	cmp	r3, #0
 8005734:	bfb8      	it	lt
 8005736:	18e4      	addlt	r4, r4, r3
 8005738:	f000 f8e0 	bl	80058fc <__malloc_lock>
 800573c:	4a1d      	ldr	r2, [pc, #116]	@ (80057b4 <_free_r+0x90>)
 800573e:	6813      	ldr	r3, [r2, #0]
 8005740:	b933      	cbnz	r3, 8005750 <_free_r+0x2c>
 8005742:	6063      	str	r3, [r4, #4]
 8005744:	6014      	str	r4, [r2, #0]
 8005746:	4628      	mov	r0, r5
 8005748:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800574c:	f000 b8dc 	b.w	8005908 <__malloc_unlock>
 8005750:	42a3      	cmp	r3, r4
 8005752:	d908      	bls.n	8005766 <_free_r+0x42>
 8005754:	6820      	ldr	r0, [r4, #0]
 8005756:	1821      	adds	r1, r4, r0
 8005758:	428b      	cmp	r3, r1
 800575a:	bf01      	itttt	eq
 800575c:	6819      	ldreq	r1, [r3, #0]
 800575e:	685b      	ldreq	r3, [r3, #4]
 8005760:	1809      	addeq	r1, r1, r0
 8005762:	6021      	streq	r1, [r4, #0]
 8005764:	e7ed      	b.n	8005742 <_free_r+0x1e>
 8005766:	461a      	mov	r2, r3
 8005768:	685b      	ldr	r3, [r3, #4]
 800576a:	b10b      	cbz	r3, 8005770 <_free_r+0x4c>
 800576c:	42a3      	cmp	r3, r4
 800576e:	d9fa      	bls.n	8005766 <_free_r+0x42>
 8005770:	6811      	ldr	r1, [r2, #0]
 8005772:	1850      	adds	r0, r2, r1
 8005774:	42a0      	cmp	r0, r4
 8005776:	d10b      	bne.n	8005790 <_free_r+0x6c>
 8005778:	6820      	ldr	r0, [r4, #0]
 800577a:	4401      	add	r1, r0
 800577c:	1850      	adds	r0, r2, r1
 800577e:	4283      	cmp	r3, r0
 8005780:	6011      	str	r1, [r2, #0]
 8005782:	d1e0      	bne.n	8005746 <_free_r+0x22>
 8005784:	6818      	ldr	r0, [r3, #0]
 8005786:	685b      	ldr	r3, [r3, #4]
 8005788:	6053      	str	r3, [r2, #4]
 800578a:	4408      	add	r0, r1
 800578c:	6010      	str	r0, [r2, #0]
 800578e:	e7da      	b.n	8005746 <_free_r+0x22>
 8005790:	d902      	bls.n	8005798 <_free_r+0x74>
 8005792:	230c      	movs	r3, #12
 8005794:	602b      	str	r3, [r5, #0]
 8005796:	e7d6      	b.n	8005746 <_free_r+0x22>
 8005798:	6820      	ldr	r0, [r4, #0]
 800579a:	1821      	adds	r1, r4, r0
 800579c:	428b      	cmp	r3, r1
 800579e:	bf04      	itt	eq
 80057a0:	6819      	ldreq	r1, [r3, #0]
 80057a2:	685b      	ldreq	r3, [r3, #4]
 80057a4:	6063      	str	r3, [r4, #4]
 80057a6:	bf04      	itt	eq
 80057a8:	1809      	addeq	r1, r1, r0
 80057aa:	6021      	streq	r1, [r4, #0]
 80057ac:	6054      	str	r4, [r2, #4]
 80057ae:	e7ca      	b.n	8005746 <_free_r+0x22>
 80057b0:	bd38      	pop	{r3, r4, r5, pc}
 80057b2:	bf00      	nop
 80057b4:	200003d8 	.word	0x200003d8

080057b8 <sbrk_aligned>:
 80057b8:	b570      	push	{r4, r5, r6, lr}
 80057ba:	4e0f      	ldr	r6, [pc, #60]	@ (80057f8 <sbrk_aligned+0x40>)
 80057bc:	460c      	mov	r4, r1
 80057be:	6831      	ldr	r1, [r6, #0]
 80057c0:	4605      	mov	r5, r0
 80057c2:	b911      	cbnz	r1, 80057ca <sbrk_aligned+0x12>
 80057c4:	f000 fba6 	bl	8005f14 <_sbrk_r>
 80057c8:	6030      	str	r0, [r6, #0]
 80057ca:	4621      	mov	r1, r4
 80057cc:	4628      	mov	r0, r5
 80057ce:	f000 fba1 	bl	8005f14 <_sbrk_r>
 80057d2:	1c43      	adds	r3, r0, #1
 80057d4:	d103      	bne.n	80057de <sbrk_aligned+0x26>
 80057d6:	f04f 34ff 	mov.w	r4, #4294967295
 80057da:	4620      	mov	r0, r4
 80057dc:	bd70      	pop	{r4, r5, r6, pc}
 80057de:	1cc4      	adds	r4, r0, #3
 80057e0:	f024 0403 	bic.w	r4, r4, #3
 80057e4:	42a0      	cmp	r0, r4
 80057e6:	d0f8      	beq.n	80057da <sbrk_aligned+0x22>
 80057e8:	1a21      	subs	r1, r4, r0
 80057ea:	4628      	mov	r0, r5
 80057ec:	f000 fb92 	bl	8005f14 <_sbrk_r>
 80057f0:	3001      	adds	r0, #1
 80057f2:	d1f2      	bne.n	80057da <sbrk_aligned+0x22>
 80057f4:	e7ef      	b.n	80057d6 <sbrk_aligned+0x1e>
 80057f6:	bf00      	nop
 80057f8:	200003d4 	.word	0x200003d4

080057fc <_malloc_r>:
 80057fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005800:	1ccd      	adds	r5, r1, #3
 8005802:	f025 0503 	bic.w	r5, r5, #3
 8005806:	3508      	adds	r5, #8
 8005808:	2d0c      	cmp	r5, #12
 800580a:	bf38      	it	cc
 800580c:	250c      	movcc	r5, #12
 800580e:	2d00      	cmp	r5, #0
 8005810:	4606      	mov	r6, r0
 8005812:	db01      	blt.n	8005818 <_malloc_r+0x1c>
 8005814:	42a9      	cmp	r1, r5
 8005816:	d904      	bls.n	8005822 <_malloc_r+0x26>
 8005818:	230c      	movs	r3, #12
 800581a:	6033      	str	r3, [r6, #0]
 800581c:	2000      	movs	r0, #0
 800581e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005822:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80058f8 <_malloc_r+0xfc>
 8005826:	f000 f869 	bl	80058fc <__malloc_lock>
 800582a:	f8d8 3000 	ldr.w	r3, [r8]
 800582e:	461c      	mov	r4, r3
 8005830:	bb44      	cbnz	r4, 8005884 <_malloc_r+0x88>
 8005832:	4629      	mov	r1, r5
 8005834:	4630      	mov	r0, r6
 8005836:	f7ff ffbf 	bl	80057b8 <sbrk_aligned>
 800583a:	1c43      	adds	r3, r0, #1
 800583c:	4604      	mov	r4, r0
 800583e:	d158      	bne.n	80058f2 <_malloc_r+0xf6>
 8005840:	f8d8 4000 	ldr.w	r4, [r8]
 8005844:	4627      	mov	r7, r4
 8005846:	2f00      	cmp	r7, #0
 8005848:	d143      	bne.n	80058d2 <_malloc_r+0xd6>
 800584a:	2c00      	cmp	r4, #0
 800584c:	d04b      	beq.n	80058e6 <_malloc_r+0xea>
 800584e:	6823      	ldr	r3, [r4, #0]
 8005850:	4639      	mov	r1, r7
 8005852:	4630      	mov	r0, r6
 8005854:	eb04 0903 	add.w	r9, r4, r3
 8005858:	f000 fb5c 	bl	8005f14 <_sbrk_r>
 800585c:	4581      	cmp	r9, r0
 800585e:	d142      	bne.n	80058e6 <_malloc_r+0xea>
 8005860:	6821      	ldr	r1, [r4, #0]
 8005862:	1a6d      	subs	r5, r5, r1
 8005864:	4629      	mov	r1, r5
 8005866:	4630      	mov	r0, r6
 8005868:	f7ff ffa6 	bl	80057b8 <sbrk_aligned>
 800586c:	3001      	adds	r0, #1
 800586e:	d03a      	beq.n	80058e6 <_malloc_r+0xea>
 8005870:	6823      	ldr	r3, [r4, #0]
 8005872:	442b      	add	r3, r5
 8005874:	6023      	str	r3, [r4, #0]
 8005876:	f8d8 3000 	ldr.w	r3, [r8]
 800587a:	685a      	ldr	r2, [r3, #4]
 800587c:	bb62      	cbnz	r2, 80058d8 <_malloc_r+0xdc>
 800587e:	f8c8 7000 	str.w	r7, [r8]
 8005882:	e00f      	b.n	80058a4 <_malloc_r+0xa8>
 8005884:	6822      	ldr	r2, [r4, #0]
 8005886:	1b52      	subs	r2, r2, r5
 8005888:	d420      	bmi.n	80058cc <_malloc_r+0xd0>
 800588a:	2a0b      	cmp	r2, #11
 800588c:	d917      	bls.n	80058be <_malloc_r+0xc2>
 800588e:	1961      	adds	r1, r4, r5
 8005890:	42a3      	cmp	r3, r4
 8005892:	6025      	str	r5, [r4, #0]
 8005894:	bf18      	it	ne
 8005896:	6059      	strne	r1, [r3, #4]
 8005898:	6863      	ldr	r3, [r4, #4]
 800589a:	bf08      	it	eq
 800589c:	f8c8 1000 	streq.w	r1, [r8]
 80058a0:	5162      	str	r2, [r4, r5]
 80058a2:	604b      	str	r3, [r1, #4]
 80058a4:	4630      	mov	r0, r6
 80058a6:	f000 f82f 	bl	8005908 <__malloc_unlock>
 80058aa:	f104 000b 	add.w	r0, r4, #11
 80058ae:	1d23      	adds	r3, r4, #4
 80058b0:	f020 0007 	bic.w	r0, r0, #7
 80058b4:	1ac2      	subs	r2, r0, r3
 80058b6:	bf1c      	itt	ne
 80058b8:	1a1b      	subne	r3, r3, r0
 80058ba:	50a3      	strne	r3, [r4, r2]
 80058bc:	e7af      	b.n	800581e <_malloc_r+0x22>
 80058be:	6862      	ldr	r2, [r4, #4]
 80058c0:	42a3      	cmp	r3, r4
 80058c2:	bf0c      	ite	eq
 80058c4:	f8c8 2000 	streq.w	r2, [r8]
 80058c8:	605a      	strne	r2, [r3, #4]
 80058ca:	e7eb      	b.n	80058a4 <_malloc_r+0xa8>
 80058cc:	4623      	mov	r3, r4
 80058ce:	6864      	ldr	r4, [r4, #4]
 80058d0:	e7ae      	b.n	8005830 <_malloc_r+0x34>
 80058d2:	463c      	mov	r4, r7
 80058d4:	687f      	ldr	r7, [r7, #4]
 80058d6:	e7b6      	b.n	8005846 <_malloc_r+0x4a>
 80058d8:	461a      	mov	r2, r3
 80058da:	685b      	ldr	r3, [r3, #4]
 80058dc:	42a3      	cmp	r3, r4
 80058de:	d1fb      	bne.n	80058d8 <_malloc_r+0xdc>
 80058e0:	2300      	movs	r3, #0
 80058e2:	6053      	str	r3, [r2, #4]
 80058e4:	e7de      	b.n	80058a4 <_malloc_r+0xa8>
 80058e6:	230c      	movs	r3, #12
 80058e8:	6033      	str	r3, [r6, #0]
 80058ea:	4630      	mov	r0, r6
 80058ec:	f000 f80c 	bl	8005908 <__malloc_unlock>
 80058f0:	e794      	b.n	800581c <_malloc_r+0x20>
 80058f2:	6005      	str	r5, [r0, #0]
 80058f4:	e7d6      	b.n	80058a4 <_malloc_r+0xa8>
 80058f6:	bf00      	nop
 80058f8:	200003d8 	.word	0x200003d8

080058fc <__malloc_lock>:
 80058fc:	4801      	ldr	r0, [pc, #4]	@ (8005904 <__malloc_lock+0x8>)
 80058fe:	f7ff bf0f 	b.w	8005720 <__retarget_lock_acquire_recursive>
 8005902:	bf00      	nop
 8005904:	200003d0 	.word	0x200003d0

08005908 <__malloc_unlock>:
 8005908:	4801      	ldr	r0, [pc, #4]	@ (8005910 <__malloc_unlock+0x8>)
 800590a:	f7ff bf0a 	b.w	8005722 <__retarget_lock_release_recursive>
 800590e:	bf00      	nop
 8005910:	200003d0 	.word	0x200003d0

08005914 <__ssputs_r>:
 8005914:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005918:	688e      	ldr	r6, [r1, #8]
 800591a:	461f      	mov	r7, r3
 800591c:	42be      	cmp	r6, r7
 800591e:	680b      	ldr	r3, [r1, #0]
 8005920:	4682      	mov	sl, r0
 8005922:	460c      	mov	r4, r1
 8005924:	4690      	mov	r8, r2
 8005926:	d82d      	bhi.n	8005984 <__ssputs_r+0x70>
 8005928:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800592c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8005930:	d026      	beq.n	8005980 <__ssputs_r+0x6c>
 8005932:	6965      	ldr	r5, [r4, #20]
 8005934:	6909      	ldr	r1, [r1, #16]
 8005936:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800593a:	eba3 0901 	sub.w	r9, r3, r1
 800593e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005942:	1c7b      	adds	r3, r7, #1
 8005944:	444b      	add	r3, r9
 8005946:	106d      	asrs	r5, r5, #1
 8005948:	429d      	cmp	r5, r3
 800594a:	bf38      	it	cc
 800594c:	461d      	movcc	r5, r3
 800594e:	0553      	lsls	r3, r2, #21
 8005950:	d527      	bpl.n	80059a2 <__ssputs_r+0x8e>
 8005952:	4629      	mov	r1, r5
 8005954:	f7ff ff52 	bl	80057fc <_malloc_r>
 8005958:	4606      	mov	r6, r0
 800595a:	b360      	cbz	r0, 80059b6 <__ssputs_r+0xa2>
 800595c:	6921      	ldr	r1, [r4, #16]
 800595e:	464a      	mov	r2, r9
 8005960:	f000 fae8 	bl	8005f34 <memcpy>
 8005964:	89a3      	ldrh	r3, [r4, #12]
 8005966:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800596a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800596e:	81a3      	strh	r3, [r4, #12]
 8005970:	6126      	str	r6, [r4, #16]
 8005972:	6165      	str	r5, [r4, #20]
 8005974:	444e      	add	r6, r9
 8005976:	eba5 0509 	sub.w	r5, r5, r9
 800597a:	6026      	str	r6, [r4, #0]
 800597c:	60a5      	str	r5, [r4, #8]
 800597e:	463e      	mov	r6, r7
 8005980:	42be      	cmp	r6, r7
 8005982:	d900      	bls.n	8005986 <__ssputs_r+0x72>
 8005984:	463e      	mov	r6, r7
 8005986:	6820      	ldr	r0, [r4, #0]
 8005988:	4632      	mov	r2, r6
 800598a:	4641      	mov	r1, r8
 800598c:	f000 faa8 	bl	8005ee0 <memmove>
 8005990:	68a3      	ldr	r3, [r4, #8]
 8005992:	1b9b      	subs	r3, r3, r6
 8005994:	60a3      	str	r3, [r4, #8]
 8005996:	6823      	ldr	r3, [r4, #0]
 8005998:	4433      	add	r3, r6
 800599a:	6023      	str	r3, [r4, #0]
 800599c:	2000      	movs	r0, #0
 800599e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80059a2:	462a      	mov	r2, r5
 80059a4:	f000 fad4 	bl	8005f50 <_realloc_r>
 80059a8:	4606      	mov	r6, r0
 80059aa:	2800      	cmp	r0, #0
 80059ac:	d1e0      	bne.n	8005970 <__ssputs_r+0x5c>
 80059ae:	6921      	ldr	r1, [r4, #16]
 80059b0:	4650      	mov	r0, sl
 80059b2:	f7ff feb7 	bl	8005724 <_free_r>
 80059b6:	230c      	movs	r3, #12
 80059b8:	f8ca 3000 	str.w	r3, [sl]
 80059bc:	89a3      	ldrh	r3, [r4, #12]
 80059be:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80059c2:	81a3      	strh	r3, [r4, #12]
 80059c4:	f04f 30ff 	mov.w	r0, #4294967295
 80059c8:	e7e9      	b.n	800599e <__ssputs_r+0x8a>
	...

080059cc <_svfiprintf_r>:
 80059cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80059d0:	4698      	mov	r8, r3
 80059d2:	898b      	ldrh	r3, [r1, #12]
 80059d4:	061b      	lsls	r3, r3, #24
 80059d6:	b09d      	sub	sp, #116	@ 0x74
 80059d8:	4607      	mov	r7, r0
 80059da:	460d      	mov	r5, r1
 80059dc:	4614      	mov	r4, r2
 80059de:	d510      	bpl.n	8005a02 <_svfiprintf_r+0x36>
 80059e0:	690b      	ldr	r3, [r1, #16]
 80059e2:	b973      	cbnz	r3, 8005a02 <_svfiprintf_r+0x36>
 80059e4:	2140      	movs	r1, #64	@ 0x40
 80059e6:	f7ff ff09 	bl	80057fc <_malloc_r>
 80059ea:	6028      	str	r0, [r5, #0]
 80059ec:	6128      	str	r0, [r5, #16]
 80059ee:	b930      	cbnz	r0, 80059fe <_svfiprintf_r+0x32>
 80059f0:	230c      	movs	r3, #12
 80059f2:	603b      	str	r3, [r7, #0]
 80059f4:	f04f 30ff 	mov.w	r0, #4294967295
 80059f8:	b01d      	add	sp, #116	@ 0x74
 80059fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80059fe:	2340      	movs	r3, #64	@ 0x40
 8005a00:	616b      	str	r3, [r5, #20]
 8005a02:	2300      	movs	r3, #0
 8005a04:	9309      	str	r3, [sp, #36]	@ 0x24
 8005a06:	2320      	movs	r3, #32
 8005a08:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8005a0c:	f8cd 800c 	str.w	r8, [sp, #12]
 8005a10:	2330      	movs	r3, #48	@ 0x30
 8005a12:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8005bb0 <_svfiprintf_r+0x1e4>
 8005a16:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8005a1a:	f04f 0901 	mov.w	r9, #1
 8005a1e:	4623      	mov	r3, r4
 8005a20:	469a      	mov	sl, r3
 8005a22:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005a26:	b10a      	cbz	r2, 8005a2c <_svfiprintf_r+0x60>
 8005a28:	2a25      	cmp	r2, #37	@ 0x25
 8005a2a:	d1f9      	bne.n	8005a20 <_svfiprintf_r+0x54>
 8005a2c:	ebba 0b04 	subs.w	fp, sl, r4
 8005a30:	d00b      	beq.n	8005a4a <_svfiprintf_r+0x7e>
 8005a32:	465b      	mov	r3, fp
 8005a34:	4622      	mov	r2, r4
 8005a36:	4629      	mov	r1, r5
 8005a38:	4638      	mov	r0, r7
 8005a3a:	f7ff ff6b 	bl	8005914 <__ssputs_r>
 8005a3e:	3001      	adds	r0, #1
 8005a40:	f000 80a7 	beq.w	8005b92 <_svfiprintf_r+0x1c6>
 8005a44:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005a46:	445a      	add	r2, fp
 8005a48:	9209      	str	r2, [sp, #36]	@ 0x24
 8005a4a:	f89a 3000 	ldrb.w	r3, [sl]
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	f000 809f 	beq.w	8005b92 <_svfiprintf_r+0x1c6>
 8005a54:	2300      	movs	r3, #0
 8005a56:	f04f 32ff 	mov.w	r2, #4294967295
 8005a5a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005a5e:	f10a 0a01 	add.w	sl, sl, #1
 8005a62:	9304      	str	r3, [sp, #16]
 8005a64:	9307      	str	r3, [sp, #28]
 8005a66:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8005a6a:	931a      	str	r3, [sp, #104]	@ 0x68
 8005a6c:	4654      	mov	r4, sl
 8005a6e:	2205      	movs	r2, #5
 8005a70:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005a74:	484e      	ldr	r0, [pc, #312]	@ (8005bb0 <_svfiprintf_r+0x1e4>)
 8005a76:	f7fa fbe3 	bl	8000240 <memchr>
 8005a7a:	9a04      	ldr	r2, [sp, #16]
 8005a7c:	b9d8      	cbnz	r0, 8005ab6 <_svfiprintf_r+0xea>
 8005a7e:	06d0      	lsls	r0, r2, #27
 8005a80:	bf44      	itt	mi
 8005a82:	2320      	movmi	r3, #32
 8005a84:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005a88:	0711      	lsls	r1, r2, #28
 8005a8a:	bf44      	itt	mi
 8005a8c:	232b      	movmi	r3, #43	@ 0x2b
 8005a8e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005a92:	f89a 3000 	ldrb.w	r3, [sl]
 8005a96:	2b2a      	cmp	r3, #42	@ 0x2a
 8005a98:	d015      	beq.n	8005ac6 <_svfiprintf_r+0xfa>
 8005a9a:	9a07      	ldr	r2, [sp, #28]
 8005a9c:	4654      	mov	r4, sl
 8005a9e:	2000      	movs	r0, #0
 8005aa0:	f04f 0c0a 	mov.w	ip, #10
 8005aa4:	4621      	mov	r1, r4
 8005aa6:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005aaa:	3b30      	subs	r3, #48	@ 0x30
 8005aac:	2b09      	cmp	r3, #9
 8005aae:	d94b      	bls.n	8005b48 <_svfiprintf_r+0x17c>
 8005ab0:	b1b0      	cbz	r0, 8005ae0 <_svfiprintf_r+0x114>
 8005ab2:	9207      	str	r2, [sp, #28]
 8005ab4:	e014      	b.n	8005ae0 <_svfiprintf_r+0x114>
 8005ab6:	eba0 0308 	sub.w	r3, r0, r8
 8005aba:	fa09 f303 	lsl.w	r3, r9, r3
 8005abe:	4313      	orrs	r3, r2
 8005ac0:	9304      	str	r3, [sp, #16]
 8005ac2:	46a2      	mov	sl, r4
 8005ac4:	e7d2      	b.n	8005a6c <_svfiprintf_r+0xa0>
 8005ac6:	9b03      	ldr	r3, [sp, #12]
 8005ac8:	1d19      	adds	r1, r3, #4
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	9103      	str	r1, [sp, #12]
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	bfbb      	ittet	lt
 8005ad2:	425b      	neglt	r3, r3
 8005ad4:	f042 0202 	orrlt.w	r2, r2, #2
 8005ad8:	9307      	strge	r3, [sp, #28]
 8005ada:	9307      	strlt	r3, [sp, #28]
 8005adc:	bfb8      	it	lt
 8005ade:	9204      	strlt	r2, [sp, #16]
 8005ae0:	7823      	ldrb	r3, [r4, #0]
 8005ae2:	2b2e      	cmp	r3, #46	@ 0x2e
 8005ae4:	d10a      	bne.n	8005afc <_svfiprintf_r+0x130>
 8005ae6:	7863      	ldrb	r3, [r4, #1]
 8005ae8:	2b2a      	cmp	r3, #42	@ 0x2a
 8005aea:	d132      	bne.n	8005b52 <_svfiprintf_r+0x186>
 8005aec:	9b03      	ldr	r3, [sp, #12]
 8005aee:	1d1a      	adds	r2, r3, #4
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	9203      	str	r2, [sp, #12]
 8005af4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8005af8:	3402      	adds	r4, #2
 8005afa:	9305      	str	r3, [sp, #20]
 8005afc:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8005bc0 <_svfiprintf_r+0x1f4>
 8005b00:	7821      	ldrb	r1, [r4, #0]
 8005b02:	2203      	movs	r2, #3
 8005b04:	4650      	mov	r0, sl
 8005b06:	f7fa fb9b 	bl	8000240 <memchr>
 8005b0a:	b138      	cbz	r0, 8005b1c <_svfiprintf_r+0x150>
 8005b0c:	9b04      	ldr	r3, [sp, #16]
 8005b0e:	eba0 000a 	sub.w	r0, r0, sl
 8005b12:	2240      	movs	r2, #64	@ 0x40
 8005b14:	4082      	lsls	r2, r0
 8005b16:	4313      	orrs	r3, r2
 8005b18:	3401      	adds	r4, #1
 8005b1a:	9304      	str	r3, [sp, #16]
 8005b1c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005b20:	4824      	ldr	r0, [pc, #144]	@ (8005bb4 <_svfiprintf_r+0x1e8>)
 8005b22:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8005b26:	2206      	movs	r2, #6
 8005b28:	f7fa fb8a 	bl	8000240 <memchr>
 8005b2c:	2800      	cmp	r0, #0
 8005b2e:	d036      	beq.n	8005b9e <_svfiprintf_r+0x1d2>
 8005b30:	4b21      	ldr	r3, [pc, #132]	@ (8005bb8 <_svfiprintf_r+0x1ec>)
 8005b32:	bb1b      	cbnz	r3, 8005b7c <_svfiprintf_r+0x1b0>
 8005b34:	9b03      	ldr	r3, [sp, #12]
 8005b36:	3307      	adds	r3, #7
 8005b38:	f023 0307 	bic.w	r3, r3, #7
 8005b3c:	3308      	adds	r3, #8
 8005b3e:	9303      	str	r3, [sp, #12]
 8005b40:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005b42:	4433      	add	r3, r6
 8005b44:	9309      	str	r3, [sp, #36]	@ 0x24
 8005b46:	e76a      	b.n	8005a1e <_svfiprintf_r+0x52>
 8005b48:	fb0c 3202 	mla	r2, ip, r2, r3
 8005b4c:	460c      	mov	r4, r1
 8005b4e:	2001      	movs	r0, #1
 8005b50:	e7a8      	b.n	8005aa4 <_svfiprintf_r+0xd8>
 8005b52:	2300      	movs	r3, #0
 8005b54:	3401      	adds	r4, #1
 8005b56:	9305      	str	r3, [sp, #20]
 8005b58:	4619      	mov	r1, r3
 8005b5a:	f04f 0c0a 	mov.w	ip, #10
 8005b5e:	4620      	mov	r0, r4
 8005b60:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005b64:	3a30      	subs	r2, #48	@ 0x30
 8005b66:	2a09      	cmp	r2, #9
 8005b68:	d903      	bls.n	8005b72 <_svfiprintf_r+0x1a6>
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	d0c6      	beq.n	8005afc <_svfiprintf_r+0x130>
 8005b6e:	9105      	str	r1, [sp, #20]
 8005b70:	e7c4      	b.n	8005afc <_svfiprintf_r+0x130>
 8005b72:	fb0c 2101 	mla	r1, ip, r1, r2
 8005b76:	4604      	mov	r4, r0
 8005b78:	2301      	movs	r3, #1
 8005b7a:	e7f0      	b.n	8005b5e <_svfiprintf_r+0x192>
 8005b7c:	ab03      	add	r3, sp, #12
 8005b7e:	9300      	str	r3, [sp, #0]
 8005b80:	462a      	mov	r2, r5
 8005b82:	4b0e      	ldr	r3, [pc, #56]	@ (8005bbc <_svfiprintf_r+0x1f0>)
 8005b84:	a904      	add	r1, sp, #16
 8005b86:	4638      	mov	r0, r7
 8005b88:	f3af 8000 	nop.w
 8005b8c:	1c42      	adds	r2, r0, #1
 8005b8e:	4606      	mov	r6, r0
 8005b90:	d1d6      	bne.n	8005b40 <_svfiprintf_r+0x174>
 8005b92:	89ab      	ldrh	r3, [r5, #12]
 8005b94:	065b      	lsls	r3, r3, #25
 8005b96:	f53f af2d 	bmi.w	80059f4 <_svfiprintf_r+0x28>
 8005b9a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005b9c:	e72c      	b.n	80059f8 <_svfiprintf_r+0x2c>
 8005b9e:	ab03      	add	r3, sp, #12
 8005ba0:	9300      	str	r3, [sp, #0]
 8005ba2:	462a      	mov	r2, r5
 8005ba4:	4b05      	ldr	r3, [pc, #20]	@ (8005bbc <_svfiprintf_r+0x1f0>)
 8005ba6:	a904      	add	r1, sp, #16
 8005ba8:	4638      	mov	r0, r7
 8005baa:	f000 f879 	bl	8005ca0 <_printf_i>
 8005bae:	e7ed      	b.n	8005b8c <_svfiprintf_r+0x1c0>
 8005bb0:	08005ff8 	.word	0x08005ff8
 8005bb4:	08006002 	.word	0x08006002
 8005bb8:	00000000 	.word	0x00000000
 8005bbc:	08005915 	.word	0x08005915
 8005bc0:	08005ffe 	.word	0x08005ffe

08005bc4 <_printf_common>:
 8005bc4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005bc8:	4616      	mov	r6, r2
 8005bca:	4698      	mov	r8, r3
 8005bcc:	688a      	ldr	r2, [r1, #8]
 8005bce:	690b      	ldr	r3, [r1, #16]
 8005bd0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005bd4:	4293      	cmp	r3, r2
 8005bd6:	bfb8      	it	lt
 8005bd8:	4613      	movlt	r3, r2
 8005bda:	6033      	str	r3, [r6, #0]
 8005bdc:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8005be0:	4607      	mov	r7, r0
 8005be2:	460c      	mov	r4, r1
 8005be4:	b10a      	cbz	r2, 8005bea <_printf_common+0x26>
 8005be6:	3301      	adds	r3, #1
 8005be8:	6033      	str	r3, [r6, #0]
 8005bea:	6823      	ldr	r3, [r4, #0]
 8005bec:	0699      	lsls	r1, r3, #26
 8005bee:	bf42      	ittt	mi
 8005bf0:	6833      	ldrmi	r3, [r6, #0]
 8005bf2:	3302      	addmi	r3, #2
 8005bf4:	6033      	strmi	r3, [r6, #0]
 8005bf6:	6825      	ldr	r5, [r4, #0]
 8005bf8:	f015 0506 	ands.w	r5, r5, #6
 8005bfc:	d106      	bne.n	8005c0c <_printf_common+0x48>
 8005bfe:	f104 0a19 	add.w	sl, r4, #25
 8005c02:	68e3      	ldr	r3, [r4, #12]
 8005c04:	6832      	ldr	r2, [r6, #0]
 8005c06:	1a9b      	subs	r3, r3, r2
 8005c08:	42ab      	cmp	r3, r5
 8005c0a:	dc26      	bgt.n	8005c5a <_printf_common+0x96>
 8005c0c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8005c10:	6822      	ldr	r2, [r4, #0]
 8005c12:	3b00      	subs	r3, #0
 8005c14:	bf18      	it	ne
 8005c16:	2301      	movne	r3, #1
 8005c18:	0692      	lsls	r2, r2, #26
 8005c1a:	d42b      	bmi.n	8005c74 <_printf_common+0xb0>
 8005c1c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8005c20:	4641      	mov	r1, r8
 8005c22:	4638      	mov	r0, r7
 8005c24:	47c8      	blx	r9
 8005c26:	3001      	adds	r0, #1
 8005c28:	d01e      	beq.n	8005c68 <_printf_common+0xa4>
 8005c2a:	6823      	ldr	r3, [r4, #0]
 8005c2c:	6922      	ldr	r2, [r4, #16]
 8005c2e:	f003 0306 	and.w	r3, r3, #6
 8005c32:	2b04      	cmp	r3, #4
 8005c34:	bf02      	ittt	eq
 8005c36:	68e5      	ldreq	r5, [r4, #12]
 8005c38:	6833      	ldreq	r3, [r6, #0]
 8005c3a:	1aed      	subeq	r5, r5, r3
 8005c3c:	68a3      	ldr	r3, [r4, #8]
 8005c3e:	bf0c      	ite	eq
 8005c40:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005c44:	2500      	movne	r5, #0
 8005c46:	4293      	cmp	r3, r2
 8005c48:	bfc4      	itt	gt
 8005c4a:	1a9b      	subgt	r3, r3, r2
 8005c4c:	18ed      	addgt	r5, r5, r3
 8005c4e:	2600      	movs	r6, #0
 8005c50:	341a      	adds	r4, #26
 8005c52:	42b5      	cmp	r5, r6
 8005c54:	d11a      	bne.n	8005c8c <_printf_common+0xc8>
 8005c56:	2000      	movs	r0, #0
 8005c58:	e008      	b.n	8005c6c <_printf_common+0xa8>
 8005c5a:	2301      	movs	r3, #1
 8005c5c:	4652      	mov	r2, sl
 8005c5e:	4641      	mov	r1, r8
 8005c60:	4638      	mov	r0, r7
 8005c62:	47c8      	blx	r9
 8005c64:	3001      	adds	r0, #1
 8005c66:	d103      	bne.n	8005c70 <_printf_common+0xac>
 8005c68:	f04f 30ff 	mov.w	r0, #4294967295
 8005c6c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005c70:	3501      	adds	r5, #1
 8005c72:	e7c6      	b.n	8005c02 <_printf_common+0x3e>
 8005c74:	18e1      	adds	r1, r4, r3
 8005c76:	1c5a      	adds	r2, r3, #1
 8005c78:	2030      	movs	r0, #48	@ 0x30
 8005c7a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8005c7e:	4422      	add	r2, r4
 8005c80:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8005c84:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8005c88:	3302      	adds	r3, #2
 8005c8a:	e7c7      	b.n	8005c1c <_printf_common+0x58>
 8005c8c:	2301      	movs	r3, #1
 8005c8e:	4622      	mov	r2, r4
 8005c90:	4641      	mov	r1, r8
 8005c92:	4638      	mov	r0, r7
 8005c94:	47c8      	blx	r9
 8005c96:	3001      	adds	r0, #1
 8005c98:	d0e6      	beq.n	8005c68 <_printf_common+0xa4>
 8005c9a:	3601      	adds	r6, #1
 8005c9c:	e7d9      	b.n	8005c52 <_printf_common+0x8e>
	...

08005ca0 <_printf_i>:
 8005ca0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005ca4:	7e0f      	ldrb	r7, [r1, #24]
 8005ca6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8005ca8:	2f78      	cmp	r7, #120	@ 0x78
 8005caa:	4691      	mov	r9, r2
 8005cac:	4680      	mov	r8, r0
 8005cae:	460c      	mov	r4, r1
 8005cb0:	469a      	mov	sl, r3
 8005cb2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8005cb6:	d807      	bhi.n	8005cc8 <_printf_i+0x28>
 8005cb8:	2f62      	cmp	r7, #98	@ 0x62
 8005cba:	d80a      	bhi.n	8005cd2 <_printf_i+0x32>
 8005cbc:	2f00      	cmp	r7, #0
 8005cbe:	f000 80d2 	beq.w	8005e66 <_printf_i+0x1c6>
 8005cc2:	2f58      	cmp	r7, #88	@ 0x58
 8005cc4:	f000 80b9 	beq.w	8005e3a <_printf_i+0x19a>
 8005cc8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005ccc:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8005cd0:	e03a      	b.n	8005d48 <_printf_i+0xa8>
 8005cd2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8005cd6:	2b15      	cmp	r3, #21
 8005cd8:	d8f6      	bhi.n	8005cc8 <_printf_i+0x28>
 8005cda:	a101      	add	r1, pc, #4	@ (adr r1, 8005ce0 <_printf_i+0x40>)
 8005cdc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005ce0:	08005d39 	.word	0x08005d39
 8005ce4:	08005d4d 	.word	0x08005d4d
 8005ce8:	08005cc9 	.word	0x08005cc9
 8005cec:	08005cc9 	.word	0x08005cc9
 8005cf0:	08005cc9 	.word	0x08005cc9
 8005cf4:	08005cc9 	.word	0x08005cc9
 8005cf8:	08005d4d 	.word	0x08005d4d
 8005cfc:	08005cc9 	.word	0x08005cc9
 8005d00:	08005cc9 	.word	0x08005cc9
 8005d04:	08005cc9 	.word	0x08005cc9
 8005d08:	08005cc9 	.word	0x08005cc9
 8005d0c:	08005e4d 	.word	0x08005e4d
 8005d10:	08005d77 	.word	0x08005d77
 8005d14:	08005e07 	.word	0x08005e07
 8005d18:	08005cc9 	.word	0x08005cc9
 8005d1c:	08005cc9 	.word	0x08005cc9
 8005d20:	08005e6f 	.word	0x08005e6f
 8005d24:	08005cc9 	.word	0x08005cc9
 8005d28:	08005d77 	.word	0x08005d77
 8005d2c:	08005cc9 	.word	0x08005cc9
 8005d30:	08005cc9 	.word	0x08005cc9
 8005d34:	08005e0f 	.word	0x08005e0f
 8005d38:	6833      	ldr	r3, [r6, #0]
 8005d3a:	1d1a      	adds	r2, r3, #4
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	6032      	str	r2, [r6, #0]
 8005d40:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005d44:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8005d48:	2301      	movs	r3, #1
 8005d4a:	e09d      	b.n	8005e88 <_printf_i+0x1e8>
 8005d4c:	6833      	ldr	r3, [r6, #0]
 8005d4e:	6820      	ldr	r0, [r4, #0]
 8005d50:	1d19      	adds	r1, r3, #4
 8005d52:	6031      	str	r1, [r6, #0]
 8005d54:	0606      	lsls	r6, r0, #24
 8005d56:	d501      	bpl.n	8005d5c <_printf_i+0xbc>
 8005d58:	681d      	ldr	r5, [r3, #0]
 8005d5a:	e003      	b.n	8005d64 <_printf_i+0xc4>
 8005d5c:	0645      	lsls	r5, r0, #25
 8005d5e:	d5fb      	bpl.n	8005d58 <_printf_i+0xb8>
 8005d60:	f9b3 5000 	ldrsh.w	r5, [r3]
 8005d64:	2d00      	cmp	r5, #0
 8005d66:	da03      	bge.n	8005d70 <_printf_i+0xd0>
 8005d68:	232d      	movs	r3, #45	@ 0x2d
 8005d6a:	426d      	negs	r5, r5
 8005d6c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005d70:	4859      	ldr	r0, [pc, #356]	@ (8005ed8 <_printf_i+0x238>)
 8005d72:	230a      	movs	r3, #10
 8005d74:	e011      	b.n	8005d9a <_printf_i+0xfa>
 8005d76:	6821      	ldr	r1, [r4, #0]
 8005d78:	6833      	ldr	r3, [r6, #0]
 8005d7a:	0608      	lsls	r0, r1, #24
 8005d7c:	f853 5b04 	ldr.w	r5, [r3], #4
 8005d80:	d402      	bmi.n	8005d88 <_printf_i+0xe8>
 8005d82:	0649      	lsls	r1, r1, #25
 8005d84:	bf48      	it	mi
 8005d86:	b2ad      	uxthmi	r5, r5
 8005d88:	2f6f      	cmp	r7, #111	@ 0x6f
 8005d8a:	4853      	ldr	r0, [pc, #332]	@ (8005ed8 <_printf_i+0x238>)
 8005d8c:	6033      	str	r3, [r6, #0]
 8005d8e:	bf14      	ite	ne
 8005d90:	230a      	movne	r3, #10
 8005d92:	2308      	moveq	r3, #8
 8005d94:	2100      	movs	r1, #0
 8005d96:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8005d9a:	6866      	ldr	r6, [r4, #4]
 8005d9c:	60a6      	str	r6, [r4, #8]
 8005d9e:	2e00      	cmp	r6, #0
 8005da0:	bfa2      	ittt	ge
 8005da2:	6821      	ldrge	r1, [r4, #0]
 8005da4:	f021 0104 	bicge.w	r1, r1, #4
 8005da8:	6021      	strge	r1, [r4, #0]
 8005daa:	b90d      	cbnz	r5, 8005db0 <_printf_i+0x110>
 8005dac:	2e00      	cmp	r6, #0
 8005dae:	d04b      	beq.n	8005e48 <_printf_i+0x1a8>
 8005db0:	4616      	mov	r6, r2
 8005db2:	fbb5 f1f3 	udiv	r1, r5, r3
 8005db6:	fb03 5711 	mls	r7, r3, r1, r5
 8005dba:	5dc7      	ldrb	r7, [r0, r7]
 8005dbc:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005dc0:	462f      	mov	r7, r5
 8005dc2:	42bb      	cmp	r3, r7
 8005dc4:	460d      	mov	r5, r1
 8005dc6:	d9f4      	bls.n	8005db2 <_printf_i+0x112>
 8005dc8:	2b08      	cmp	r3, #8
 8005dca:	d10b      	bne.n	8005de4 <_printf_i+0x144>
 8005dcc:	6823      	ldr	r3, [r4, #0]
 8005dce:	07df      	lsls	r7, r3, #31
 8005dd0:	d508      	bpl.n	8005de4 <_printf_i+0x144>
 8005dd2:	6923      	ldr	r3, [r4, #16]
 8005dd4:	6861      	ldr	r1, [r4, #4]
 8005dd6:	4299      	cmp	r1, r3
 8005dd8:	bfde      	ittt	le
 8005dda:	2330      	movle	r3, #48	@ 0x30
 8005ddc:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005de0:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005de4:	1b92      	subs	r2, r2, r6
 8005de6:	6122      	str	r2, [r4, #16]
 8005de8:	f8cd a000 	str.w	sl, [sp]
 8005dec:	464b      	mov	r3, r9
 8005dee:	aa03      	add	r2, sp, #12
 8005df0:	4621      	mov	r1, r4
 8005df2:	4640      	mov	r0, r8
 8005df4:	f7ff fee6 	bl	8005bc4 <_printf_common>
 8005df8:	3001      	adds	r0, #1
 8005dfa:	d14a      	bne.n	8005e92 <_printf_i+0x1f2>
 8005dfc:	f04f 30ff 	mov.w	r0, #4294967295
 8005e00:	b004      	add	sp, #16
 8005e02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005e06:	6823      	ldr	r3, [r4, #0]
 8005e08:	f043 0320 	orr.w	r3, r3, #32
 8005e0c:	6023      	str	r3, [r4, #0]
 8005e0e:	4833      	ldr	r0, [pc, #204]	@ (8005edc <_printf_i+0x23c>)
 8005e10:	2778      	movs	r7, #120	@ 0x78
 8005e12:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8005e16:	6823      	ldr	r3, [r4, #0]
 8005e18:	6831      	ldr	r1, [r6, #0]
 8005e1a:	061f      	lsls	r7, r3, #24
 8005e1c:	f851 5b04 	ldr.w	r5, [r1], #4
 8005e20:	d402      	bmi.n	8005e28 <_printf_i+0x188>
 8005e22:	065f      	lsls	r7, r3, #25
 8005e24:	bf48      	it	mi
 8005e26:	b2ad      	uxthmi	r5, r5
 8005e28:	6031      	str	r1, [r6, #0]
 8005e2a:	07d9      	lsls	r1, r3, #31
 8005e2c:	bf44      	itt	mi
 8005e2e:	f043 0320 	orrmi.w	r3, r3, #32
 8005e32:	6023      	strmi	r3, [r4, #0]
 8005e34:	b11d      	cbz	r5, 8005e3e <_printf_i+0x19e>
 8005e36:	2310      	movs	r3, #16
 8005e38:	e7ac      	b.n	8005d94 <_printf_i+0xf4>
 8005e3a:	4827      	ldr	r0, [pc, #156]	@ (8005ed8 <_printf_i+0x238>)
 8005e3c:	e7e9      	b.n	8005e12 <_printf_i+0x172>
 8005e3e:	6823      	ldr	r3, [r4, #0]
 8005e40:	f023 0320 	bic.w	r3, r3, #32
 8005e44:	6023      	str	r3, [r4, #0]
 8005e46:	e7f6      	b.n	8005e36 <_printf_i+0x196>
 8005e48:	4616      	mov	r6, r2
 8005e4a:	e7bd      	b.n	8005dc8 <_printf_i+0x128>
 8005e4c:	6833      	ldr	r3, [r6, #0]
 8005e4e:	6825      	ldr	r5, [r4, #0]
 8005e50:	6961      	ldr	r1, [r4, #20]
 8005e52:	1d18      	adds	r0, r3, #4
 8005e54:	6030      	str	r0, [r6, #0]
 8005e56:	062e      	lsls	r6, r5, #24
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	d501      	bpl.n	8005e60 <_printf_i+0x1c0>
 8005e5c:	6019      	str	r1, [r3, #0]
 8005e5e:	e002      	b.n	8005e66 <_printf_i+0x1c6>
 8005e60:	0668      	lsls	r0, r5, #25
 8005e62:	d5fb      	bpl.n	8005e5c <_printf_i+0x1bc>
 8005e64:	8019      	strh	r1, [r3, #0]
 8005e66:	2300      	movs	r3, #0
 8005e68:	6123      	str	r3, [r4, #16]
 8005e6a:	4616      	mov	r6, r2
 8005e6c:	e7bc      	b.n	8005de8 <_printf_i+0x148>
 8005e6e:	6833      	ldr	r3, [r6, #0]
 8005e70:	1d1a      	adds	r2, r3, #4
 8005e72:	6032      	str	r2, [r6, #0]
 8005e74:	681e      	ldr	r6, [r3, #0]
 8005e76:	6862      	ldr	r2, [r4, #4]
 8005e78:	2100      	movs	r1, #0
 8005e7a:	4630      	mov	r0, r6
 8005e7c:	f7fa f9e0 	bl	8000240 <memchr>
 8005e80:	b108      	cbz	r0, 8005e86 <_printf_i+0x1e6>
 8005e82:	1b80      	subs	r0, r0, r6
 8005e84:	6060      	str	r0, [r4, #4]
 8005e86:	6863      	ldr	r3, [r4, #4]
 8005e88:	6123      	str	r3, [r4, #16]
 8005e8a:	2300      	movs	r3, #0
 8005e8c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005e90:	e7aa      	b.n	8005de8 <_printf_i+0x148>
 8005e92:	6923      	ldr	r3, [r4, #16]
 8005e94:	4632      	mov	r2, r6
 8005e96:	4649      	mov	r1, r9
 8005e98:	4640      	mov	r0, r8
 8005e9a:	47d0      	blx	sl
 8005e9c:	3001      	adds	r0, #1
 8005e9e:	d0ad      	beq.n	8005dfc <_printf_i+0x15c>
 8005ea0:	6823      	ldr	r3, [r4, #0]
 8005ea2:	079b      	lsls	r3, r3, #30
 8005ea4:	d413      	bmi.n	8005ece <_printf_i+0x22e>
 8005ea6:	68e0      	ldr	r0, [r4, #12]
 8005ea8:	9b03      	ldr	r3, [sp, #12]
 8005eaa:	4298      	cmp	r0, r3
 8005eac:	bfb8      	it	lt
 8005eae:	4618      	movlt	r0, r3
 8005eb0:	e7a6      	b.n	8005e00 <_printf_i+0x160>
 8005eb2:	2301      	movs	r3, #1
 8005eb4:	4632      	mov	r2, r6
 8005eb6:	4649      	mov	r1, r9
 8005eb8:	4640      	mov	r0, r8
 8005eba:	47d0      	blx	sl
 8005ebc:	3001      	adds	r0, #1
 8005ebe:	d09d      	beq.n	8005dfc <_printf_i+0x15c>
 8005ec0:	3501      	adds	r5, #1
 8005ec2:	68e3      	ldr	r3, [r4, #12]
 8005ec4:	9903      	ldr	r1, [sp, #12]
 8005ec6:	1a5b      	subs	r3, r3, r1
 8005ec8:	42ab      	cmp	r3, r5
 8005eca:	dcf2      	bgt.n	8005eb2 <_printf_i+0x212>
 8005ecc:	e7eb      	b.n	8005ea6 <_printf_i+0x206>
 8005ece:	2500      	movs	r5, #0
 8005ed0:	f104 0619 	add.w	r6, r4, #25
 8005ed4:	e7f5      	b.n	8005ec2 <_printf_i+0x222>
 8005ed6:	bf00      	nop
 8005ed8:	08006009 	.word	0x08006009
 8005edc:	0800601a 	.word	0x0800601a

08005ee0 <memmove>:
 8005ee0:	4288      	cmp	r0, r1
 8005ee2:	b510      	push	{r4, lr}
 8005ee4:	eb01 0402 	add.w	r4, r1, r2
 8005ee8:	d902      	bls.n	8005ef0 <memmove+0x10>
 8005eea:	4284      	cmp	r4, r0
 8005eec:	4623      	mov	r3, r4
 8005eee:	d807      	bhi.n	8005f00 <memmove+0x20>
 8005ef0:	1e43      	subs	r3, r0, #1
 8005ef2:	42a1      	cmp	r1, r4
 8005ef4:	d008      	beq.n	8005f08 <memmove+0x28>
 8005ef6:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005efa:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005efe:	e7f8      	b.n	8005ef2 <memmove+0x12>
 8005f00:	4402      	add	r2, r0
 8005f02:	4601      	mov	r1, r0
 8005f04:	428a      	cmp	r2, r1
 8005f06:	d100      	bne.n	8005f0a <memmove+0x2a>
 8005f08:	bd10      	pop	{r4, pc}
 8005f0a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005f0e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005f12:	e7f7      	b.n	8005f04 <memmove+0x24>

08005f14 <_sbrk_r>:
 8005f14:	b538      	push	{r3, r4, r5, lr}
 8005f16:	4d06      	ldr	r5, [pc, #24]	@ (8005f30 <_sbrk_r+0x1c>)
 8005f18:	2300      	movs	r3, #0
 8005f1a:	4604      	mov	r4, r0
 8005f1c:	4608      	mov	r0, r1
 8005f1e:	602b      	str	r3, [r5, #0]
 8005f20:	f7fa fff6 	bl	8000f10 <_sbrk>
 8005f24:	1c43      	adds	r3, r0, #1
 8005f26:	d102      	bne.n	8005f2e <_sbrk_r+0x1a>
 8005f28:	682b      	ldr	r3, [r5, #0]
 8005f2a:	b103      	cbz	r3, 8005f2e <_sbrk_r+0x1a>
 8005f2c:	6023      	str	r3, [r4, #0]
 8005f2e:	bd38      	pop	{r3, r4, r5, pc}
 8005f30:	200003cc 	.word	0x200003cc

08005f34 <memcpy>:
 8005f34:	440a      	add	r2, r1
 8005f36:	4291      	cmp	r1, r2
 8005f38:	f100 33ff 	add.w	r3, r0, #4294967295
 8005f3c:	d100      	bne.n	8005f40 <memcpy+0xc>
 8005f3e:	4770      	bx	lr
 8005f40:	b510      	push	{r4, lr}
 8005f42:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005f46:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005f4a:	4291      	cmp	r1, r2
 8005f4c:	d1f9      	bne.n	8005f42 <memcpy+0xe>
 8005f4e:	bd10      	pop	{r4, pc}

08005f50 <_realloc_r>:
 8005f50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005f54:	4680      	mov	r8, r0
 8005f56:	4615      	mov	r5, r2
 8005f58:	460c      	mov	r4, r1
 8005f5a:	b921      	cbnz	r1, 8005f66 <_realloc_r+0x16>
 8005f5c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005f60:	4611      	mov	r1, r2
 8005f62:	f7ff bc4b 	b.w	80057fc <_malloc_r>
 8005f66:	b92a      	cbnz	r2, 8005f74 <_realloc_r+0x24>
 8005f68:	f7ff fbdc 	bl	8005724 <_free_r>
 8005f6c:	2400      	movs	r4, #0
 8005f6e:	4620      	mov	r0, r4
 8005f70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005f74:	f000 f81a 	bl	8005fac <_malloc_usable_size_r>
 8005f78:	4285      	cmp	r5, r0
 8005f7a:	4606      	mov	r6, r0
 8005f7c:	d802      	bhi.n	8005f84 <_realloc_r+0x34>
 8005f7e:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8005f82:	d8f4      	bhi.n	8005f6e <_realloc_r+0x1e>
 8005f84:	4629      	mov	r1, r5
 8005f86:	4640      	mov	r0, r8
 8005f88:	f7ff fc38 	bl	80057fc <_malloc_r>
 8005f8c:	4607      	mov	r7, r0
 8005f8e:	2800      	cmp	r0, #0
 8005f90:	d0ec      	beq.n	8005f6c <_realloc_r+0x1c>
 8005f92:	42b5      	cmp	r5, r6
 8005f94:	462a      	mov	r2, r5
 8005f96:	4621      	mov	r1, r4
 8005f98:	bf28      	it	cs
 8005f9a:	4632      	movcs	r2, r6
 8005f9c:	f7ff ffca 	bl	8005f34 <memcpy>
 8005fa0:	4621      	mov	r1, r4
 8005fa2:	4640      	mov	r0, r8
 8005fa4:	f7ff fbbe 	bl	8005724 <_free_r>
 8005fa8:	463c      	mov	r4, r7
 8005faa:	e7e0      	b.n	8005f6e <_realloc_r+0x1e>

08005fac <_malloc_usable_size_r>:
 8005fac:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005fb0:	1f18      	subs	r0, r3, #4
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	bfbc      	itt	lt
 8005fb6:	580b      	ldrlt	r3, [r1, r0]
 8005fb8:	18c0      	addlt	r0, r0, r3
 8005fba:	4770      	bx	lr

08005fbc <_init>:
 8005fbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005fbe:	bf00      	nop
 8005fc0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005fc2:	bc08      	pop	{r3}
 8005fc4:	469e      	mov	lr, r3
 8005fc6:	4770      	bx	lr

08005fc8 <_fini>:
 8005fc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005fca:	bf00      	nop
 8005fcc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005fce:	bc08      	pop	{r3}
 8005fd0:	469e      	mov	lr, r3
 8005fd2:	4770      	bx	lr
